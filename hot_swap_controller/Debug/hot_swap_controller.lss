
hot_swap_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003988  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00003988  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000320  20000018  000039a0  00010018  2**2
                  ALLOC
  3 .stack        00002000  20000338  00003cc0  00010018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c6e6  00000000  00000000  0001009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000537e  00000000  00000000  0003c781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ba62  00000000  00000000  00041aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007c0  00000000  00000000  0004d561  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002270  00000000  00000000  0004dd21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017c83  00000000  00000000  0004ff91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015d90  00000000  00000000  00067c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006388a  00000000  00000000  0007d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000132c  00000000  00000000  000e1230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002338 	.word	0x20002338
       4:	00003391 	.word	0x00003391
       8:	0000338d 	.word	0x0000338d
       c:	0000338d 	.word	0x0000338d
	...
      2c:	0000338d 	.word	0x0000338d
	...
      38:	0000338d 	.word	0x0000338d
      3c:	0000338d 	.word	0x0000338d
      40:	0000338d 	.word	0x0000338d
      44:	0000338d 	.word	0x0000338d
      48:	00000965 	.word	0x00000965
      4c:	0000338d 	.word	0x0000338d
      50:	00002361 	.word	0x00002361
      54:	0000338d 	.word	0x0000338d
      58:	0000338d 	.word	0x0000338d
      5c:	0000293d 	.word	0x0000293d
      60:	0000294d 	.word	0x0000294d
      64:	0000295d 	.word	0x0000295d
      68:	0000296d 	.word	0x0000296d
      6c:	0000297d 	.word	0x0000297d
      70:	0000298d 	.word	0x0000298d
      74:	00001929 	.word	0x00001929
      78:	00001989 	.word	0x00001989
      7c:	000019e9 	.word	0x000019e9
      80:	00001a49 	.word	0x00001a49
      84:	00001aa9 	.word	0x00001aa9
      88:	00001b09 	.word	0x00001b09
      8c:	00001b69 	.word	0x00001b69
      90:	00001bc9 	.word	0x00001bc9
      94:	0000338d 	.word	0x0000338d
      98:	0000338d 	.word	0x0000338d
      9c:	0000338d 	.word	0x0000338d
      a0:	0000338d 	.word	0x0000338d

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000018 	.word	0x20000018
      c4:	00000000 	.word	0x00000000
      c8:	00003988 	.word	0x00003988

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	00003988 	.word	0x00003988
      f8:	2000001c 	.word	0x2000001c
      fc:	00003988 	.word	0x00003988
     100:	00000000 	.word	0x00000000

00000104 <nvm_set_config>:
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     104:	2304      	movs	r3, #4
     106:	b530      	push	{r4, r5, lr}
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     108:	4a1d      	ldr	r2, [pc, #116]	; (180 <nvm_set_config+0x7c>)
     10a:	1c01      	adds	r1, r0, #0
     10c:	69d0      	ldr	r0, [r2, #28]
     10e:	4303      	orrs	r3, r0
     110:	2020      	movs	r0, #32
     112:	61d3      	str	r3, [r2, #28]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     114:	4b1b      	ldr	r3, [pc, #108]	; (184 <nvm_set_config+0x80>)
     116:	30ff      	adds	r0, #255	; 0xff
		error_code = nvm_erase_row(row_start_address);
	} while (error_code == STATUS_BUSY);

	if (error_code != STATUS_OK) {
		system_interrupt_leave_critical_section();
		return error_code;
     118:	8b1a      	ldrh	r2, [r3, #24]
     11a:	4302      	orrs	r2, r0
     11c:	831a      	strh	r2, [r3, #24]
     11e:	7d1a      	ldrb	r2, [r3, #20]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     120:	381b      	subs	r0, #27
     122:	38ff      	subs	r0, #255	; 0xff
     124:	07d2      	lsls	r2, r2, #31
     126:	d400      	bmi.n	12a <nvm_set_config+0x26>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     128:	bd30      	pop	{r4, r5, pc}
     12a:	78cc      	ldrb	r4, [r1, #3]
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     12c:	784a      	ldrb	r2, [r1, #1]
     12e:	04a4      	lsls	r4, r4, #18
     130:	01d2      	lsls	r2, r2, #7
     132:	4322      	orrs	r2, r4
     134:	780c      	ldrb	r4, [r1, #0]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     136:	25c0      	movs	r5, #192	; 0xc0
     138:	0224      	lsls	r4, r4, #8
     13a:	1c20      	adds	r0, r4, #0
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     13c:	00ad      	lsls	r5, r5, #2
     13e:	4028      	ands	r0, r5
     140:	4302      	orrs	r2, r0
     142:	1c14      	adds	r4, r2, #0
     144:	221e      	movs	r2, #30
#endif

	while (!nvm_is_ready()) {
     146:	7888      	ldrb	r0, [r1, #2]
     148:	0040      	lsls	r0, r0, #1
     14a:	4010      	ands	r0, r2
     14c:	1c22      	adds	r2, r4, #0
     14e:	24c0      	movs	r4, #192	; 0xc0
     150:	4302      	orrs	r2, r0
     152:	7908      	ldrb	r0, [r1, #4]
     154:	02a4      	lsls	r4, r4, #10
     156:	0400      	lsls	r0, r0, #16
     158:	4020      	ands	r0, r4
     15a:	2408      	movs	r4, #8
     15c:	4302      	orrs	r2, r0
     15e:	605a      	str	r2, [r3, #4]
     160:	689a      	ldr	r2, [r3, #8]
     162:	4809      	ldr	r0, [pc, #36]	; (188 <nvm_set_config+0x84>)

	/* Write the updated row contents to the erased row */
	for (uint32_t i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		do
		{
			error_code = nvm_write_buffer(
     164:	0352      	lsls	r2, r2, #13
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
     166:	0f52      	lsrs	r2, r2, #29
     168:	4094      	lsls	r4, r2
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     16a:	8004      	strh	r4, [r0, #0]
     16c:	689a      	ldr	r2, [r3, #8]
     16e:	8042      	strh	r2, [r0, #2]
     170:	784a      	ldrb	r2, [r1, #1]
     172:	7102      	strb	r2, [r0, #4]
     174:	8b18      	ldrh	r0, [r3, #24]
     176:	05c0      	lsls	r0, r0, #23

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     178:	0fc0      	lsrs	r0, r0, #31
     17a:	0100      	lsls	r0, r0, #4
     17c:	e7d4      	b.n	128 <nvm_set_config+0x24>
     17e:	46c0      	nop			; (mov r8, r8)
		return STATUS_BUSY;
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     180:	40000400 	.word	0x40000400
     184:	41004000 	.word	0x41004000
     188:	20000034 	.word	0x20000034

0000018c <nvm_write_buffer>:

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	4c35      	ldr	r4, [pc, #212]	; (264 <nvm_write_buffer+0xd8>)
     190:	8825      	ldrh	r5, [r4, #0]
     192:	8863      	ldrh	r3, [r4, #2]
     194:	436b      	muls	r3, r5
     196:	4283      	cmp	r3, r0
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     198:	d202      	bcs.n	1a0 <nvm_write_buffer+0x14>
     19a:	2318      	movs	r3, #24
     19c:	1c18      	adds	r0, r3, #0
     19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1a0:	1e6b      	subs	r3, r5, #1
     1a2:	4203      	tst	r3, r0
     1a4:	d1f9      	bne.n	19a <nvm_write_buffer+0xe>
     1a6:	2317      	movs	r3, #23

	uint32_t nvm_address = destination_address / 2;
     1a8:	4295      	cmp	r5, r2

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     1aa:	d3f7      	bcc.n	19c <nvm_write_buffer+0x10>
     1ac:	4d2e      	ldr	r5, [pc, #184]	; (268 <nvm_write_buffer+0xdc>)
     1ae:	3b12      	subs	r3, #18
     1b0:	7d2e      	ldrb	r6, [r5, #20]
     1b2:	07f6      	lsls	r6, r6, #31
     1b4:	d5f2      	bpl.n	19c <nvm_write_buffer+0x10>
     1b6:	2701      	movs	r7, #1
     1b8:	4b2c      	ldr	r3, [pc, #176]	; (26c <nvm_write_buffer+0xe0>)
     1ba:	802b      	strh	r3, [r5, #0]
     1bc:	7d2b      	ldrb	r3, [r5, #20]
     1be:	4e2a      	ldr	r6, [pc, #168]	; (268 <nvm_write_buffer+0xdc>)
     1c0:	421f      	tst	r7, r3
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     1c2:	d0fb      	beq.n	1bc <nvm_write_buffer+0x30>

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     1c4:	2520      	movs	r5, #32
     1c6:	8b33      	ldrh	r3, [r6, #24]
		if (i < (length - 1)) {
			data |= (buffer[i + 1] << 8);
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     1c8:	35ff      	adds	r5, #255	; 0xff
     1ca:	432b      	orrs	r3, r5

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     1cc:	8333      	strh	r3, [r6, #24]
     1ce:	0847      	lsrs	r7, r0, #1
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     1d0:	2a00      	cmp	r2, #0

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     1d2:	d01a      	beq.n	20a <nvm_write_buffer+0x7e>
     1d4:	1e53      	subs	r3, r2, #1
			data |= (buffer[i + 1] << 8);
     1d6:	469c      	mov	ip, r3
     1d8:	007f      	lsls	r7, r7, #1
     1da:	2300      	movs	r3, #0
     1dc:	e006      	b.n	1ec <nvm_write_buffer+0x60>
     1de:	b2b5      	uxth	r5, r6
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     1e0:	3302      	adds	r3, #2
     1e2:	b29b      	uxth	r3, r3
     1e4:	803d      	strh	r5, [r7, #0]
     1e6:	3702      	adds	r7, #2
     1e8:	429a      	cmp	r2, r3
     1ea:	d907      	bls.n	1fc <nvm_write_buffer+0x70>
     1ec:	5cce      	ldrb	r6, [r1, r3]
     1ee:	4563      	cmp	r3, ip
     1f0:	daf5      	bge.n	1de <nvm_write_buffer+0x52>
     1f2:	18cd      	adds	r5, r1, r3
		system_interrupt_leave_critical_section();
		return error_code;
	}

	/* Write the updated row contents to the erased row */
	for (uint32_t i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     1f4:	786d      	ldrb	r5, [r5, #1]
     1f6:	022d      	lsls	r5, r5, #8
     1f8:	4335      	orrs	r5, r6
     1fa:	e7f1      	b.n	1e0 <nvm_write_buffer+0x54>
     1fc:	7923      	ldrb	r3, [r4, #4]
     1fe:	2b00      	cmp	r3, #0
     200:	d101      	bne.n	206 <nvm_write_buffer+0x7a>
		}
	}

	system_interrupt_leave_critical_section();

	return error_code;
     202:	2a3f      	cmp	r2, #63	; 0x3f
     204:	d904      	bls.n	210 <nvm_write_buffer+0x84>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     206:	2300      	movs	r3, #0
     208:	e7c8      	b.n	19c <nvm_write_buffer+0x10>
     20a:	7923      	ldrb	r3, [r4, #4]
		const uint32_t parameter)
{
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     20c:	2b00      	cmp	r3, #0
     20e:	d1fa      	bne.n	206 <nvm_write_buffer+0x7a>
     210:	8862      	ldrh	r2, [r4, #2]
     212:	8823      	ldrh	r3, [r4, #0]
     214:	4353      	muls	r3, r2
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     216:	4298      	cmp	r0, r3
     218:	d905      	bls.n	226 <nvm_write_buffer+0x9a>
     21a:	4b15      	ldr	r3, [pc, #84]	; (270 <nvm_write_buffer+0xe4>)
     21c:	18c2      	adds	r2, r0, r3
     21e:	2380      	movs	r3, #128	; 0x80
     220:	019b      	lsls	r3, r3, #6
     222:	429a      	cmp	r2, r3

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     224:	d8b9      	bhi.n	19a <nvm_write_buffer+0xe>
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     226:	2280      	movs	r2, #128	; 0x80

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     228:	2120      	movs	r1, #32
     22a:	4b0f      	ldr	r3, [pc, #60]	; (268 <nvm_write_buffer+0xdc>)
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     22c:	02d2      	lsls	r2, r2, #11

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     22e:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     230:	31ff      	adds	r1, #255	; 0xff
     232:	4322      	orrs	r2, r4
     234:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     236:	8b1a      	ldrh	r2, [r3, #24]
     238:	430a      	orrs	r2, r1
     23a:	831a      	strh	r2, [r3, #24]
     23c:	7d1a      	ldrb	r2, [r3, #20]
     23e:	07d2      	lsls	r2, r2, #31
     240:	d402      	bmi.n	248 <nvm_write_buffer+0xbc>
     242:	605c      	str	r4, [r3, #4]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     244:	2305      	movs	r3, #5
     246:	e7a9      	b.n	19c <nvm_write_buffer+0x10>
     248:	2101      	movs	r1, #1
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     24a:	0880      	lsrs	r0, r0, #2
     24c:	4a09      	ldr	r2, [pc, #36]	; (274 <nvm_write_buffer+0xe8>)
     24e:	0040      	lsls	r0, r0, #1
     250:	61d8      	str	r0, [r3, #28]
     252:	801a      	strh	r2, [r3, #0]
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     254:	7d1a      	ldrb	r2, [r3, #20]
     256:	4211      	tst	r1, r2
     258:	d0fc      	beq.n	254 <nvm_write_buffer+0xc8>
     25a:	4b03      	ldr	r3, [pc, #12]	; (268 <nvm_write_buffer+0xdc>)
			nvm_module->CTRLB.reg = ctrlb_bak;
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     25c:	605c      	str	r4, [r3, #4]
     25e:	2300      	movs	r3, #0
     260:	e79c      	b.n	19c <nvm_write_buffer+0x10>
     262:	46c0      	nop			; (mov r8, r8)
     264:	20000034 	.word	0x20000034
     268:	41004000 	.word	0x41004000

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     26c:	ffffa544 	.word	0xffffa544
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     270:	ff7fc000 	.word	0xff7fc000
     274:	ffffa504 	.word	0xffffa504

00000278 <nvm_erase_row>:
     278:	4b11      	ldr	r3, [pc, #68]	; (2c0 <nvm_erase_row+0x48>)
     27a:	2118      	movs	r1, #24
     27c:	881a      	ldrh	r2, [r3, #0]
     27e:	885b      	ldrh	r3, [r3, #2]
     280:	4353      	muls	r3, r2
     282:	4283      	cmp	r3, r0
     284:	d201      	bcs.n	28a <nvm_erase_row+0x12>
     286:	1c08      	adds	r0, r1, #0
     288:	4770      	bx	lr
     28a:	0092      	lsls	r2, r2, #2
     28c:	3a01      	subs	r2, #1
     28e:	4210      	tst	r0, r2
     290:	d1f9      	bne.n	286 <nvm_erase_row+0xe>
     292:	4b0c      	ldr	r3, [pc, #48]	; (2c4 <nvm_erase_row+0x4c>)
     294:	3913      	subs	r1, #19
     296:	7d1a      	ldrb	r2, [r3, #20]
     298:	07d2      	lsls	r2, r2, #31
     29a:	d5f4      	bpl.n	286 <nvm_erase_row+0xe>
     29c:	2120      	movs	r1, #32
     29e:	8b1a      	ldrh	r2, [r3, #24]
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     2a0:	31ff      	adds	r1, #255	; 0xff
     2a2:	430a      	orrs	r2, r1
     2a4:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     2a6:	0880      	lsrs	r0, r0, #2
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     2a8:	4a07      	ldr	r2, [pc, #28]	; (2c8 <nvm_erase_row+0x50>)

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     2aa:	0040      	lsls	r0, r0, #1
     2ac:	391f      	subs	r1, #31
     2ae:	61d8      	str	r0, [r3, #28]
     2b0:	39ff      	subs	r1, #255	; 0xff
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     2b2:	801a      	strh	r2, [r3, #0]
     2b4:	7d1a      	ldrb	r2, [r3, #20]
#endif

	while (!nvm_is_ready()) {
     2b6:	4211      	tst	r1, r2
     2b8:	d0fc      	beq.n	2b4 <nvm_erase_row+0x3c>
     2ba:	2100      	movs	r1, #0
     2bc:	e7e3      	b.n	286 <nvm_erase_row+0xe>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	20000034 	.word	0x20000034
     2c4:	41004000 	.word	0x41004000
     2c8:	ffffa502 	.word	0xffffa502

000002cc <_i2c_master_write_packet.isra.1>:
 * \retval STATUS_ERR_DENIED            If error on bus
 * \retval STATUS_ERR_PACKET_COLLISION  If arbitration is lost
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
     2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ce:	4657      	mov	r7, sl
     2d0:	4645      	mov	r5, r8
     2d2:	464e      	mov	r6, r9
     2d4:	4692      	mov	sl, r2
     2d6:	b4e0      	push	{r5, r6, r7}
     2d8:	469c      	mov	ip, r3
     2da:	1c05      	adds	r5, r0, #0
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2dc:	6807      	ldr	r7, [r0, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     2de:	8a3b      	ldrh	r3, [r7, #16]
     2e0:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2e2:	d1fc      	bne.n	2de <_i2c_master_write_packet.isra.1+0x12>
	uint16_t tmp_data_length = packet->data_length;

	_i2c_master_wait_for_sync(module);

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     2e4:	0049      	lsls	r1, r1, #1
     2e6:	b2c9      	uxtb	r1, r1
     2e8:	7539      	strb	r1, [r7, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2ea:	6829      	ldr	r1, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2ec:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     2ee:	2602      	movs	r6, #2
     2f0:	e007      	b.n	302 <_i2c_master_write_packet.isra.1+0x36>
     2f2:	7b88      	ldrb	r0, [r1, #14]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     2f4:	4206      	tst	r6, r0
     2f6:	d107      	bne.n	308 <_i2c_master_write_packet.isra.1+0x3c>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     2f8:	3301      	adds	r3, #1
     2fa:	8928      	ldrh	r0, [r5, #8]
     2fc:	b29b      	uxth	r3, r3
     2fe:	4298      	cmp	r0, r3
     300:	d943      	bls.n	38a <_i2c_master_write_packet.isra.1+0xbe>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     302:	7b88      	ldrb	r0, [r1, #14]
     304:	4204      	tst	r4, r0
     306:	d0f4      	beq.n	2f2 <_i2c_master_write_packet.isra.1+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     308:	2302      	movs	r3, #2
     30a:	7b88      	ldrb	r0, [r1, #14]
     30c:	4203      	tst	r3, r0
     30e:	d042      	beq.n	396 <_i2c_master_write_packet.isra.1+0xca>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     310:	738b      	strb	r3, [r1, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     312:	8a09      	ldrh	r1, [r1, #16]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     314:	2041      	movs	r0, #65	; 0x41

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     316:	420b      	tst	r3, r1
     318:	d138      	bne.n	38c <_i2c_master_write_packet.isra.1+0xc0>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     31a:	2220      	movs	r2, #32
     31c:	4690      	mov	r8, r2
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     31e:	3a1c      	subs	r2, #28
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     320:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     322:	2001      	movs	r0, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     324:	2602      	movs	r6, #2
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     326:	4691      	mov	r9, r2
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     328:	4553      	cmp	r3, sl
     32a:	d040      	beq.n	3ae <_i2c_master_write_packet.isra.1+0xe2>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     32c:	4642      	mov	r2, r8
     32e:	8a39      	ldrh	r1, [r7, #16]
     330:	420a      	tst	r2, r1
     332:	d03e      	beq.n	3b2 <_i2c_master_write_packet.isra.1+0xe6>
     334:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     336:	8a21      	ldrh	r1, [r4, #16]
     338:	0bc9      	lsrs	r1, r1, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     33a:	d1fc      	bne.n	336 <_i2c_master_write_packet.isra.1+0x6a>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     33c:	4662      	mov	r2, ip
     33e:	6812      	ldr	r2, [r2, #0]
     340:	5cd1      	ldrb	r1, [r2, r3]
     342:	7639      	strb	r1, [r7, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     344:	682c      	ldr	r4, [r5, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     346:	2100      	movs	r1, #0
     348:	e007      	b.n	35a <_i2c_master_write_packet.isra.1+0x8e>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     34a:	7ba2      	ldrb	r2, [r4, #14]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     34c:	4216      	tst	r6, r2
     34e:	d107      	bne.n	360 <_i2c_master_write_packet.isra.1+0x94>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     350:	3101      	adds	r1, #1
     352:	892a      	ldrh	r2, [r5, #8]
     354:	b289      	uxth	r1, r1
     356:	428a      	cmp	r2, r1
     358:	d927      	bls.n	3aa <_i2c_master_write_packet.isra.1+0xde>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     35a:	7ba2      	ldrb	r2, [r4, #14]
     35c:	4210      	tst	r0, r2
     35e:	d0f4      	beq.n	34a <_i2c_master_write_packet.isra.1+0x7e>
			if (tmp_status != STATUS_OK) {
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     360:	464a      	mov	r2, r9
     362:	8a39      	ldrh	r1, [r7, #16]
     364:	3301      	adds	r3, #1
     366:	420a      	tst	r2, r1
     368:	d0de      	beq.n	328 <_i2c_master_write_packet.isra.1+0x5c>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     36a:	221e      	movs	r2, #30
				break;
			}
		}

		if (module->send_stop) {
     36c:	7aab      	ldrb	r3, [r5, #10]
     36e:	1c10      	adds	r0, r2, #0
     370:	2b00      	cmp	r3, #0
     372:	d00b      	beq.n	38c <_i2c_master_write_packet.isra.1+0xc0>
     374:	6829      	ldr	r1, [r5, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     376:	8a0b      	ldrh	r3, [r1, #16]
     378:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     37a:	d1fc      	bne.n	376 <_i2c_master_write_packet.isra.1+0xaa>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     37c:	21c0      	movs	r1, #192	; 0xc0
     37e:	687b      	ldr	r3, [r7, #4]
     380:	0289      	lsls	r1, r1, #10
     382:	430b      	orrs	r3, r1
     384:	607b      	str	r3, [r7, #4]
     386:	1c10      	adds	r0, r2, #0
     388:	e000      	b.n	38c <_i2c_master_write_packet.isra.1+0xc0>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     38a:	2012      	movs	r0, #18
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     38c:	bc1c      	pop	{r2, r3, r4}
     38e:	4690      	mov	r8, r2
     390:	4699      	mov	r9, r3
     392:	46a2      	mov	sl, r4
     394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     396:	8a0b      	ldrh	r3, [r1, #16]
     398:	075b      	lsls	r3, r3, #29
     39a:	d5be      	bpl.n	31a <_i2c_master_write_packet.isra.1+0x4e>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     39c:	22c0      	movs	r2, #192	; 0xc0
     39e:	684b      	ldr	r3, [r1, #4]
     3a0:	0292      	lsls	r2, r2, #10
     3a2:	4313      	orrs	r3, r2
     3a4:	604b      	str	r3, [r1, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     3a6:	2018      	movs	r0, #24
     3a8:	e7f0      	b.n	38c <_i2c_master_write_packet.isra.1+0xc0>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     3aa:	2212      	movs	r2, #18
     3ac:	e7de      	b.n	36c <_i2c_master_write_packet.isra.1+0xa0>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     3ae:	2200      	movs	r2, #0
     3b0:	e7dc      	b.n	36c <_i2c_master_write_packet.isra.1+0xa0>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     3b2:	2041      	movs	r0, #65	; 0x41
     3b4:	e7ea      	b.n	38c <_i2c_master_write_packet.isra.1+0xc0>
     3b6:	46c0      	nop			; (mov r8, r8)

000003b8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	464d      	mov	r5, r9
     3bc:	4644      	mov	r4, r8
     3be:	465f      	mov	r7, fp
     3c0:	4656      	mov	r6, sl
     3c2:	b4f0      	push	{r4, r5, r6, r7}
     3c4:	1c07      	adds	r7, r0, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3c6:	4b5a      	ldr	r3, [pc, #360]	; (530 <i2c_master_init+0x178>)
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3c8:	b083      	sub	sp, #12
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     3ca:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3cc:	1c08      	adds	r0, r1, #0
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3ce:	1c16      	adds	r6, r2, #0
     3d0:	1c0d      	adds	r5, r1, #0
	/* Initialize software module */
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3d2:	4699      	mov	r9, r3
     3d4:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3d6:	2401      	movs	r4, #1
	module->hw = hw;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3d8:	1c83      	adds	r3, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3da:	46a0      	mov	r8, r4
     3dc:	409c      	lsls	r4, r3
     3de:	1c23      	adds	r3, r4, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3e0:	4954      	ldr	r1, [pc, #336]	; (534 <i2c_master_init+0x17c>)

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3e2:	300d      	adds	r0, #13
     3e4:	6a0a      	ldr	r2, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3e6:	b2c4      	uxtb	r4, r0
     3e8:	4313      	orrs	r3, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3ea:	466a      	mov	r2, sp
     3ec:	620b      	str	r3, [r1, #32]
     3ee:	7933      	ldrb	r3, [r6, #4]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3f0:	4669      	mov	r1, sp
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3f2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3f4:	1c20      	adds	r0, r4, #0
     3f6:	4b50      	ldr	r3, [pc, #320]	; (538 <i2c_master_init+0x180>)
     3f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3fa:	1c20      	adds	r0, r4, #0
     3fc:	4b4f      	ldr	r3, [pc, #316]	; (53c <i2c_master_init+0x184>)
     3fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     400:	4b4f      	ldr	r3, [pc, #316]	; (540 <i2c_master_init+0x188>)
     402:	7930      	ldrb	r0, [r6, #4]
     404:	2100      	movs	r1, #0
     406:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     408:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     40a:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     40c:	079b      	lsls	r3, r3, #30
     40e:	d506      	bpl.n	41e <i2c_master_init+0x66>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     410:	b003      	add	sp, #12
     412:	bc3c      	pop	{r2, r3, r4, r5}
     414:	4690      	mov	r8, r2
     416:	4699      	mov	r9, r3
     418:	46a2      	mov	sl, r4
     41a:	46ab      	mov	fp, r5
     41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     41e:	4643      	mov	r3, r8
     420:	682c      	ldr	r4, [r5, #0]
		return STATUS_BUSY;
     422:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     424:	401c      	ands	r4, r3
     426:	d1f3      	bne.n	410 <i2c_master_init+0x58>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     428:	6838      	ldr	r0, [r7, #0]
     42a:	47c8      	blx	r9
     42c:	4682      	mov	sl, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     42e:	4945      	ldr	r1, [pc, #276]	; (544 <i2c_master_init+0x18c>)
     430:	4b45      	ldr	r3, [pc, #276]	; (548 <i2c_master_init+0x190>)
     432:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     434:	4653      	mov	r3, sl
     436:	4a45      	ldr	r2, [pc, #276]	; (54c <i2c_master_init+0x194>)
     438:	009b      	lsls	r3, r3, #2
     43a:	509f      	str	r7, [r3, r2]

	/* Initialize values in module. */
	module->registered_callback = 0;
	module->enabled_callback = 0;
	module->buffer_length = 0;
     43c:	2300      	movs	r3, #0
     43e:	469a      	mov	sl, r3
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     440:	2325      	movs	r3, #37	; 0x25
     442:	4652      	mov	r2, sl
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
	_sercom_instances[instance_index] = module;

	/* Initialize values in module. */
	module->registered_callback = 0;
     444:	763c      	strb	r4, [r7, #24]
	module->enabled_callback = 0;
     446:	767c      	strb	r4, [r7, #25]
	module->buffer_length = 0;
     448:	837c      	strh	r4, [r7, #26]
	module->buffer_remaining = 0;
     44a:	83bc      	strh	r4, [r7, #28]

	module->status = STATUS_OK;
     44c:	54fa      	strb	r2, [r7, r3]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     44e:	3b11      	subs	r3, #17
	module->enabled_callback = 0;
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
	module->buffer = NULL;
     450:	623c      	str	r4, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     452:	602b      	str	r3, [r5, #0]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     454:	683d      	ldr	r5, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     456:	ac01      	add	r4, sp, #4
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     458:	1c28      	adds	r0, r5, #0
     45a:	47c8      	blx	r9
     45c:	2380      	movs	r3, #128	; 0x80
     45e:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     460:	4653      	mov	r3, sl
     462:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     464:	4643      	mov	r3, r8
     466:	70a3      	strb	r3, [r4, #2]
	config->powersave    = false;
     468:	4653      	mov	r3, sl
     46a:	4681      	mov	r9, r0
     46c:	70e3      	strb	r3, [r4, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     46e:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     470:	69b3      	ldr	r3, [r6, #24]
     472:	469a      	mov	sl, r3

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     474:	2800      	cmp	r0, #0
     476:	d056      	beq.n	526 <i2c_master_init+0x16e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     478:	2302      	movs	r3, #2

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     47a:	7020      	strb	r0, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     47c:	7063      	strb	r3, [r4, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     47e:	0c00      	lsrs	r0, r0, #16
     480:	4b33      	ldr	r3, [pc, #204]	; (550 <i2c_master_init+0x198>)
     482:	b2c0      	uxtb	r0, r0
     484:	1c21      	adds	r1, r4, #0
     486:	469b      	mov	fp, r3
     488:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     48a:	4653      	mov	r3, sl
     48c:	2b00      	cmp	r3, #0
     48e:	d044      	beq.n	51a <i2c_master_init+0x162>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     490:	4653      	mov	r3, sl
     492:	7023      	strb	r3, [r4, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     494:	2302      	movs	r3, #2
     496:	7063      	strb	r3, [r4, #1]
     498:	4698      	mov	r8, r3
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     49a:	4653      	mov	r3, sl
     49c:	0c18      	lsrs	r0, r3, #16
     49e:	b2c0      	uxtb	r0, r0
     4a0:	1c21      	adds	r1, r4, #0
     4a2:	47d8      	blx	fp

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     4a4:	89b3      	ldrh	r3, [r6, #12]
     4a6:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     4a8:	89f3      	ldrh	r3, [r6, #14]
     4aa:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     4ac:	7c32      	ldrb	r2, [r6, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     4ae:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     4b0:	2a00      	cmp	r2, #0
     4b2:	d029      	beq.n	508 <i2c_master_init+0x150>
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     4b4:	68b2      	ldr	r2, [r6, #8]
     4b6:	2a00      	cmp	r2, #0
     4b8:	d000      	beq.n	4bc <i2c_master_init+0x104>
		tmp_ctrla |= config->start_hold_time;
     4ba:	4313      	orrs	r3, r2
	}

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     4bc:	7f32      	ldrb	r2, [r6, #28]
     4be:	2a00      	cmp	r2, #0
     4c0:	d002      	beq.n	4c8 <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     4c2:	2280      	movs	r2, #128	; 0x80
     4c4:	05d2      	lsls	r2, r2, #23
     4c6:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     4c8:	6a32      	ldr	r2, [r6, #32]
     4ca:	2a00      	cmp	r2, #0
     4cc:	d000      	beq.n	4d0 <i2c_master_init+0x118>
		tmp_ctrla |= config->inactive_timeout;
     4ce:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     4d0:	682a      	ldr	r2, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     4d2:	4648      	mov	r0, r9
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
		tmp_ctrla |= config->inactive_timeout;
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     4d4:	4313      	orrs	r3, r2
     4d6:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     4d8:	2380      	movs	r3, #128	; 0x80

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     4da:	300d      	adds	r0, #13

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     4dc:	005b      	lsls	r3, r3, #1
     4de:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     4e0:	b2c0      	uxtb	r0, r0
     4e2:	4b1c      	ldr	r3, [pc, #112]	; (554 <i2c_master_init+0x19c>)
     4e4:	4798      	blx	r3
     4e6:	23fa      	movs	r3, #250	; 0xfa
     4e8:	6831      	ldr	r1, [r6, #0]
     4ea:	00db      	lsls	r3, r3, #3
     4ec:	4359      	muls	r1, r3
     4ee:	1e4b      	subs	r3, r1, #1
     4f0:	1818      	adds	r0, r3, r0
     4f2:	4b19      	ldr	r3, [pc, #100]	; (558 <i2c_master_init+0x1a0>)
     4f4:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     4f6:	1f43      	subs	r3, r0, #5

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4f8:	2040      	movs	r0, #64	; 0x40
	tmp_baud = (int32_t)(div_ceil(
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     4fa:	2bff      	cmp	r3, #255	; 0xff
     4fc:	d900      	bls.n	500 <i2c_master_init+0x148>
     4fe:	e787      	b.n	410 <i2c_master_init+0x58>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     500:	b29b      	uxth	r3, r3
     502:	816b      	strh	r3, [r5, #10]
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
     504:	2000      	movs	r0, #0

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     506:	e783      	b.n	410 <i2c_master_init+0x58>

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     508:	4642      	mov	r2, r8
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     50a:	4b14      	ldr	r3, [pc, #80]	; (55c <i2c_master_init+0x1a4>)
     50c:	789b      	ldrb	r3, [r3, #2]
     50e:	401a      	ands	r2, r3
     510:	1c13      	adds	r3, r2, #0
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     512:	1e5a      	subs	r2, r3, #1
     514:	4193      	sbcs	r3, r2
     516:	01db      	lsls	r3, r3, #7
     518:	e7cc      	b.n	4b4 <i2c_master_init+0xfc>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     51a:	1c28      	adds	r0, r5, #0
     51c:	2101      	movs	r1, #1
     51e:	4b10      	ldr	r3, [pc, #64]	; (560 <i2c_master_init+0x1a8>)
     520:	4798      	blx	r3
     522:	4682      	mov	sl, r0
     524:	e7b4      	b.n	490 <i2c_master_init+0xd8>
	uint32_t pad0 = config->pinmux_pad0;
	uint32_t pad1 = config->pinmux_pad1;

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     526:	1c28      	adds	r0, r5, #0
     528:	2100      	movs	r1, #0
     52a:	4b0d      	ldr	r3, [pc, #52]	; (560 <i2c_master_init+0x1a8>)
     52c:	4798      	blx	r3
     52e:	e7a3      	b.n	478 <i2c_master_init+0xc0>
     530:	00002865 	.word	0x00002865
     534:	40000400 	.word	0x40000400
     538:	00003125 	.word	0x00003125
     53c:	00003189 	.word	0x00003189
     540:	000026bd 	.word	0x000026bd
     544:	0000058d 	.word	0x0000058d
     548:	000028cd 	.word	0x000028cd
     54c:	20000320 	.word	0x20000320
     550:	0000328d 	.word	0x0000328d
     554:	000031e9 	.word	0x000031e9
     558:	000034a9 	.word	0x000034a9
     55c:	41002000 	.word	0x41002000
     560:	00002705 	.word	0x00002705

00000564 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     564:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     566:	8b83      	ldrh	r3, [r0, #28]
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     568:	1c02      	adds	r2, r0, #0
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
     56a:	2005      	movs	r0, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     56c:	2b00      	cmp	r3, #0
     56e:	d000      	beq.n	572 <i2c_master_write_packet_wait+0xe>

	module->send_stop = true;
	module->send_nack = true;
	
	return _i2c_master_write_packet(module, packet);
}
     570:	bd10      	pop	{r4, pc}
     572:	1c10      	adds	r0, r2, #0
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     574:	2201      	movs	r2, #1
     576:	1c0b      	adds	r3, r1, #0
     578:	7282      	strb	r2, [r0, #10]
	module->send_nack = true;
     57a:	72c2      	strb	r2, [r0, #11]
	
	return _i2c_master_write_packet(module, packet);
     57c:	885a      	ldrh	r2, [r3, #2]
     57e:	8809      	ldrh	r1, [r1, #0]
     580:	3304      	adds	r3, #4
     582:	4c01      	ldr	r4, [pc, #4]	; (588 <i2c_master_write_packet_wait+0x24>)
     584:	47a0      	blx	r4
     586:	e7f3      	b.n	570 <i2c_master_write_packet_wait+0xc>
     588:	000002cd 	.word	0x000002cd

0000058c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     58c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     58e:	4ba0      	ldr	r3, [pc, #640]	; (810 <_i2c_master_interrupt_handler+0x284>)
     590:	0080      	lsls	r0, r0, #2
     592:	58c4      	ldr	r4, [r0, r3]
	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     594:	7e65      	ldrb	r5, [r4, #25]
			module->registered_callback;
     596:	7e23      	ldrb	r3, [r4, #24]
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     598:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     59a:	401d      	ands	r5, r3
			module->registered_callback;

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     59c:	8b63      	ldrh	r3, [r4, #26]
     59e:	2b00      	cmp	r3, #0
     5a0:	d103      	bne.n	5aa <_i2c_master_interrupt_handler+0x1e>
     5a2:	8ba3      	ldrh	r3, [r4, #28]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d000      	beq.n	5aa <_i2c_master_interrupt_handler+0x1e>
     5a8:	e072      	b.n	690 <_i2c_master_interrupt_handler+0x104>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5aa:	8b63      	ldrh	r3, [r4, #26]
     5ac:	2b00      	cmp	r3, #0
     5ae:	d007      	beq.n	5c0 <_i2c_master_interrupt_handler+0x34>
     5b0:	8ba3      	ldrh	r3, [r4, #28]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d104      	bne.n	5c0 <_i2c_master_interrupt_handler+0x34>
			(module->status == STATUS_BUSY) &&
     5b6:	3325      	adds	r3, #37	; 0x25
     5b8:	5ce2      	ldrb	r2, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5ba:	2a05      	cmp	r2, #5
     5bc:	d100      	bne.n	5c0 <_i2c_master_interrupt_handler+0x34>
     5be:	e0c2      	b.n	746 <_i2c_master_interrupt_handler+0x1ba>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     5c0:	8b63      	ldrh	r3, [r4, #26]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d01f      	beq.n	606 <_i2c_master_interrupt_handler+0x7a>
     5c6:	8ba3      	ldrh	r3, [r4, #28]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d01c      	beq.n	606 <_i2c_master_interrupt_handler+0x7a>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5cc:	8a33      	ldrh	r3, [r6, #16]
     5ce:	069b      	lsls	r3, r3, #26
     5d0:	d400      	bmi.n	5d4 <_i2c_master_interrupt_handler+0x48>
     5d2:	e0b4      	b.n	73e <_i2c_master_interrupt_handler+0x1b2>
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     5d4:	2324      	movs	r3, #36	; 0x24
     5d6:	5ce3      	ldrb	r3, [r4, r3]
     5d8:	2b00      	cmp	r3, #0
     5da:	d000      	beq.n	5de <_i2c_master_interrupt_handler+0x52>
     5dc:	e0d1      	b.n	782 <_i2c_master_interrupt_handler+0x1f6>
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     5de:	8a33      	ldrh	r3, [r6, #16]
     5e0:	075b      	lsls	r3, r3, #29
     5e2:	d500      	bpl.n	5e6 <_i2c_master_interrupt_handler+0x5a>
     5e4:	e12d      	b.n	842 <_i2c_master_interrupt_handler+0x2b6>
		/* Do not write more data */
		return;
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     5e6:	8b63      	ldrh	r3, [r4, #26]
     5e8:	8ba2      	ldrh	r2, [r4, #28]
     5ea:	1a9b      	subs	r3, r3, r2
     5ec:	b29a      	uxth	r2, r3

	module->buffer_remaining--;
     5ee:	8ba3      	ldrh	r3, [r4, #28]
     5f0:	3b01      	subs	r3, #1
     5f2:	b29b      	uxth	r3, r3
     5f4:	83a3      	strh	r3, [r4, #28]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     5f6:	8a33      	ldrh	r3, [r6, #16]
     5f8:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5fa:	d1fc      	bne.n	5f6 <_i2c_master_interrupt_handler+0x6a>

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
     5fc:	6a23      	ldr	r3, [r4, #32]
     5fe:	189b      	adds	r3, r3, r2
     600:	781b      	ldrb	r3, [r3, #0]
     602:	b2db      	uxtb	r3, r3
     604:	7633      	strb	r3, [r6, #24]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     606:	8b63      	ldrh	r3, [r4, #26]
     608:	2b00      	cmp	r3, #0
     60a:	d003      	beq.n	614 <_i2c_master_interrupt_handler+0x88>
     60c:	8ba3      	ldrh	r3, [r4, #28]
     60e:	b29b      	uxth	r3, r3
     610:	2b00      	cmp	r3, #0
     612:	d01d      	beq.n	650 <_i2c_master_interrupt_handler+0xc4>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     614:	2325      	movs	r3, #37	; 0x25
     616:	5ce2      	ldrb	r2, [r4, r3]
     618:	2a05      	cmp	r2, #5
     61a:	d018      	beq.n	64e <_i2c_master_interrupt_handler+0xc2>
     61c:	5ce2      	ldrb	r2, [r4, r3]
     61e:	2a00      	cmp	r2, #0
     620:	d015      	beq.n	64e <_i2c_master_interrupt_handler+0xc2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     622:	2203      	movs	r2, #3
     624:	7332      	strb	r2, [r6, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     626:	2200      	movs	r2, #0
     628:	8362      	strh	r2, [r4, #26]
		module->buffer_remaining = 0;
     62a:	83a2      	strh	r2, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     62c:	5ce3      	ldrb	r3, [r4, r3]
     62e:	2b41      	cmp	r3, #65	; 0x41
     630:	d00b      	beq.n	64a <_i2c_master_interrupt_handler+0xbe>
     632:	7aa3      	ldrb	r3, [r4, #10]
     634:	2b00      	cmp	r3, #0
     636:	d008      	beq.n	64a <_i2c_master_interrupt_handler+0xbe>
     638:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     63a:	8a13      	ldrh	r3, [r2, #16]
     63c:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     63e:	d1fc      	bne.n	63a <_i2c_master_interrupt_handler+0xae>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     640:	22e0      	movs	r2, #224	; 0xe0
     642:	6873      	ldr	r3, [r6, #4]
     644:	02d2      	lsls	r2, r2, #11
     646:	4313      	orrs	r3, r2
     648:	6073      	str	r3, [r6, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     64a:	076b      	lsls	r3, r5, #29
     64c:	d41c      	bmi.n	688 <_i2c_master_interrupt_handler+0xfc>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     64e:	bd70      	pop	{r4, r5, r6, pc}
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     650:	2225      	movs	r2, #37	; 0x25
     652:	5ca1      	ldrb	r1, [r4, r2]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     654:	2905      	cmp	r1, #5
     656:	d1dd      	bne.n	614 <_i2c_master_interrupt_handler+0x88>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     658:	311f      	adds	r1, #31
     65a:	5c60      	ldrb	r0, [r4, r1]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     65c:	2801      	cmp	r0, #1
     65e:	d1d9      	bne.n	614 <_i2c_master_interrupt_handler+0x88>
			(module->transfer_direction == I2C_TRANSFER_READ)) {

		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     660:	3002      	adds	r0, #2
     662:	7330      	strb	r0, [r6, #12]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     664:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     666:	54a3      	strb	r3, [r4, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     668:	07ab      	lsls	r3, r5, #30
     66a:	d503      	bpl.n	674 <_i2c_master_interrupt_handler+0xe8>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     66c:	5c63      	ldrb	r3, [r4, r1]
     66e:	2b01      	cmp	r3, #1
     670:	d100      	bne.n	674 <_i2c_master_interrupt_handler+0xe8>
     672:	e0f5      	b.n	860 <_i2c_master_interrupt_handler+0x2d4>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     674:	07eb      	lsls	r3, r5, #31
     676:	d5cd      	bpl.n	614 <_i2c_master_interrupt_handler+0x88>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     678:	2324      	movs	r3, #36	; 0x24
     67a:	5ce3      	ldrb	r3, [r4, r3]
     67c:	2b00      	cmp	r3, #0
     67e:	d1c9      	bne.n	614 <_i2c_master_interrupt_handler+0x88>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     680:	68e3      	ldr	r3, [r4, #12]
     682:	1c20      	adds	r0, r4, #0
     684:	4798      	blx	r3
     686:	e7c5      	b.n	614 <_i2c_master_interrupt_handler+0x88>
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     688:	6963      	ldr	r3, [r4, #20]
     68a:	1c20      	adds	r0, r4, #0
     68c:	4798      	blx	r3
     68e:	e7de      	b.n	64e <_i2c_master_interrupt_handler+0xc2>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     690:	2301      	movs	r3, #1
     692:	7bb2      	ldrb	r2, [r6, #14]
     694:	4213      	tst	r3, r2
     696:	d004      	beq.n	6a2 <_i2c_master_interrupt_handler+0x116>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     698:	73b3      	strb	r3, [r6, #14]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     69a:	8a33      	ldrh	r3, [r6, #16]
     69c:	079b      	lsls	r3, r3, #30
     69e:	d500      	bpl.n	6a2 <_i2c_master_interrupt_handler+0x116>
     6a0:	e09a      	b.n	7d8 <_i2c_master_interrupt_handler+0x24c>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
		}
	}

	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6a2:	8a33      	ldrh	r3, [r6, #16]
     6a4:	075b      	lsls	r3, r3, #29
     6a6:	d510      	bpl.n	6ca <_i2c_master_interrupt_handler+0x13e>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
     6a8:	2325      	movs	r3, #37	; 0x25
     6aa:	2218      	movs	r2, #24
     6ac:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     6ae:	2300      	movs	r3, #0
     6b0:	83a3      	strh	r3, [r4, #28]

		if (module->send_stop) {
     6b2:	7aa3      	ldrb	r3, [r4, #10]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d008      	beq.n	6ca <_i2c_master_interrupt_handler+0x13e>
     6b8:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     6ba:	8a13      	ldrh	r3, [r2, #16]
     6bc:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     6be:	d1fc      	bne.n	6ba <_i2c_master_interrupt_handler+0x12e>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6c0:	22c0      	movs	r2, #192	; 0xc0
     6c2:	6873      	ldr	r3, [r6, #4]
     6c4:	0292      	lsls	r2, r2, #10
     6c6:	4313      	orrs	r3, r2
     6c8:	6073      	str	r3, [r6, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
     6ca:	8ba3      	ldrh	r3, [r4, #28]
     6cc:	b29b      	uxth	r3, r3
     6ce:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     6d0:	2325      	movs	r3, #37	; 0x25
     6d2:	5ce2      	ldrb	r2, [r4, r3]
     6d4:	2a05      	cmp	r2, #5
     6d6:	d000      	beq.n	6da <_i2c_master_interrupt_handler+0x14e>
     6d8:	e795      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6da:	321f      	adds	r2, #31
     6dc:	5ca2      	ldrb	r2, [r4, r2]
     6de:	2a00      	cmp	r2, #0
     6e0:	d100      	bne.n	6e4 <_i2c_master_interrupt_handler+0x158>
     6e2:	e099      	b.n	818 <_i2c_master_interrupt_handler+0x28c>
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     6e4:	8b63      	ldrh	r3, [r4, #26]
     6e6:	8ba1      	ldrh	r1, [r4, #28]
{
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6e8:	6820      	ldr	r0, [r4, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     6ea:	1a59      	subs	r1, r3, r1

	module->buffer_remaining--;
     6ec:	8ba3      	ldrh	r3, [r4, #28]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     6ee:	b289      	uxth	r1, r1

	module->buffer_remaining--;
     6f0:	3b01      	subs	r3, #1
     6f2:	b29b      	uxth	r3, r3
     6f4:	83a3      	strh	r3, [r4, #28]

	if (!module->buffer_remaining) {
     6f6:	8ba3      	ldrh	r3, [r4, #28]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d000      	beq.n	6fe <_i2c_master_interrupt_handler+0x172>
     6fc:	e0a5      	b.n	84a <_i2c_master_interrupt_handler+0x2be>
		/* Send nack */
	  	if (module->send_nack)
     6fe:	7ae3      	ldrb	r3, [r4, #11]
{
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     700:	1c02      	adds	r2, r0, #0

	module->buffer_remaining--;

	if (!module->buffer_remaining) {
		/* Send nack */
	  	if (module->send_nack)
     702:	2b00      	cmp	r3, #0
     704:	d005      	beq.n	712 <_i2c_master_interrupt_handler+0x186>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     706:	2280      	movs	r2, #128	; 0x80
     708:	6843      	ldr	r3, [r0, #4]
     70a:	02d2      	lsls	r2, r2, #11
     70c:	4313      	orrs	r3, r2
     70e:	6043      	str	r3, [r0, #4]
     710:	6822      	ldr	r2, [r4, #0]
		if (module->send_stop) {
     712:	7aa3      	ldrb	r3, [r4, #10]
     714:	2b00      	cmp	r3, #0
     716:	d063      	beq.n	7e0 <_i2c_master_interrupt_handler+0x254>
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     718:	8a13      	ldrh	r3, [r2, #16]
     71a:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     71c:	d1fc      	bne.n	718 <_i2c_master_interrupt_handler+0x18c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     71e:	22c0      	movs	r2, #192	; 0xc0
     720:	6843      	ldr	r3, [r0, #4]
     722:	0292      	lsls	r2, r2, #10
     724:	4313      	orrs	r3, r2
     726:	6043      	str	r3, [r0, #4]
     728:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     72a:	8a13      	ldrh	r3, [r2, #16]
     72c:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     72e:	d1fc      	bne.n	72a <_i2c_master_interrupt_handler+0x19e>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     730:	6a23      	ldr	r3, [r4, #32]
     732:	469c      	mov	ip, r3
     734:	7e03      	ldrb	r3, [r0, #24]
     736:	4461      	add	r1, ip
     738:	b2db      	uxtb	r3, r3
     73a:	700b      	strb	r3, [r1, #0]
     73c:	e763      	b.n	606 <_i2c_master_interrupt_handler+0x7a>

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
			module->status = STATUS_ERR_PACKET_COLLISION;
     73e:	2241      	movs	r2, #65	; 0x41
     740:	2325      	movs	r3, #37	; 0x25
     742:	54e2      	strb	r2, [r4, r3]
     744:	e75f      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     746:	321f      	adds	r2, #31
     748:	5ca2      	ldrb	r2, [r4, r2]
     74a:	b2d2      	uxtb	r2, r2
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     74c:	2a00      	cmp	r2, #0
     74e:	d000      	beq.n	752 <_i2c_master_interrupt_handler+0x1c6>
     750:	e736      	b.n	5c0 <_i2c_master_interrupt_handler+0x34>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     752:	2103      	movs	r1, #3
     754:	7331      	strb	r1, [r6, #12]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     756:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     758:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     75a:	7aa3      	ldrb	r3, [r4, #10]
     75c:	2b00      	cmp	r3, #0
     75e:	d100      	bne.n	762 <_i2c_master_interrupt_handler+0x1d6>
     760:	e078      	b.n	854 <_i2c_master_interrupt_handler+0x2c8>
     762:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     764:	8a13      	ldrh	r3, [r2, #16]
     766:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     768:	d1fc      	bne.n	764 <_i2c_master_interrupt_handler+0x1d8>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     76a:	22c0      	movs	r2, #192	; 0xc0
     76c:	6873      	ldr	r3, [r6, #4]
     76e:	0292      	lsls	r2, r2, #10
     770:	4313      	orrs	r3, r2
     772:	6073      	str	r3, [r6, #4]
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     774:	07eb      	lsls	r3, r5, #31
     776:	d400      	bmi.n	77a <_i2c_master_interrupt_handler+0x1ee>
     778:	e745      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     77a:	68e3      	ldr	r3, [r4, #12]
     77c:	1c20      	adds	r0, r4, #0
     77e:	4798      	blx	r3
     780:	e741      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     782:	8b63      	ldrh	r3, [r4, #26]
     784:	8ba1      	ldrh	r1, [r4, #28]
     786:	1a59      	subs	r1, r3, r1

	module->buffer_remaining--;
     788:	8ba3      	ldrh	r3, [r4, #28]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     78a:	b289      	uxth	r1, r1

	module->buffer_remaining--;
     78c:	3b01      	subs	r3, #1
     78e:	b29b      	uxth	r3, r3
     790:	83a3      	strh	r3, [r4, #28]

	if (!module->buffer_remaining) {
     792:	8ba3      	ldrh	r3, [r4, #28]
     794:	2b00      	cmp	r3, #0
     796:	d12c      	bne.n	7f2 <_i2c_master_interrupt_handler+0x266>
		/* Send nack */
	  	if (module->send_nack)
     798:	7ae3      	ldrb	r3, [r4, #11]
     79a:	1c32      	adds	r2, r6, #0
     79c:	2b00      	cmp	r3, #0
     79e:	d005      	beq.n	7ac <_i2c_master_interrupt_handler+0x220>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	6873      	ldr	r3, [r6, #4]
     7a4:	02d2      	lsls	r2, r2, #11
     7a6:	4313      	orrs	r3, r2
     7a8:	6073      	str	r3, [r6, #4]
     7aa:	6822      	ldr	r2, [r4, #0]
		if (module->send_stop) {
     7ac:	7aa3      	ldrb	r3, [r4, #10]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d024      	beq.n	7fc <_i2c_master_interrupt_handler+0x270>
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     7b2:	8a13      	ldrh	r3, [r2, #16]
     7b4:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7b6:	d1fc      	bne.n	7b2 <_i2c_master_interrupt_handler+0x226>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7b8:	22c0      	movs	r2, #192	; 0xc0
     7ba:	6873      	ldr	r3, [r6, #4]
     7bc:	0292      	lsls	r2, r2, #10
     7be:	4313      	orrs	r3, r2
     7c0:	6073      	str	r3, [r6, #4]
     7c2:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     7c4:	8a13      	ldrh	r3, [r2, #16]
     7c6:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7c8:	d1fc      	bne.n	7c4 <_i2c_master_interrupt_handler+0x238>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7ca:	6a23      	ldr	r3, [r4, #32]
     7cc:	469c      	mov	ip, r3
     7ce:	7e33      	ldrb	r3, [r6, #24]
     7d0:	4461      	add	r1, ip
     7d2:	b2db      	uxtb	r3, r3
     7d4:	700b      	strb	r3, [r1, #0]
     7d6:	e716      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     7d8:	2241      	movs	r2, #65	; 0x41
     7da:	2325      	movs	r3, #37	; 0x25
     7dc:	54e2      	strb	r2, [r4, r3]
     7de:	e760      	b.n	6a2 <_i2c_master_interrupt_handler+0x116>
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     7e0:	8a13      	ldrh	r3, [r2, #16]
     7e2:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7e4:	d1fc      	bne.n	7e0 <_i2c_master_interrupt_handler+0x254>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		} else {
		  	_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     7e6:	2280      	movs	r2, #128	; 0x80
     7e8:	6843      	ldr	r3, [r0, #4]
     7ea:	0252      	lsls	r2, r2, #9
     7ec:	4313      	orrs	r3, r2
     7ee:	6043      	str	r3, [r0, #4]
     7f0:	e79a      	b.n	728 <_i2c_master_interrupt_handler+0x19c>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7f2:	6872      	ldr	r2, [r6, #4]
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <_i2c_master_interrupt_handler+0x288>)
     7f6:	4013      	ands	r3, r2
     7f8:	6073      	str	r3, [r6, #4]
     7fa:	e7e2      	b.n	7c2 <_i2c_master_interrupt_handler+0x236>
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     7fc:	8a13      	ldrh	r3, [r2, #16]
     7fe:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     800:	d1fc      	bne.n	7fc <_i2c_master_interrupt_handler+0x270>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		} else {
		  	_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
     802:	2280      	movs	r2, #128	; 0x80
     804:	6873      	ldr	r3, [r6, #4]
     806:	0252      	lsls	r2, r2, #9
     808:	4313      	orrs	r3, r2
     80a:	6073      	str	r3, [r6, #4]
     80c:	e7d9      	b.n	7c2 <_i2c_master_interrupt_handler+0x236>
     80e:	46c0      	nop			; (mov r8, r8)
     810:	20000320 	.word	0x20000320
     814:	fffbffff 	.word	0xfffbffff
{
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     818:	6822      	ldr	r2, [r4, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     81a:	8a11      	ldrh	r1, [r2, #16]
     81c:	0749      	lsls	r1, r1, #29
     81e:	d41c      	bmi.n	85a <_i2c_master_interrupt_handler+0x2ce>
		/* Do not write more data */
		return;
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     820:	8b63      	ldrh	r3, [r4, #26]
     822:	8ba1      	ldrh	r1, [r4, #28]
     824:	1a5b      	subs	r3, r3, r1
     826:	b299      	uxth	r1, r3

	module->buffer_remaining--;
     828:	8ba3      	ldrh	r3, [r4, #28]
     82a:	3b01      	subs	r3, #1
     82c:	b29b      	uxth	r3, r3
     82e:	83a3      	strh	r3, [r4, #28]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     830:	8a13      	ldrh	r3, [r2, #16]
     832:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     834:	d1fc      	bne.n	830 <_i2c_master_interrupt_handler+0x2a4>

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
     836:	6a23      	ldr	r3, [r4, #32]
     838:	185b      	adds	r3, r3, r1
     83a:	781b      	ldrb	r3, [r3, #0]
     83c:	b2db      	uxtb	r3, r3
     83e:	7613      	strb	r3, [r2, #24]
     840:	e6e1      	b.n	606 <_i2c_master_interrupt_handler+0x7a>

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     842:	221e      	movs	r2, #30
     844:	2325      	movs	r3, #37	; 0x25
     846:	54e2      	strb	r2, [r4, r3]
     848:	e6dd      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
		} else {
		  	_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(1);
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     84a:	6842      	ldr	r2, [r0, #4]
     84c:	4b06      	ldr	r3, [pc, #24]	; (868 <_i2c_master_interrupt_handler+0x2dc>)
     84e:	4013      	ands	r3, r2
     850:	6043      	str	r3, [r0, #4]
     852:	e769      	b.n	728 <_i2c_master_interrupt_handler+0x19c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     854:	2301      	movs	r3, #1
     856:	73b3      	strb	r3, [r6, #14]
     858:	e78c      	b.n	774 <_i2c_master_interrupt_handler+0x1e8>

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     85a:	221e      	movs	r2, #30
     85c:	54e2      	strb	r2, [r4, r3]
     85e:	e6d2      	b.n	606 <_i2c_master_interrupt_handler+0x7a>
		module->status        = STATUS_OK;

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     860:	6923      	ldr	r3, [r4, #16]
     862:	1c20      	adds	r0, r4, #0
     864:	4798      	blx	r3
     866:	e6d5      	b.n	614 <_i2c_master_interrupt_handler+0x88>
     868:	fffbffff 	.word	0xfffbffff

0000086c <wdt_set_config>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     86c:	2310      	movs	r3, #16
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     86e:	b510      	push	{r4, lr}
     870:	4a37      	ldr	r2, [pc, #220]	; (950 <wdt_set_config+0xe4>)
     872:	b082      	sub	sp, #8
     874:	6991      	ldr	r1, [r2, #24]
     876:	430b      	orrs	r3, r1
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     878:	4936      	ldr	r1, [pc, #216]	; (954 <wdt_set_config+0xe8>)
     87a:	6193      	str	r3, [r2, #24]
     87c:	780b      	ldrb	r3, [r1, #0]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
     87e:	2210      	movs	r2, #16

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     880:	09db      	lsrs	r3, r3, #7
     882:	d002      	beq.n	88a <wdt_set_config+0x1e>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     884:	1c10      	adds	r0, r2, #0
     886:	b002      	add	sp, #8
     888:	bd10      	pop	{r4, pc}
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     88a:	78c3      	ldrb	r3, [r0, #3]
		return STATUS_ERR_INVALID_ARG;
     88c:	3207      	adds	r2, #7
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     88e:	2b00      	cmp	r3, #0
     890:	d0f8      	beq.n	884 <wdt_set_config+0x18>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     892:	7904      	ldrb	r4, [r0, #4]
     894:	429c      	cmp	r4, r3
     896:	d8f5      	bhi.n	884 <wdt_set_config+0x18>
     898:	7944      	ldrb	r4, [r0, #5]
     89a:	429c      	cmp	r4, r3
     89c:	d8f2      	bhi.n	884 <wdt_set_config+0x18>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     89e:	780b      	ldrb	r3, [r1, #0]
     8a0:	3a15      	subs	r2, #21
     8a2:	4393      	bics	r3, r2
     8a4:	700b      	strb	r3, [r1, #0]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     8a6:	79cb      	ldrb	r3, [r1, #7]
     8a8:	b25b      	sxtb	r3, r3
     8aa:	2b00      	cmp	r3, #0
     8ac:	dbfb      	blt.n	8a6 <wdt_set_config+0x3a>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     8ae:	7843      	ldrb	r3, [r0, #1]
     8b0:	2b00      	cmp	r3, #0
     8b2:	d101      	bne.n	8b8 <wdt_set_config+0x4c>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     8b4:	2200      	movs	r2, #0
     8b6:	e7e5      	b.n	884 <wdt_set_config+0x18>
     8b8:	1c04      	adds	r4, r0, #0
		return STATUS_OK;
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     8ba:	7883      	ldrb	r3, [r0, #2]
     8bc:	a901      	add	r1, sp, #4
     8be:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     8c0:	2001      	movs	r0, #1
     8c2:	4b25      	ldr	r3, [pc, #148]	; (958 <wdt_set_config+0xec>)
     8c4:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     8c6:	4b25      	ldr	r3, [pc, #148]	; (95c <wdt_set_config+0xf0>)
     8c8:	2001      	movs	r0, #1
     8ca:	4798      	blx	r3
	if (config->always_on) {
     8cc:	7823      	ldrb	r3, [r4, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d002      	beq.n	8d8 <wdt_set_config+0x6c>
		system_gclk_chan_lock(WDT_GCLK_ID);
     8d2:	2001      	movs	r0, #1
     8d4:	4b22      	ldr	r3, [pc, #136]	; (960 <wdt_set_config+0xf4>)
     8d6:	4798      	blx	r3
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     8d8:	78e3      	ldrb	r3, [r4, #3]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     8da:	7922      	ldrb	r2, [r4, #4]
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     8dc:	3b01      	subs	r3, #1

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     8de:	491d      	ldr	r1, [pc, #116]	; (954 <wdt_set_config+0xe8>)

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     8e0:	2a00      	cmp	r2, #0
     8e2:	d02f      	beq.n	944 <wdt_set_config+0xd8>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     8e4:	2004      	movs	r0, #4
     8e6:	780a      	ldrb	r2, [r1, #0]
     8e8:	4302      	orrs	r2, r0
     8ea:	700a      	strb	r2, [r1, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     8ec:	7922      	ldrb	r2, [r4, #4]
     8ee:	3a01      	subs	r2, #1
     8f0:	4082      	lsls	r2, r0
     8f2:	4313      	orrs	r3, r2
     8f4:	4817      	ldr	r0, [pc, #92]	; (954 <wdt_set_config+0xe8>)
     8f6:	79c1      	ldrb	r1, [r0, #7]
     8f8:	4a16      	ldr	r2, [pc, #88]	; (954 <wdt_set_config+0xe8>)
     8fa:	b249      	sxtb	r1, r1
     8fc:	2900      	cmp	r1, #0
     8fe:	dbfa      	blt.n	8f6 <wdt_set_config+0x8a>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     900:	b2db      	uxtb	r3, r3
     902:	7053      	strb	r3, [r2, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     904:	7963      	ldrb	r3, [r4, #5]
     906:	2b00      	cmp	r3, #0
     908:	d113      	bne.n	932 <wdt_set_config+0xc6>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     90a:	7823      	ldrb	r3, [r4, #0]
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     90c:	4a11      	ldr	r2, [pc, #68]	; (954 <wdt_set_config+0xe8>)
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     90e:	2b00      	cmp	r3, #0
     910:	d00a      	beq.n	928 <wdt_set_config+0xbc>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     912:	2380      	movs	r3, #128	; 0x80
     914:	7811      	ldrb	r1, [r2, #0]
     916:	430b      	orrs	r3, r1
     918:	7013      	strb	r3, [r2, #0]
     91a:	4a0e      	ldr	r2, [pc, #56]	; (954 <wdt_set_config+0xe8>)
     91c:	79d3      	ldrb	r3, [r2, #7]
     91e:	b25b      	sxtb	r3, r3
     920:	2b00      	cmp	r3, #0
     922:	dbfb      	blt.n	91c <wdt_set_config+0xb0>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     924:	2200      	movs	r2, #0
     926:	e7ad      	b.n	884 <wdt_set_config+0x18>
	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     928:	2102      	movs	r1, #2
     92a:	7813      	ldrb	r3, [r2, #0]
     92c:	430b      	orrs	r3, r1
     92e:	7013      	strb	r3, [r2, #0]
     930:	e7f3      	b.n	91a <wdt_set_config+0xae>
     932:	79d1      	ldrb	r1, [r2, #7]
     934:	b249      	sxtb	r1, r1
     936:	2900      	cmp	r1, #0
     938:	dbfb      	blt.n	932 <wdt_set_config+0xc6>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     93a:	3b01      	subs	r3, #1
     93c:	4a05      	ldr	r2, [pc, #20]	; (954 <wdt_set_config+0xe8>)
     93e:	b2db      	uxtb	r3, r3
     940:	7093      	strb	r3, [r2, #2]
     942:	e7e2      	b.n	90a <wdt_set_config+0x9e>

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     944:	2004      	movs	r0, #4
     946:	780a      	ldrb	r2, [r1, #0]
     948:	4382      	bics	r2, r0
     94a:	700a      	strb	r2, [r1, #0]
     94c:	e7d2      	b.n	8f4 <wdt_set_config+0x88>
     94e:	46c0      	nop			; (mov r8, r8)
     950:	40000400 	.word	0x40000400
     954:	40001000 	.word	0x40001000
     958:	00003125 	.word	0x00003125
     95c:	00003189 	.word	0x00003189
     960:	000031b9 	.word	0x000031b9

00000964 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     964:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     966:	b508      	push	{r3, lr}
     968:	4b03      	ldr	r3, [pc, #12]	; (978 <WDT_Handler+0x14>)
     96a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     96c:	4b03      	ldr	r3, [pc, #12]	; (97c <WDT_Handler+0x18>)
     96e:	681b      	ldr	r3, [r3, #0]
     970:	2b00      	cmp	r3, #0
     972:	d000      	beq.n	976 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     974:	4798      	blx	r3
	}
}
     976:	bd08      	pop	{r3, pc}
     978:	40001000 	.word	0x40001000
     97c:	20000238 	.word	0x20000238

00000980 <fw_update_init>:
		nvm_write_buffer(address, buffer, len);
	}
}

void fw_update_init(void)
{
     980:	b500      	push	{lr}
     982:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     984:	2200      	movs	r2, #0
     986:	466b      	mov	r3, sp
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     988:	4669      	mov	r1, sp
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     98a:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     98c:	4b06      	ldr	r3, [pc, #24]	; (9a8 <fw_update_init+0x28>)
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
	nvm_set_config(&config_nvm);
     98e:	4668      	mov	r0, sp
     990:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
     992:	70ca      	strb	r2, [r1, #3]
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     994:	06db      	lsls	r3, r3, #27
     996:	0f1b      	lsrs	r3, r3, #28
     998:	708b      	strb	r3, [r1, #2]
     99a:	4b04      	ldr	r3, [pc, #16]	; (9ac <fw_update_init+0x2c>)
	config->disable_cache     = false;
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     99c:	710a      	strb	r2, [r1, #4]

void fw_update_init(void)
{
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
     99e:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
     9a0:	4798      	blx	r3
}
     9a2:	b003      	add	sp, #12
     9a4:	bd00      	pop	{pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	41004000 	.word	0x41004000
     9ac:	00000105 	.word	0x00000105

000009b0 <fw_update>:

/*
 * fw update function
 */
void fw_update(uint8_t *rx)
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	464f      	mov	r7, r9
     9b4:	4646      	mov	r6, r8
     9b6:	1c05      	adds	r5, r0, #0
     9b8:	b4c0      	push	{r6, r7}
     9ba:	b091      	sub	sp, #68	; 0x44
	uint8_t i = 0;
	uint32_t tmp_len = 0;
	uint8_t tx_buff[NVMCTRL_PAGE_SIZE] = {0};
     9bc:	4b7e      	ldr	r3, [pc, #504]	; (bb8 <fw_update+0x208>)
     9be:	4668      	mov	r0, sp
     9c0:	2100      	movs	r1, #0
     9c2:	2240      	movs	r2, #64	; 0x40
     9c4:	4798      	blx	r3
     9c6:	1c2b      	adds	r3, r5, #0
     9c8:	4c7c      	ldr	r4, [pc, #496]	; (bbc <fw_update+0x20c>)
     9ca:	4323      	orrs	r3, r4
     9cc:	079b      	lsls	r3, r3, #30
     9ce:	d000      	beq.n	9d2 <fw_update+0x22>
     9d0:	e0be      	b.n	b50 <fw_update+0x1a0>
     9d2:	2300      	movs	r3, #0
     9d4:	1c19      	adds	r1, r3, #0
     9d6:	1d2a      	adds	r2, r5, #4
     9d8:	4294      	cmp	r4, r2
     9da:	4159      	adcs	r1, r3
     9dc:	1c0a      	adds	r2, r1, #0
     9de:	1d21      	adds	r1, r4, #4
     9e0:	428d      	cmp	r5, r1
     9e2:	415b      	adcs	r3, r3
     9e4:	4313      	orrs	r3, r2
     9e6:	b2db      	uxtb	r3, r3
     9e8:	2b00      	cmp	r3, #0
     9ea:	d100      	bne.n	9ee <fw_update+0x3e>
     9ec:	e0b0      	b.n	b50 <fw_update+0x1a0>
	static uint32_t curr_prog_addr = 0;
	
	/* get the rx data */
	for(i = 0;i < USART_FRAME_LENGTH;i++)
	{
		fw_rx_buff[i] = *(rx+i);
     9ee:	682b      	ldr	r3, [r5, #0]
     9f0:	0a1a      	lsrs	r2, r3, #8
     9f2:	7062      	strb	r2, [r4, #1]
     9f4:	7023      	strb	r3, [r4, #0]
     9f6:	0c1a      	lsrs	r2, r3, #16
     9f8:	0e1b      	lsrs	r3, r3, #24
     9fa:	70a2      	strb	r2, [r4, #2]
     9fc:	70e3      	strb	r3, [r4, #3]
     9fe:	686b      	ldr	r3, [r5, #4]
     a00:	0a1a      	lsrs	r2, r3, #8
     a02:	7123      	strb	r3, [r4, #4]
     a04:	7162      	strb	r2, [r4, #5]
     a06:	0c1a      	lsrs	r2, r3, #16
     a08:	0e1b      	lsrs	r3, r3, #24
     a0a:	71a2      	strb	r2, [r4, #6]
     a0c:	71e3      	strb	r3, [r4, #7]
	}
	
	switch (status)
     a0e:	4d6c      	ldr	r5, [pc, #432]	; (bc0 <fw_update+0x210>)
     a10:	782b      	ldrb	r3, [r5, #0]
     a12:	2b00      	cmp	r3, #0
     a14:	d100      	bne.n	a18 <fw_update+0x68>
     a16:	e080      	b.n	b1a <fw_update+0x16a>
     a18:	2b01      	cmp	r3, #1
     a1a:	d175      	bne.n	b08 <fw_update+0x158>
     a1c:	4f69      	ldr	r7, [pc, #420]	; (bc4 <fw_update+0x214>)
			status = 1;
			cfg_buff[0] = 0;
			program_memory(CFG_START_ADDRESS,cfg_buff,NVMCTRL_PAGE_SIZE);
		/* program flash */
		case 1:	
			if(len)
     a1e:	683e      	ldr	r6, [r7, #0]
     a20:	2e00      	cmp	r6, #0
     a22:	d071      	beq.n	b08 <fw_update+0x158>
			{
				tmp_len = min(NVMCTRL_PAGE_SIZE,len);
     a24:	2e40      	cmp	r6, #64	; 0x40
     a26:	d900      	bls.n	a2a <fw_update+0x7a>
     a28:	e0a3      	b.n	b72 <fw_update+0x1c2>
/*
 * return the valid data length of fifo
 */
static uint8_t fifo_get_valid_length(void)
{
	if(p_fifo_tail >= p_fifo_head)
     a2a:	4b67      	ldr	r3, [pc, #412]	; (bc8 <fw_update+0x218>)
     a2c:	4698      	mov	r8, r3
     a2e:	7819      	ldrb	r1, [r3, #0]
     a30:	4b66      	ldr	r3, [pc, #408]	; (bcc <fw_update+0x21c>)
     a32:	469c      	mov	ip, r3
     a34:	781b      	ldrb	r3, [r3, #0]
     a36:	4299      	cmp	r1, r3
     a38:	d300      	bcc.n	a3c <fw_update+0x8c>
     a3a:	e0a4      	b.n	b86 <fw_update+0x1d6>
/*
 * return the empty length of fifo
 */
static uint8_t fifo_get_empty_length(void)
{
	return (NVMCTRL_PAGE_SIZE+USART_FRAME_LENGTH-fifo_get_valid_length());
     a3c:	1a5a      	subs	r2, r3, r1
 * return 0 = ok, 1 = err
 */
static uint8_t write_fifo(uint8_t *buff, uint8_t offset, uint8_t len)
{
	uint8_t i = 0;
	if(fifo_get_empty_length() < len)
     a3e:	b2d2      	uxtb	r2, r2
     a40:	2a05      	cmp	r2, #5
     a42:	d92f      	bls.n	aa4 <fw_update+0xf4>
	{
		return 1;
	}
	for(i = 0; i < len; i++)	// write data to fifo
	{
		buff_fifo[p_fifo_tail] = *(buff+offset+i);
     a44:	4862      	ldr	r0, [pc, #392]	; (bd0 <fw_update+0x220>)
     a46:	7862      	ldrb	r2, [r4, #1]
     a48:	5442      	strb	r2, [r0, r1]
     a4a:	2947      	cmp	r1, #71	; 0x47
     a4c:	d100      	bne.n	a50 <fw_update+0xa0>
     a4e:	e0a2      	b.n	b96 <fw_update+0x1e6>
     a50:	1c4a      	adds	r2, r1, #1
     a52:	78a1      	ldrb	r1, [r4, #2]
     a54:	b2d2      	uxtb	r2, r2
     a56:	5481      	strb	r1, [r0, r2]
     a58:	2a47      	cmp	r2, #71	; 0x47
     a5a:	d100      	bne.n	a5e <fw_update+0xae>
     a5c:	e0a5      	b.n	baa <fw_update+0x1fa>
     a5e:	3201      	adds	r2, #1
     a60:	78e1      	ldrb	r1, [r4, #3]
     a62:	b2d2      	uxtb	r2, r2
     a64:	5481      	strb	r1, [r0, r2]
     a66:	2a47      	cmp	r2, #71	; 0x47
     a68:	d100      	bne.n	a6c <fw_update+0xbc>
     a6a:	e09c      	b.n	ba6 <fw_update+0x1f6>
     a6c:	3201      	adds	r2, #1
     a6e:	7921      	ldrb	r1, [r4, #4]
     a70:	b2d2      	uxtb	r2, r2
     a72:	5481      	strb	r1, [r0, r2]
     a74:	2a47      	cmp	r2, #71	; 0x47
     a76:	d100      	bne.n	a7a <fw_update+0xca>
     a78:	e093      	b.n	ba2 <fw_update+0x1f2>
     a7a:	3201      	adds	r2, #1
     a7c:	7961      	ldrb	r1, [r4, #5]
     a7e:	b2d2      	uxtb	r2, r2
     a80:	5481      	strb	r1, [r0, r2]
     a82:	2a47      	cmp	r2, #71	; 0x47
     a84:	d100      	bne.n	a88 <fw_update+0xd8>
     a86:	e08a      	b.n	b9e <fw_update+0x1ee>
     a88:	3201      	adds	r2, #1
     a8a:	79a4      	ldrb	r4, [r4, #6]
     a8c:	b2d2      	uxtb	r2, r2
     a8e:	5484      	strb	r4, [r0, r2]
     a90:	2a47      	cmp	r2, #71	; 0x47
     a92:	d100      	bne.n	a96 <fw_update+0xe6>
     a94:	e081      	b.n	b9a <fw_update+0x1ea>
     a96:	3201      	adds	r2, #1
     a98:	4640      	mov	r0, r8
     a9a:	b2d1      	uxtb	r1, r2
     a9c:	7002      	strb	r2, [r0, #0]
     a9e:	1aca      	subs	r2, r1, r3
/*
 * return the valid data length of fifo
 */
static uint8_t fifo_get_valid_length(void)
{
	if(p_fifo_tail >= p_fifo_head)
     aa0:	428b      	cmp	r3, r1
     aa2:	d901      	bls.n	aa8 <fw_update+0xf8>
     aa4:	1aca      	subs	r2, r1, r3
	{
		return (p_fifo_tail - p_fifo_head);
	}
	return(p_fifo_tail + NVMCTRL_PAGE_SIZE+USART_FRAME_LENGTH - p_fifo_head);
     aa6:	3248      	adds	r2, #72	; 0x48
     aa8:	b2d2      	uxtb	r2, r2
		case 1:	
			if(len)
			{
				tmp_len = min(NVMCTRL_PAGE_SIZE,len);
				write_fifo((uint8_t *)fw_rx_buff,1,6);
				if(fifo_get_valid_length() >= tmp_len)
     aaa:	4296      	cmp	r6, r2
     aac:	d830      	bhi.n	b10 <fw_update+0x160>
				{
					read_fifo((uint8_t *)tx_buff,0,tmp_len);
     aae:	b2f1      	uxtb	r1, r6
     ab0:	4688      	mov	r8, r1
 * return 0 = ok, 1 = err
 */
static uint8_t read_fifo(uint8_t *buff, uint8_t offset, uint8_t len)
{
	uint8_t i = 0;
	if(fifo_get_valid_length() < len)
     ab2:	4590      	cmp	r8, r2
     ab4:	d813      	bhi.n	ade <fw_update+0x12e>
     ab6:	2100      	movs	r1, #0
     ab8:	4845      	ldr	r0, [pc, #276]	; (bd0 <fw_update+0x220>)
	{
		return 1;
	}
	for(i = 0; i < len; i++)
	{
		*(buff+offset+i) = buff_fifo[p_fifo_head];
     aba:	466c      	mov	r4, sp
     abc:	5cc2      	ldrb	r2, [r0, r3]
     abe:	5462      	strb	r2, [r4, r1]
     ac0:	1c5c      	adds	r4, r3, #1
     ac2:	3b47      	subs	r3, #71	; 0x47
     ac4:	1c1a      	adds	r2, r3, #0
     ac6:	1e53      	subs	r3, r2, #1
     ac8:	419a      	sbcs	r2, r3
     aca:	4252      	negs	r2, r2
     acc:	1c13      	adds	r3, r2, #0
     ace:	3101      	adds	r1, #1
     ad0:	4023      	ands	r3, r4
	uint8_t i = 0;
	if(fifo_get_valid_length() < len)
	{
		return 1;
	}
	for(i = 0; i < len; i++)
     ad2:	b2ca      	uxtb	r2, r1
     ad4:	b2db      	uxtb	r3, r3
     ad6:	4590      	cmp	r8, r2
     ad8:	d8ef      	bhi.n	aba <fw_update+0x10a>
     ada:	4662      	mov	r2, ip
     adc:	7013      	strb	r3, [r2, #0]
				tmp_len = min(NVMCTRL_PAGE_SIZE,len);
				write_fifo((uint8_t *)fw_rx_buff,1,6);
				if(fifo_get_valid_length() >= tmp_len)
				{
					read_fifo((uint8_t *)tx_buff,0,tmp_len);
					program_memory(curr_prog_addr,tx_buff,tmp_len);
     ade:	4c3d      	ldr	r4, [pc, #244]	; (bd4 <fw_update+0x224>)
     ae0:	6823      	ldr	r3, [r4, #0]
     ae2:	4698      	mov	r8, r3
     ae4:	b2b3      	uxth	r3, r6
     ae6:	4699      	mov	r9, r3
		}
	} 
	else 
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
     ae8:	4642      	mov	r2, r8
     aea:	23ff      	movs	r3, #255	; 0xff
     aec:	4213      	tst	r3, r2
     aee:	d05e      	beq.n	bae <fw_update+0x1fe>
		{
			/* Erase row */
			nvm_erase_row(address);
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
     af0:	4b39      	ldr	r3, [pc, #228]	; (bd8 <fw_update+0x228>)
     af2:	4640      	mov	r0, r8
     af4:	4669      	mov	r1, sp
     af6:	464a      	mov	r2, r9
     af8:	4798      	blx	r3
				write_fifo((uint8_t *)fw_rx_buff,1,6);
				if(fifo_get_valid_length() >= tmp_len)
				{
					read_fifo((uint8_t *)tx_buff,0,tmp_len);
					program_memory(curr_prog_addr,tx_buff,tmp_len);
					curr_prog_addr += tmp_len;
     afa:	6823      	ldr	r3, [r4, #0]
     afc:	18f3      	adds	r3, r6, r3
     afe:	6023      	str	r3, [r4, #0]
					len -= tmp_len;
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	1b9e      	subs	r6, r3, r6
     b04:	603e      	str	r6, [r7, #0]
					if(!len)
     b06:	d103      	bne.n	b10 <fw_update+0x160>
				status = 0;		
				fw_update_en = 0;	
			}
			break;
		default:
			status = 0;
     b08:	2300      	movs	r3, #0
			fw_update_en = 0;
     b0a:	4a34      	ldr	r2, [pc, #208]	; (bdc <fw_update+0x22c>)
				status = 0;		
				fw_update_en = 0;	
			}
			break;
		default:
			status = 0;
     b0c:	702b      	strb	r3, [r5, #0]
			fw_update_en = 0;
     b0e:	7013      	strb	r3, [r2, #0]
			break;
	}	
}
     b10:	b011      	add	sp, #68	; 0x44
     b12:	bc0c      	pop	{r2, r3}
     b14:	4690      	mov	r8, r2
     b16:	4699      	mov	r9, r3
     b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (status)
	{
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
			curr_prog_addr = APP_IMAGE_ADDRESS;
     b1a:	21e8      	movs	r1, #232	; 0xe8
	
	switch (status)
	{
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
     b1c:	4a30      	ldr	r2, [pc, #192]	; (be0 <fw_update+0x230>)
     b1e:	4f29      	ldr	r7, [pc, #164]	; (bc4 <fw_update+0x214>)
     b20:	6812      	ldr	r2, [r2, #0]
			curr_prog_addr = APP_IMAGE_ADDRESS;
     b22:	0249      	lsls	r1, r1, #9
	
	switch (status)
	{
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
     b24:	603a      	str	r2, [r7, #0]
			curr_prog_addr = APP_IMAGE_ADDRESS;
     b26:	4a2b      	ldr	r2, [pc, #172]	; (bd4 <fw_update+0x224>)
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     b28:	20d8      	movs	r0, #216	; 0xd8
	switch (status)
	{
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
			curr_prog_addr = APP_IMAGE_ADDRESS;
     b2a:	6011      	str	r1, [r2, #0]
			p_fifo_head = 0;
     b2c:	4a27      	ldr	r2, [pc, #156]	; (bcc <fw_update+0x21c>)
			p_fifo_tail = 0;
			status = 1;
			cfg_buff[0] = 0;
     b2e:	4e2d      	ldr	r6, [pc, #180]	; (be4 <fw_update+0x234>)
	{
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
			curr_prog_addr = APP_IMAGE_ADDRESS;
			p_fifo_head = 0;
     b30:	7013      	strb	r3, [r2, #0]
			p_fifo_tail = 0;
     b32:	4a25      	ldr	r2, [pc, #148]	; (bc8 <fw_update+0x218>)
			status = 1;
			cfg_buff[0] = 0;
     b34:	7033      	strb	r3, [r6, #0]
		/* the start, init params then program flash */
		case 0:	
			len = fw_update_length;
			curr_prog_addr = APP_IMAGE_ADDRESS;
			p_fifo_head = 0;
			p_fifo_tail = 0;
     b36:	7013      	strb	r3, [r2, #0]
			status = 1;
     b38:	2201      	movs	r2, #1
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     b3a:	4b2b      	ldr	r3, [pc, #172]	; (be8 <fw_update+0x238>)
     b3c:	0280      	lsls	r0, r0, #10
		case 0:	
			len = fw_update_length;
			curr_prog_addr = APP_IMAGE_ADDRESS;
			p_fifo_head = 0;
			p_fifo_tail = 0;
			status = 1;
     b3e:	702a      	strb	r2, [r5, #0]
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     b40:	4798      	blx	r3
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
     b42:	20d8      	movs	r0, #216	; 0xd8
     b44:	1c31      	adds	r1, r6, #0
     b46:	2240      	movs	r2, #64	; 0x40
     b48:	4b23      	ldr	r3, [pc, #140]	; (bd8 <fw_update+0x228>)
     b4a:	0280      	lsls	r0, r0, #10
     b4c:	4798      	blx	r3
     b4e:	e766      	b.n	a1e <fw_update+0x6e>
	static uint32_t curr_prog_addr = 0;
	
	/* get the rx data */
	for(i = 0;i < USART_FRAME_LENGTH;i++)
	{
		fw_rx_buff[i] = *(rx+i);
     b50:	782b      	ldrb	r3, [r5, #0]
     b52:	7023      	strb	r3, [r4, #0]
     b54:	786b      	ldrb	r3, [r5, #1]
     b56:	7063      	strb	r3, [r4, #1]
     b58:	78ab      	ldrb	r3, [r5, #2]
     b5a:	70a3      	strb	r3, [r4, #2]
     b5c:	78eb      	ldrb	r3, [r5, #3]
     b5e:	70e3      	strb	r3, [r4, #3]
     b60:	792b      	ldrb	r3, [r5, #4]
     b62:	7123      	strb	r3, [r4, #4]
     b64:	796b      	ldrb	r3, [r5, #5]
     b66:	7163      	strb	r3, [r4, #5]
     b68:	79ab      	ldrb	r3, [r5, #6]
     b6a:	71a3      	strb	r3, [r4, #6]
     b6c:	79eb      	ldrb	r3, [r5, #7]
     b6e:	71e3      	strb	r3, [r4, #7]
     b70:	e74d      	b.n	a0e <fw_update+0x5e>
/*
 * return the valid data length of fifo
 */
static uint8_t fifo_get_valid_length(void)
{
	if(p_fifo_tail >= p_fifo_head)
     b72:	4b15      	ldr	r3, [pc, #84]	; (bc8 <fw_update+0x218>)
			program_memory(CFG_START_ADDRESS,cfg_buff,NVMCTRL_PAGE_SIZE);
		/* program flash */
		case 1:	
			if(len)
			{
				tmp_len = min(NVMCTRL_PAGE_SIZE,len);
     b74:	2640      	movs	r6, #64	; 0x40
/*
 * return the valid data length of fifo
 */
static uint8_t fifo_get_valid_length(void)
{
	if(p_fifo_tail >= p_fifo_head)
     b76:	4698      	mov	r8, r3
     b78:	7819      	ldrb	r1, [r3, #0]
     b7a:	4b14      	ldr	r3, [pc, #80]	; (bcc <fw_update+0x21c>)
     b7c:	469c      	mov	ip, r3
     b7e:	781b      	ldrb	r3, [r3, #0]
     b80:	4299      	cmp	r1, r3
     b82:	d200      	bcs.n	b86 <fw_update+0x1d6>
     b84:	e75a      	b.n	a3c <fw_update+0x8c>
/*
 * return the empty length of fifo
 */
static uint8_t fifo_get_empty_length(void)
{
	return (NVMCTRL_PAGE_SIZE+USART_FRAME_LENGTH-fifo_get_valid_length());
     b86:	2048      	movs	r0, #72	; 0x48
 */
static uint8_t fifo_get_valid_length(void)
{
	if(p_fifo_tail >= p_fifo_head)
	{
		return (p_fifo_tail - p_fifo_head);
     b88:	1aca      	subs	r2, r1, r3
/*
 * return the empty length of fifo
 */
static uint8_t fifo_get_empty_length(void)
{
	return (NVMCTRL_PAGE_SIZE+USART_FRAME_LENGTH-fifo_get_valid_length());
     b8a:	1a80      	subs	r0, r0, r2
 * return 0 = ok, 1 = err
 */
static uint8_t write_fifo(uint8_t *buff, uint8_t offset, uint8_t len)
{
	uint8_t i = 0;
	if(fifo_get_empty_length() < len)
     b8c:	b2c0      	uxtb	r0, r0
     b8e:	2805      	cmp	r0, #5
     b90:	d900      	bls.n	b94 <fw_update+0x1e4>
     b92:	e757      	b.n	a44 <fw_update+0x94>
     b94:	e788      	b.n	aa8 <fw_update+0xf8>
     b96:	2200      	movs	r2, #0
     b98:	e75b      	b.n	a52 <fw_update+0xa2>
     b9a:	2200      	movs	r2, #0
     b9c:	e77c      	b.n	a98 <fw_update+0xe8>
     b9e:	2200      	movs	r2, #0
     ba0:	e773      	b.n	a8a <fw_update+0xda>
     ba2:	2200      	movs	r2, #0
     ba4:	e76a      	b.n	a7c <fw_update+0xcc>
     ba6:	2200      	movs	r2, #0
     ba8:	e761      	b.n	a6e <fw_update+0xbe>
     baa:	2200      	movs	r2, #0
     bac:	e758      	b.n	a60 <fw_update+0xb0>
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     bae:	4640      	mov	r0, r8
     bb0:	4b0d      	ldr	r3, [pc, #52]	; (be8 <fw_update+0x238>)
     bb2:	4798      	blx	r3
     bb4:	e79c      	b.n	af0 <fw_update+0x140>
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	0000385f 	.word	0x0000385f
     bbc:	2000023c 	.word	0x2000023c
     bc0:	2000008c 	.word	0x2000008c
     bc4:	20000094 	.word	0x20000094
     bc8:	2000003a 	.word	0x2000003a
     bcc:	20000041 	.word	0x20000041
     bd0:	20000044 	.word	0x20000044
     bd4:	20000090 	.word	0x20000090
     bd8:	0000018d 	.word	0x0000018d
     bdc:	20000040 	.word	0x20000040
     be0:	2000003c 	.word	0x2000003c
     be4:	20000098 	.word	0x20000098
     be8:	00000279 	.word	0x00000279

00000bec <fw_update_done>:
	}	
}


void fw_update_done(uint8_t status)
{
     bec:	b538      	push	{r3, r4, r5, lr}
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     bee:	25d8      	movs	r5, #216	; 0xd8
}


void fw_update_done(uint8_t status)
{
	cfg_buff[0] = status;
     bf0:	4c05      	ldr	r4, [pc, #20]	; (c08 <fw_update_done+0x1c>)
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     bf2:	02ad      	lsls	r5, r5, #10
}


void fw_update_done(uint8_t status)
{
	cfg_buff[0] = status;
     bf4:	7020      	strb	r0, [r4, #0]
	{
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) 
		{
			/* Erase row */
			nvm_erase_row(address);
     bf6:	4b05      	ldr	r3, [pc, #20]	; (c0c <fw_update_done+0x20>)
     bf8:	1c28      	adds	r0, r5, #0
     bfa:	4798      	blx	r3
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
     bfc:	1c28      	adds	r0, r5, #0
     bfe:	1c21      	adds	r1, r4, #0
     c00:	2240      	movs	r2, #64	; 0x40
     c02:	4b03      	ldr	r3, [pc, #12]	; (c10 <fw_update_done+0x24>)
     c04:	4798      	blx	r3

void fw_update_done(uint8_t status)
{
	cfg_buff[0] = status;
	program_memory(CFG_START_ADDRESS,cfg_buff,NVMCTRL_PAGE_SIZE);
}
     c06:	bd38      	pop	{r3, r4, r5, pc}
     c08:	20000098 	.word	0x20000098
     c0c:	00000279 	.word	0x00000279
     c10:	0000018d 	.word	0x0000018d

00000c14 <i2c_link_init>:

 /*
 * i2c master init function
 */
void i2c_link_init(void)
{
     c14:	b530      	push	{r4, r5, lr}
     c16:	b08b      	sub	sp, #44	; 0x2c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
     c18:	2300      	movs	r3, #0
     c1a:	466a      	mov	r2, sp
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     c1c:	4669      	mov	r1, sp
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
     c1e:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
     c20:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     c22:	2280      	movs	r2, #128	; 0x80
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     c24:	770b      	strb	r3, [r1, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     c26:	9308      	str	r3, [sp, #32]
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     c28:	33d7      	adds	r3, #215	; 0xd7
     c2a:	848b      	strh	r3, [r1, #36]	; 0x24
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
     c2c:	33b9      	adds	r3, #185	; 0xb9
     c2e:	9300      	str	r3, [sp, #0]
	config_i2c_master.buffer_timeout = 10000;
     c30:	4b18      	ldr	r3, [pc, #96]	; (c94 <i2c_link_init+0x80>)
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     c32:	0392      	lsls	r2, r2, #14
     c34:	81cb      	strh	r3, [r1, #14]
     c36:	9202      	str	r2, [sp, #8]
	config_i2c_master.pinmux_pad0 = SMBUS_SDA;
     c38:	2316      	movs	r3, #22
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     c3a:	2201      	movs	r2, #1
	config_i2c_master.pinmux_pad1 = SMBUS_SCL;
	i2c_master_init(&i2c_master_instance,I2C_MODULE,&config_i2c_master);
     c3c:	4d16      	ldr	r5, [pc, #88]	; (c98 <i2c_link_init+0x84>)
     c3e:	4252      	negs	r2, r2
{
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
	config_i2c_master.buffer_timeout = 10000;
	config_i2c_master.pinmux_pad0 = SMBUS_SDA;
     c40:	9305      	str	r3, [sp, #20]
	config_i2c_master.pinmux_pad1 = SMBUS_SCL;
     c42:	3301      	adds	r3, #1
     c44:	818a      	strh	r2, [r1, #12]
     c46:	9306      	str	r3, [sp, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     c48:	466a      	mov	r2, sp
	i2c_master_init(&i2c_master_instance,I2C_MODULE,&config_i2c_master);
     c4a:	1c28      	adds	r0, r5, #0
     c4c:	4913      	ldr	r1, [pc, #76]	; (c9c <i2c_link_init+0x88>)
     c4e:	4b14      	ldr	r3, [pc, #80]	; (ca0 <i2c_link_init+0x8c>)
     c50:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c52:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     c54:	8a23      	ldrh	r3, [r4, #16]
     c56:	0bdb      	lsrs	r3, r3, #15
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     c58:	d1fc      	bne.n	c54 <i2c_link_init+0x40>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     c5a:	6822      	ldr	r2, [r4, #0]
     c5c:	3302      	adds	r3, #2
     c5e:	4313      	orrs	r3, r2
     c60:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     c62:	6828      	ldr	r0, [r5, #0]
     c64:	4b0f      	ldr	r3, [pc, #60]	; (ca4 <i2c_link_init+0x90>)
     c66:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c68:	231f      	movs	r3, #31
     c6a:	4018      	ands	r0, r3
     c6c:	3b1e      	subs	r3, #30
     c6e:	4083      	lsls	r3, r0
     c70:	1c18      	adds	r0, r3, #0
     c72:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <i2c_link_init+0x94>)
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     c74:	2110      	movs	r1, #16
     c76:	6018      	str	r0, [r3, #0]
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     c78:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     c7a:	2300      	movs	r3, #0
     c7c:	e002      	b.n	c84 <i2c_link_init+0x70>
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
     c7e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     c80:	4283      	cmp	r3, r0
     c82:	d204      	bcs.n	c8e <i2c_link_init+0x7a>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     c84:	8a22      	ldrh	r2, [r4, #16]
     c86:	4211      	tst	r1, r2
     c88:	d0f9      	beq.n	c7e <i2c_link_init+0x6a>
	i2c_master_enable(&i2c_master_instance);
}
     c8a:	b00b      	add	sp, #44	; 0x2c
     c8c:	bd30      	pop	{r4, r5, pc}
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     c8e:	2310      	movs	r3, #16
     c90:	8223      	strh	r3, [r4, #16]
     c92:	e7fa      	b.n	c8a <i2c_link_init+0x76>
     c94:	00002710 	.word	0x00002710
     c98:	20000244 	.word	0x20000244
     c9c:	42001400 	.word	0x42001400
     ca0:	000003b9 	.word	0x000003b9
     ca4:	00002911 	.word	0x00002911
     ca8:	e000e100 	.word	0xe000e100

00000cac <i2c_master_write>:

uint8_t i2c_master_write(struct i2c_master_packet packet)
{
     cac:	b570      	push	{r4, r5, r6, lr}
	enum status_code err = STATUS_OK;
	volatile uint16_t timeout = 0;
     cae:	2416      	movs	r4, #22
     cb0:	2300      	movs	r3, #0
	
	err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
     cb2:	4e0e      	ldr	r6, [pc, #56]	; (cec <i2c_master_write+0x40>)
	i2c_master_init(&i2c_master_instance,I2C_MODULE,&config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_master_write(struct i2c_master_packet packet)
{
     cb4:	b086      	sub	sp, #24
     cb6:	9001      	str	r0, [sp, #4]
     cb8:	9102      	str	r1, [sp, #8]
	enum status_code err = STATUS_OK;
	volatile uint16_t timeout = 0;
     cba:	446c      	add	r4, sp
	
	err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
     cbc:	1c30      	adds	r0, r6, #0
     cbe:	a901      	add	r1, sp, #4
     cc0:	4d0b      	ldr	r5, [pc, #44]	; (cf0 <i2c_master_write+0x44>)
	i2c_master_init(&i2c_master_instance,I2C_MODULE,&config_i2c_master);
	i2c_master_enable(&i2c_master_instance);
}

uint8_t i2c_master_write(struct i2c_master_packet packet)
{
     cc2:	9203      	str	r2, [sp, #12]
	enum status_code err = STATUS_OK;
	volatile uint16_t timeout = 0;
     cc4:	8023      	strh	r3, [r4, #0]
	
	err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
     cc6:	47a8      	blx	r5
     cc8:	e009      	b.n	cde <i2c_master_write+0x32>
	while(err != STATUS_OK)
	{
		err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
     cca:	1c30      	adds	r0, r6, #0
     ccc:	a901      	add	r1, sp, #4
     cce:	47a8      	blx	r5
		timeout++;
     cd0:	8823      	ldrh	r3, [r4, #0]
     cd2:	3301      	adds	r3, #1
     cd4:	b29b      	uxth	r3, r3
     cd6:	8023      	strh	r3, [r4, #0]
		if(timeout == I2C_TIMEOUT)
     cd8:	8823      	ldrh	r3, [r4, #0]
     cda:	2b64      	cmp	r3, #100	; 0x64
     cdc:	d004      	beq.n	ce8 <i2c_master_write+0x3c>
{
	enum status_code err = STATUS_OK;
	volatile uint16_t timeout = 0;
	
	err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
	while(err != STATUS_OK)
     cde:	2800      	cmp	r0, #0
     ce0:	d1f3      	bne.n	cca <i2c_master_write+0x1e>
		if(timeout == I2C_TIMEOUT)
		{
			return I2C_MASTER_ERR;
		}
	}
	return I2C_MASTER_OK;
     ce2:	2000      	movs	r0, #0
}
     ce4:	b006      	add	sp, #24
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	{
		err = i2c_master_write_packet_wait(&i2c_master_instance,&packet);
		timeout++;
		if(timeout == I2C_TIMEOUT)
		{
			return I2C_MASTER_ERR;
     ce8:	2001      	movs	r0, #1
     cea:	e7fb      	b.n	ce4 <i2c_master_write+0x38>
     cec:	20000244 	.word	0x20000244
     cf0:	00000565 	.word	0x00000565

00000cf4 <usart_feedback>:
	return Init;
}


enum USART_FSM_STATUS usart_feedback(void)
{
     cf4:	b510      	push	{r4, lr}
	usart_rx_data[6] = usart_cmd_error;
     cf6:	4c07      	ldr	r4, [pc, #28]	; (d14 <usart_feedback+0x20>)
     cf8:	4807      	ldr	r0, [pc, #28]	; (d18 <usart_feedback+0x24>)
     cfa:	7823      	ldrb	r3, [r4, #0]
     cfc:	7183      	strb	r3, [r0, #6]
	usart_set_tx_frame((uint8_t *)usart_rx_data);
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <usart_feedback+0x28>)
     d00:	4798      	blx	r3
	usart_send_data();
     d02:	4b07      	ldr	r3, [pc, #28]	; (d20 <usart_feedback+0x2c>)
     d04:	4798      	blx	r3
	led_blink_en = 2;
     d06:	2202      	movs	r2, #2
     d08:	4b06      	ldr	r3, [pc, #24]	; (d24 <usart_feedback+0x30>)
	usart_cmd_error = USART_PROTOCOL_FB_OK;
	return Init;
}
     d0a:	2000      	movs	r0, #0
enum USART_FSM_STATUS usart_feedback(void)
{
	usart_rx_data[6] = usart_cmd_error;
	usart_set_tx_frame((uint8_t *)usart_rx_data);
	usart_send_data();
	led_blink_en = 2;
     d0c:	701a      	strb	r2, [r3, #0]
	usart_cmd_error = USART_PROTOCOL_FB_OK;
     d0e:	2300      	movs	r3, #0
     d10:	7023      	strb	r3, [r4, #0]
	return Init;
}
     d12:	bd10      	pop	{r4, pc}
     d14:	200000d9 	.word	0x200000d9
     d18:	200000dc 	.word	0x200000dc
     d1c:	000018a5 	.word	0x000018a5
     d20:	000018d9 	.word	0x000018d9
     d24:	200001f7 	.word	0x200001f7

00000d28 <usart_sys_reset>:

enum USART_FSM_STATUS usart_sys_reset(void)
{
     d28:	b500      	push	{lr}
     d2a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     d2c:	2300      	movs	r3, #0
     d2e:	466a      	mov	r2, sp
	config->enable               = true;
     d30:	4669      	mov	r1, sp
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     d32:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
     d34:	2201      	movs	r2, #1
     d36:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
     d38:	3203      	adds	r2, #3
     d3a:	708a      	strb	r2, [r1, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
	config->window_period        = WDT_PERIOD_NONE;
     d3c:	710b      	strb	r3, [r1, #4]
	config->always_on            = false;
	config->enable               = true;
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     d3e:	3208      	adds	r2, #8
	config->window_period        = WDT_PERIOD_NONE;
	config->early_warning_period = WDT_PERIOD_NONE;
     d40:	714b      	strb	r3, [r1, #5]

	/* Set the required clock source and timeout period */
	wdt_config.clock_source   = GCLK_GENERATOR_4;

	/* Initialize and enable the Watchdog with the user settings */
	wdt_set_config(&wdt_config);
     d42:	4668      	mov	r0, sp
     d44:	4b01      	ldr	r3, [pc, #4]	; (d4c <usart_sys_reset+0x24>)
	config->always_on            = false;
	config->enable               = true;
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     d46:	70ca      	strb	r2, [r1, #3]
     d48:	4798      	blx	r3

	while (1) 
	{
		/* Wait for watchdog reset */
	}
     d4a:	e7fe      	b.n	d4a <usart_sys_reset+0x22>
     d4c:	0000086d 	.word	0x0000086d

00000d50 <usart_protocol_analysis>:

/*
 * Brief: usart protocol analysis function
 */
enum USART_FSM_STATUS usart_protocol_analysis(void)
{
     d50:	b538      	push	{r3, r4, r5, lr}
	// get the rx frame data
	usart_get_rx_frame((uint8_t *)usart_rx_data);
     d52:	4cbd      	ldr	r4, [pc, #756]	; (1048 <usart_protocol_analysis+0x2f8>)
     d54:	4bbd      	ldr	r3, [pc, #756]	; (104c <usart_protocol_analysis+0x2fc>)
     d56:	1c20      	adds	r0, r4, #0
     d58:	4798      	blx	r3
	
	// firmware downloading
	if(usart_rx_data[0] == USART_PROTOCOL_HEADER_FW_DWLD)
     d5a:	7823      	ldrb	r3, [r4, #0]
     d5c:	2bfa      	cmp	r3, #250	; 0xfa
     d5e:	d00e      	beq.n	d7e <usart_protocol_analysis+0x2e>
		usart_rx_data[4] = 0;
		usart_rx_data[5] = 0;
		return Feedback;
	}
	// usart 2 i2c communication
	if(usart_rx_data[0] == USART_PROTOCOL_HEADER_USART_I2C)
     d60:	2bfc      	cmp	r3, #252	; 0xfc
     d62:	d00a      	beq.n	d7a <usart_protocol_analysis+0x2a>
		return I2C;
	}
	
	// analysis
	// test mode
	if(usart_rx_data[1] == USART_PROTOCOL_TEST)
     d64:	7863      	ldrb	r3, [r4, #1]
     d66:	2b00      	cmp	r3, #0
     d68:	d112      	bne.n	d90 <usart_protocol_analysis+0x40>
	{
		switch(usart_rx_data[2])	
     d6a:	78a3      	ldrb	r3, [r4, #2]
     d6c:	2b06      	cmp	r3, #6
     d6e:	d900      	bls.n	d72 <usart_protocol_analysis+0x22>
     d70:	e084      	b.n	e7c <usart_protocol_analysis+0x12c>
     d72:	4ab7      	ldr	r2, [pc, #732]	; (1050 <usart_protocol_analysis+0x300>)
     d74:	009b      	lsls	r3, r3, #2
     d76:	58d3      	ldr	r3, [r2, r3]
     d78:	469f      	mov	pc, r3
		return Feedback;
	}
	// usart 2 i2c communication
	if(usart_rx_data[0] == USART_PROTOCOL_HEADER_USART_I2C)
	{
		return I2C;
     d7a:	2004      	movs	r0, #4
	{
		usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT1;
		return Feedback;
	}
	return Init;
}
     d7c:	bd38      	pop	{r3, r4, r5, pc}
	usart_get_rx_frame((uint8_t *)usart_rx_data);
	
	// firmware downloading
	if(usart_rx_data[0] == USART_PROTOCOL_HEADER_FW_DWLD)
	{
		if(!fw_update_en)
     d7e:	4bb5      	ldr	r3, [pc, #724]	; (1054 <usart_protocol_analysis+0x304>)
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	2b00      	cmp	r3, #0
     d84:	d119      	bne.n	dba <usart_protocol_analysis+0x6a>
		}
		else if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_FNSH)	// end
		{
			if(fw_update_en)
			{
				usart_cmd_error = USART_PROTOCOL_FB_ERR_FW_DWLD;
     d86:	2210      	movs	r2, #16
     d88:	4bb3      	ldr	r3, [pc, #716]	; (1058 <usart_protocol_analysis+0x308>)
				return Feedback;
     d8a:	2002      	movs	r0, #2
		}
		else if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_FNSH)	// end
		{
			if(fw_update_en)
			{
				usart_cmd_error = USART_PROTOCOL_FB_ERR_FW_DWLD;
     d8c:	701a      	strb	r2, [r3, #0]
				return Feedback;
     d8e:	e7f5      	b.n	d7c <usart_protocol_analysis+0x2c>
				break;
		}
		return Feedback;
	}
	// shot mode
	else if(usart_rx_data[1] == USART_PROTOCOL_SHOT)
     d90:	2b01      	cmp	r3, #1
     d92:	d01d      	beq.n	dd0 <usart_protocol_analysis+0x80>
				break;
		}
		return Feedback;
	}
	// auto mode setting
	else if(usart_rx_data[1] == USART_PROTOCOL_QUEUE)
     d94:	2b02      	cmp	r3, #2
     d96:	d100      	bne.n	d9a <usart_protocol_analysis+0x4a>
     d98:	e08a      	b.n	eb0 <usart_protocol_analysis+0x160>
				break;
		}
		return Feedback;
	}
	// auto mode power up and down
	else if(usart_rx_data[1] == USART_PROTOCOL_SWAP)
     d9a:	2b03      	cmp	r3, #3
     d9c:	d100      	bne.n	da0 <usart_protocol_analysis+0x50>
     d9e:	e08e      	b.n	ebe <usart_protocol_analysis+0x16e>
				break;
		}
		return Feedback;
	}
	// configuration mode
	else if(usart_rx_data[1] == USART_PROTOCOL_CFG)
     da0:	2b04      	cmp	r3, #4
     da2:	d100      	bne.n	da6 <usart_protocol_analysis+0x56>
     da4:	e0ea      	b.n	f7c <usart_protocol_analysis+0x22c>
	{
		hs_pwr_sig_sel(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
	}
	// firmware update
	else if(usart_rx_data[1] == USART_PROTOCOL_FW_UPDATE)	
     da6:	2b60      	cmp	r3, #96	; 0x60
     da8:	d06d      	beq.n	e86 <usart_protocol_analysis+0x136>
			timer_delay_ms(10);
			while(timer_delay_ms(0));
			usart_sys_reset();
		}
	}
	else if(usart_rx_data[1] == USART_PROTOCOL_PWR_LOAD_TEST) // load test
     daa:	2b50      	cmp	r3, #80	; 0x50
     dac:	d100      	bne.n	db0 <usart_protocol_analysis+0x60>
     dae:	e226      	b.n	11fe <usart_protocol_analysis+0x4ae>
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
	}
	else
	{
		usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT1;
     db0:	2201      	movs	r2, #1
     db2:	4ba9      	ldr	r3, [pc, #676]	; (1058 <usart_protocol_analysis+0x308>)
		return Feedback;
     db4:	2002      	movs	r0, #2
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
	}
	else
	{
		usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT1;
     db6:	701a      	strb	r2, [r3, #0]
		return Feedback;
     db8:	e7e0      	b.n	d7c <usart_protocol_analysis+0x2c>
		if(!fw_update_en)
		{
			usart_cmd_error = USART_PROTOCOL_FB_ERR_FW_DWLD;
			return Feedback;
		}
		fw_update((uint8_t *)usart_rx_data);
     dba:	1c20      	adds	r0, r4, #0
     dbc:	4ba7      	ldr	r3, [pc, #668]	; (105c <usart_protocol_analysis+0x30c>)
     dbe:	4798      	blx	r3
		usart_rx_data[1] = 0;
     dc0:	2300      	movs	r3, #0
		usart_rx_data[2] = 0;
		usart_rx_data[3] = 0;
		usart_rx_data[4] = 0;
		usart_rx_data[5] = 0;
		return Feedback;
     dc2:	2002      	movs	r0, #2
		{
			usart_cmd_error = USART_PROTOCOL_FB_ERR_FW_DWLD;
			return Feedback;
		}
		fw_update((uint8_t *)usart_rx_data);
		usart_rx_data[1] = 0;
     dc4:	7063      	strb	r3, [r4, #1]
		usart_rx_data[2] = 0;
     dc6:	70a3      	strb	r3, [r4, #2]
		usart_rx_data[3] = 0;
     dc8:	70e3      	strb	r3, [r4, #3]
		usart_rx_data[4] = 0;
     dca:	7123      	strb	r3, [r4, #4]
		usart_rx_data[5] = 0;
     dcc:	7163      	strb	r3, [r4, #5]
		return Feedback;
     dce:	e7d5      	b.n	d7c <usart_protocol_analysis+0x2c>
		return Feedback;
	}
	// shot mode
	else if(usart_rx_data[1] == USART_PROTOCOL_SHOT)
	{
		switch(usart_rx_data[2])
     dd0:	78a3      	ldrb	r3, [r4, #2]
     dd2:	2b40      	cmp	r3, #64	; 0x40
     dd4:	d100      	bne.n	dd8 <usart_protocol_analysis+0x88>
     dd6:	e113      	b.n	1000 <usart_protocol_analysis+0x2b0>
     dd8:	d947      	bls.n	e6a <usart_protocol_analysis+0x11a>
     dda:	2b42      	cmp	r3, #66	; 0x42
     ddc:	d100      	bne.n	de0 <usart_protocol_analysis+0x90>
     dde:	e172      	b.n	10c6 <usart_protocol_analysis+0x376>
     de0:	d200      	bcs.n	de4 <usart_protocol_analysis+0x94>
     de2:	e15b      	b.n	109c <usart_protocol_analysis+0x34c>
     de4:	2b64      	cmp	r3, #100	; 0x64
     de6:	d100      	bne.n	dea <usart_protocol_analysis+0x9a>
     de8:	e167      	b.n	10ba <usart_protocol_analysis+0x36a>
     dea:	2b65      	cmp	r3, #101	; 0x65
     dec:	d146      	bne.n	e7c <usart_protocol_analysis+0x12c>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     dee:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
     df0:	2280      	movs	r2, #128	; 0x80
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     df2:	2b00      	cmp	r3, #0
     df4:	d100      	bne.n	df8 <usart_protocol_analysis+0xa8>
     df6:	e0d1      	b.n	f9c <usart_protocol_analysis+0x24c>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df8:	4b99      	ldr	r3, [pc, #612]	; (1060 <usart_protocol_analysis+0x310>)
	}
	// configuration mode
	else if(usart_rx_data[1] == USART_PROTOCOL_CFG)
	{
		hs_pwr_sig_sel(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
     dfa:	2002      	movs	r0, #2
     dfc:	615a      	str	r2, [r3, #20]
     dfe:	e7bd      	b.n	d7c <usart_protocol_analysis+0x2c>
	else if(usart_rx_data[1] == USART_PROTOCOL_QUEUE)
	{
		switch(usart_rx_data[2])
		{
			case USART_PROTOCOl_QUEUE_MODE_00:
				hs_auto_mode_setting = 0;
     e00:	4b98      	ldr	r3, [pc, #608]	; (1064 <usart_protocol_analysis+0x314>)
     e02:	701a      	strb	r2, [r3, #0]
				hs_auto_mode_delay = usart_rx_data[3];
     e04:	78e3      	ldrb	r3, [r4, #3]
				if(hs_auto_mode_delay > USART_PROTOCOL_QUEUE_DELAY_MAX)
     e06:	2b1e      	cmp	r3, #30
     e08:	d900      	bls.n	e0c <usart_protocol_analysis+0xbc>
     e0a:	e0df      	b.n	fcc <usart_protocol_analysis+0x27c>
	{
		switch(usart_rx_data[2])
		{
			case USART_PROTOCOl_QUEUE_MODE_00:
				hs_auto_mode_setting = 0;
				hs_auto_mode_delay = usart_rx_data[3];
     e0c:	4a96      	ldr	r2, [pc, #600]	; (1068 <usart_protocol_analysis+0x318>)
     e0e:	7013      	strb	r3, [r2, #0]
		}
	}
	else if(usart_rx_data[1] == USART_PROTOCOL_PWR_LOAD_TEST) // load test
	{
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
     e10:	2002      	movs	r0, #2
     e12:	e7b3      	b.n	d7c <usart_protocol_analysis+0x2c>
				timer_delay_ms(10);
				while(timer_delay_ms(0));
				usart_sys_reset();
				break;
			case USART_PROTOCOL_TEST_BOOTEN:
				fw_update_done(0xff);
     e14:	20ff      	movs	r0, #255	; 0xff
     e16:	4b95      	ldr	r3, [pc, #596]	; (106c <usart_protocol_analysis+0x31c>)
     e18:	4798      	blx	r3
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
     e1a:	2002      	movs	r0, #2
				while(timer_delay_ms(0));
				usart_sys_reset();
				break;
			case USART_PROTOCOL_TEST_BOOTEN:
				fw_update_done(0xff);
				break;
     e1c:	e7ae      	b.n	d7c <usart_protocol_analysis+0x2c>
			case USART_PROTOCOL_TEST_QUEUE_MODE:	// get auto mode setting
				usart_rx_data[3] = hs_auto_mode_setting;
				usart_rx_data[4] = hs_auto_mode_delay;
				break;
			case USART_PROTOCOL_TEST_FW_REV:		// get firmware version
				usart_rx_data[3] = FW_VERSION_HW;
     e1e:	2300      	movs	r3, #0
     e20:	70e3      	strb	r3, [r4, #3]
				usart_rx_data[4] = FW_VERSION_INT;
     e22:	3302      	adds	r3, #2
     e24:	7123      	strb	r3, [r4, #4]
				usart_rx_data[5] = FW_VERSION_DEC;
     e26:	3b01      	subs	r3, #1
     e28:	7163      	strb	r3, [r4, #5]
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
     e2a:	2002      	movs	r0, #2
				break;
			case USART_PROTOCOL_TEST_FW_REV:		// get firmware version
				usart_rx_data[3] = FW_VERSION_HW;
				usart_rx_data[4] = FW_VERSION_INT;
				usart_rx_data[5] = FW_VERSION_DEC;
				break;
     e2c:	e7a6      	b.n	d7c <usart_protocol_analysis+0x2c>
		switch(usart_rx_data[2])	
		{
			case USART_PROTOCOL_TEST_LINK:			// link test
				break;
			case USART_PROTOCOL_TEST_QUEUE_MODE:	// get auto mode setting
				usart_rx_data[3] = hs_auto_mode_setting;
     e2e:	4b8d      	ldr	r3, [pc, #564]	; (1064 <usart_protocol_analysis+0x314>)
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
     e30:	2002      	movs	r0, #2
		switch(usart_rx_data[2])	
		{
			case USART_PROTOCOL_TEST_LINK:			// link test
				break;
			case USART_PROTOCOL_TEST_QUEUE_MODE:	// get auto mode setting
				usart_rx_data[3] = hs_auto_mode_setting;
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	70e3      	strb	r3, [r4, #3]
				usart_rx_data[4] = hs_auto_mode_delay;
     e36:	4b8c      	ldr	r3, [pc, #560]	; (1068 <usart_protocol_analysis+0x318>)
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	7123      	strb	r3, [r4, #4]
				break;
     e3c:	e79e      	b.n	d7c <usart_protocol_analysis+0x2c>
}


enum USART_FSM_STATUS usart_feedback(void)
{
	usart_rx_data[6] = usart_cmd_error;
     e3e:	4d86      	ldr	r5, [pc, #536]	; (1058 <usart_protocol_analysis+0x308>)
	usart_set_tx_frame((uint8_t *)usart_rx_data);
     e40:	1c20      	adds	r0, r4, #0
}


enum USART_FSM_STATUS usart_feedback(void)
{
	usart_rx_data[6] = usart_cmd_error;
     e42:	782b      	ldrb	r3, [r5, #0]
     e44:	71a3      	strb	r3, [r4, #6]
	usart_set_tx_frame((uint8_t *)usart_rx_data);
     e46:	4b8a      	ldr	r3, [pc, #552]	; (1070 <usart_protocol_analysis+0x320>)
     e48:	4798      	blx	r3
	usart_send_data();
     e4a:	4b8a      	ldr	r3, [pc, #552]	; (1074 <usart_protocol_analysis+0x324>)
     e4c:	4798      	blx	r3
	led_blink_en = 2;
     e4e:	2202      	movs	r2, #2
     e50:	4b89      	ldr	r3, [pc, #548]	; (1078 <usart_protocol_analysis+0x328>)
				usart_rx_data[4] = FW_VERSION_INT;
				usart_rx_data[5] = FW_VERSION_DEC;
				break;
			case USART_PROTOCOL_TEST_RSTN:
				usart_feedback();
				timer_delay_ms(10);
     e52:	200a      	movs	r0, #10
enum USART_FSM_STATUS usart_feedback(void)
{
	usart_rx_data[6] = usart_cmd_error;
	usart_set_tx_frame((uint8_t *)usart_rx_data);
	usart_send_data();
	led_blink_en = 2;
     e54:	701a      	strb	r2, [r3, #0]
	usart_cmd_error = USART_PROTOCOL_FB_OK;
     e56:	2300      	movs	r3, #0
     e58:	702b      	strb	r3, [r5, #0]
				usart_rx_data[4] = FW_VERSION_INT;
				usart_rx_data[5] = FW_VERSION_DEC;
				break;
			case USART_PROTOCOL_TEST_RSTN:
				usart_feedback();
				timer_delay_ms(10);
     e5a:	4d88      	ldr	r5, [pc, #544]	; (107c <usart_protocol_analysis+0x32c>)
     e5c:	47a8      	blx	r5
				while(timer_delay_ms(0));
     e5e:	2000      	movs	r0, #0
     e60:	47a8      	blx	r5
     e62:	2800      	cmp	r0, #0
     e64:	d1fb      	bne.n	e5e <usart_protocol_analysis+0x10e>
				usart_sys_reset();
     e66:	4b86      	ldr	r3, [pc, #536]	; (1080 <usart_protocol_analysis+0x330>)
     e68:	4798      	blx	r3
		return Feedback;
	}
	// shot mode
	else if(usart_rx_data[1] == USART_PROTOCOL_SHOT)
	{
		switch(usart_rx_data[2])
     e6a:	2b02      	cmp	r3, #2
     e6c:	d100      	bne.n	e70 <usart_protocol_analysis+0x120>
     e6e:	e0c0      	b.n	ff2 <usart_protocol_analysis+0x2a2>
     e70:	2b03      	cmp	r3, #3
     e72:	d100      	bne.n	e76 <usart_protocol_analysis+0x126>
     e74:	e0b6      	b.n	fe4 <usart_protocol_analysis+0x294>
     e76:	2b01      	cmp	r3, #1
     e78:	d100      	bne.n	e7c <usart_protocol_analysis+0x12c>
     e7a:	e0ac      	b.n	fd6 <usart_protocol_analysis+0x286>
				{
					hs_auto_mode_0_power_up();
				}
				else
				{
					usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
     e7c:	2202      	movs	r2, #2
     e7e:	4b76      	ldr	r3, [pc, #472]	; (1058 <usart_protocol_analysis+0x308>)
				rly_auto_mode_1((usart_rx_data[3]+1));
				break;
			default:
				break;
		}
		return Feedback;
     e80:	2002      	movs	r0, #2
				{
					hs_auto_mode_0_power_up();
				}
				else
				{
					usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e77a      	b.n	d7c <usart_protocol_analysis+0x2c>
		return Feedback;
	}
	// firmware update
	else if(usart_rx_data[1] == USART_PROTOCOL_FW_UPDATE)	
	{
		if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_STRT)	// start
     e86:	78a3      	ldrb	r3, [r4, #2]
     e88:	2b01      	cmp	r3, #1
     e8a:	d100      	bne.n	e8e <usart_protocol_analysis+0x13e>
     e8c:	e08a      	b.n	fa4 <usart_protocol_analysis+0x254>
			usart_rx_data[3] = 0;
			usart_rx_data[4] = 0;
			usart_rx_data[5] = 0;
			return Feedback;
		}
		else if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_FNSH)	// end
     e8e:	2b02      	cmp	r3, #2
     e90:	d100      	bne.n	e94 <usart_protocol_analysis+0x144>
     e92:	e1f2      	b.n	127a <usart_protocol_analysis+0x52a>
	else
	{
		usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT1;
		return Feedback;
	}
	return Init;
     e94:	2000      	movs	r0, #0
				return Feedback;
			}
			fw_update_done(2);
			return Feedback;
		}
		else if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_RSTN)	// reset
     e96:	2b03      	cmp	r3, #3
     e98:	d000      	beq.n	e9c <usart_protocol_analysis+0x14c>
     e9a:	e76f      	b.n	d7c <usart_protocol_analysis+0x2c>
		{
			usart_feedback();
     e9c:	4b79      	ldr	r3, [pc, #484]	; (1084 <usart_protocol_analysis+0x334>)
     e9e:	4798      	blx	r3
			timer_delay_ms(10);
     ea0:	200a      	movs	r0, #10
     ea2:	4d76      	ldr	r5, [pc, #472]	; (107c <usart_protocol_analysis+0x32c>)
     ea4:	47a8      	blx	r5
			while(timer_delay_ms(0));
     ea6:	2000      	movs	r0, #0
     ea8:	47a8      	blx	r5
     eaa:	2800      	cmp	r0, #0
     eac:	d1fb      	bne.n	ea6 <usart_protocol_analysis+0x156>
     eae:	e7da      	b.n	e66 <usart_protocol_analysis+0x116>
		return Feedback;
	}
	// auto mode setting
	else if(usart_rx_data[1] == USART_PROTOCOL_QUEUE)
	{
		switch(usart_rx_data[2])
     eb0:	78a2      	ldrb	r2, [r4, #2]
     eb2:	2a00      	cmp	r2, #0
     eb4:	d0a4      	beq.n	e00 <usart_protocol_analysis+0xb0>
				{
					hs_auto_mode_delay = USART_PROTOCOL_QUEUE_DELAY_MIN;
				}
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
     eb6:	4a68      	ldr	r2, [pc, #416]	; (1058 <usart_protocol_analysis+0x308>)
				break;
		}
		return Feedback;
     eb8:	2002      	movs	r0, #2
				{
					hs_auto_mode_delay = USART_PROTOCOL_QUEUE_DELAY_MIN;
				}
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
     eba:	7013      	strb	r3, [r2, #0]
				break;
     ebc:	e75e      	b.n	d7c <usart_protocol_analysis+0x2c>
		return Feedback;
	}
	// auto mode power up and down
	else if(usart_rx_data[1] == USART_PROTOCOL_SWAP)
	{
		switch(usart_rx_data[2])
     ebe:	78a3      	ldrb	r3, [r4, #2]
     ec0:	2b01      	cmp	r3, #1
     ec2:	d100      	bne.n	ec6 <usart_protocol_analysis+0x176>
     ec4:	e122      	b.n	110c <usart_protocol_analysis+0x3bc>
     ec6:	2b00      	cmp	r3, #0
     ec8:	d100      	bne.n	ecc <usart_protocol_analysis+0x17c>
     eca:	e16c      	b.n	11a6 <usart_protocol_analysis+0x456>
     ecc:	2b10      	cmp	r3, #16
     ece:	d100      	bne.n	ed2 <usart_protocol_analysis+0x182>
     ed0:	e14c      	b.n	116c <usart_protocol_analysis+0x41c>
     ed2:	2b11      	cmp	r3, #17
     ed4:	d19c      	bne.n	e10 <usart_protocol_analysis+0xc0>
				break;
			case USART_PROTOCOL_AT_RLY_MD_01:	// relay auto mode 1
				rly_auto_mode_0((usart_rx_data[3]+1));
				break;
			case USART_PROTOCOL_AT_RLY_MD_02:	// relay auto mode 2
				rly_auto_mode_1((usart_rx_data[3]+1));
     ed6:	78e0      	ldrb	r0, [r4, #3]
 * 4 : relay 1 on module
 * 5 : relay 2 on module
 */
static void rly_auto_mode_1(uint8_t rly)
{
	if(rly > 5 || rly == 0)
     ed8:	2804      	cmp	r0, #4
     eda:	d899      	bhi.n	e10 <usart_protocol_analysis+0xc0>
				break;
			case USART_PROTOCOL_AT_RLY_MD_01:	// relay auto mode 1
				rly_auto_mode_0((usart_rx_data[3]+1));
				break;
			case USART_PROTOCOL_AT_RLY_MD_02:	// relay auto mode 2
				rly_auto_mode_1((usart_rx_data[3]+1));
     edc:	3001      	adds	r0, #1
     ede:	b2c4      	uxtb	r4, r0
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
     ee0:	2c03      	cmp	r4, #3
     ee2:	d100      	bne.n	ee6 <usart_protocol_analysis+0x196>
     ee4:	e264      	b.n	13b0 <usart_protocol_analysis+0x660>
     ee6:	d800      	bhi.n	eea <usart_protocol_analysis+0x19a>
     ee8:	e237      	b.n	135a <usart_protocol_analysis+0x60a>
     eea:	2c04      	cmp	r4, #4
     eec:	d100      	bne.n	ef0 <usart_protocol_analysis+0x1a0>
     eee:	e269      	b.n	13c4 <usart_protocol_analysis+0x674>
     ef0:	2c05      	cmp	r4, #5
     ef2:	d000      	beq.n	ef6 <usart_protocol_analysis+0x1a6>
     ef4:	e261      	b.n	13ba <usart_protocol_analysis+0x66a>
     ef6:	2280      	movs	r2, #128	; 0x80
     ef8:	4b59      	ldr	r3, [pc, #356]	; (1060 <usart_protocol_analysis+0x310>)
     efa:	615a      	str	r2, [r3, #20]
	{
		return;
	}
	
	relay_switch(rly,1); // connect the relay rly
	timer_delay_ms(10000); // delay 10 sec
     efc:	4862      	ldr	r0, [pc, #392]	; (1088 <usart_protocol_analysis+0x338>)
     efe:	4d5f      	ldr	r5, [pc, #380]	; (107c <usart_protocol_analysis+0x32c>)
     f00:	47a8      	blx	r5
	while(timer_delay_ms(0))
     f02:	2000      	movs	r0, #0
     f04:	47a8      	blx	r5
     f06:	2800      	cmp	r0, #0
     f08:	d1fb      	bne.n	f02 <usart_protocol_analysis+0x1b2>
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
     f0a:	2c03      	cmp	r4, #3
     f0c:	d100      	bne.n	f10 <usart_protocol_analysis+0x1c0>
     f0e:	e24a      	b.n	13a6 <usart_protocol_analysis+0x656>
     f10:	d800      	bhi.n	f14 <usart_protocol_analysis+0x1c4>
     f12:	e21b      	b.n	134c <usart_protocol_analysis+0x5fc>
     f14:	2c04      	cmp	r4, #4
     f16:	d100      	bne.n	f1a <usart_protocol_analysis+0x1ca>
     f18:	e281      	b.n	141e <usart_protocol_analysis+0x6ce>
     f1a:	2c05      	cmp	r4, #5
     f1c:	d000      	beq.n	f20 <usart_protocol_analysis+0x1d0>
     f1e:	e279      	b.n	1414 <usart_protocol_analysis+0x6c4>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f20:	2280      	movs	r2, #128	; 0x80
     f22:	4b4f      	ldr	r3, [pc, #316]	; (1060 <usart_protocol_analysis+0x310>)
     f24:	619a      	str	r2, [r3, #24]
	while(timer_delay_ms(0))
	{
		;
	}
	relay_switch(rly,0); // disconnect the relay rly
	timer_delay_ms(30000); // delay 30 sec
     f26:	4859      	ldr	r0, [pc, #356]	; (108c <usart_protocol_analysis+0x33c>)
     f28:	47a8      	blx	r5
	while(timer_delay_ms(0))
     f2a:	2000      	movs	r0, #0
     f2c:	47a8      	blx	r5
     f2e:	2800      	cmp	r0, #0
     f30:	d1fb      	bne.n	f2a <usart_protocol_analysis+0x1da>
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
     f32:	2c03      	cmp	r4, #3
     f34:	d100      	bne.n	f38 <usart_protocol_analysis+0x1e8>
     f36:	e24e      	b.n	13d6 <usart_protocol_analysis+0x686>
     f38:	d800      	bhi.n	f3c <usart_protocol_analysis+0x1ec>
     f3a:	e21c      	b.n	1376 <usart_protocol_analysis+0x626>
     f3c:	2c04      	cmp	r4, #4
     f3e:	d100      	bne.n	f42 <usart_protocol_analysis+0x1f2>
     f40:	e253      	b.n	13ea <usart_protocol_analysis+0x69a>
     f42:	2c05      	cmp	r4, #5
     f44:	d000      	beq.n	f48 <usart_protocol_analysis+0x1f8>
     f46:	e24b      	b.n	13e0 <usart_protocol_analysis+0x690>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f48:	2280      	movs	r2, #128	; 0x80
     f4a:	4b45      	ldr	r3, [pc, #276]	; (1060 <usart_protocol_analysis+0x310>)
     f4c:	615a      	str	r2, [r3, #20]
	while(timer_delay_ms(0))
	{
		;
	}
	relay_switch(rly,1); // connect the relay rly
	timer_delay_ms(500); // delay 0.5 sec
     f4e:	20fa      	movs	r0, #250	; 0xfa
     f50:	0040      	lsls	r0, r0, #1
     f52:	47a8      	blx	r5
	while(timer_delay_ms(0))
     f54:	2000      	movs	r0, #0
     f56:	47a8      	blx	r5
     f58:	2800      	cmp	r0, #0
     f5a:	d1fb      	bne.n	f54 <usart_protocol_analysis+0x204>
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
     f5c:	2c03      	cmp	r4, #3
     f5e:	d100      	bne.n	f62 <usart_protocol_analysis+0x212>
     f60:	e210      	b.n	1384 <usart_protocol_analysis+0x634>
     f62:	d800      	bhi.n	f66 <usart_protocol_analysis+0x216>
     f64:	e1a7      	b.n	12b6 <usart_protocol_analysis+0x566>
     f66:	2c04      	cmp	r4, #4
     f68:	d100      	bne.n	f6c <usart_protocol_analysis+0x21c>
     f6a:	e217      	b.n	139c <usart_protocol_analysis+0x64c>
     f6c:	2c05      	cmp	r4, #5
     f6e:	d000      	beq.n	f72 <usart_protocol_analysis+0x222>
     f70:	e20e      	b.n	1390 <usart_protocol_analysis+0x640>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	4b3a      	ldr	r3, [pc, #232]	; (1060 <usart_protocol_analysis+0x310>)
				rly_auto_mode_1((usart_rx_data[3]+1));
				break;
			default:
				break;
		}
		return Feedback;
     f76:	2002      	movs	r0, #2
     f78:	619a      	str	r2, [r3, #24]
     f7a:	e6ff      	b.n	d7c <usart_protocol_analysis+0x2c>
	hs_power_sw(0);
}

static void hs_pwr_sig_sel(uint8_t pwr_or_sig, uint8_t sel)
{
	bool gpio_level = (sel > 0)?true:false;
     f7c:	78e3      	ldrb	r3, [r4, #3]
		return Feedback;
	}
	// configuration mode
	else if(usart_rx_data[1] == USART_PROTOCOL_CFG)
	{
		hs_pwr_sig_sel(usart_rx_data[2],usart_rx_data[3]);
     f7e:	78a2      	ldrb	r2, [r4, #2]
	hs_power_sw(0);
}

static void hs_pwr_sig_sel(uint8_t pwr_or_sig, uint8_t sel)
{
	bool gpio_level = (sel > 0)?true:false;
     f80:	1e59      	subs	r1, r3, #1
     f82:	418b      	sbcs	r3, r1
     f84:	b2db      	uxtb	r3, r3
	if(pwr_or_sig == 1) // power
     f86:	2a01      	cmp	r2, #1
     f88:	d100      	bne.n	f8c <usart_protocol_analysis+0x23c>
     f8a:	e0b9      	b.n	1100 <usart_protocol_analysis+0x3b0>
	{
		port_pin_set_output_level(PE_PWR_SLT,(!gpio_level));
	}
	else if(pwr_or_sig == 2) //smbus
     f8c:	2a02      	cmp	r2, #2
     f8e:	d000      	beq.n	f92 <usart_protocol_analysis+0x242>
     f90:	e73e      	b.n	e10 <usart_protocol_analysis+0xc0>
     f92:	2280      	movs	r2, #128	; 0x80
     f94:	01d2      	lsls	r2, r2, #7
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     f96:	2b00      	cmp	r3, #0
     f98:	d000      	beq.n	f9c <usart_protocol_analysis+0x24c>
     f9a:	e72d      	b.n	df8 <usart_protocol_analysis+0xa8>
		port_base->OUTSET.reg = pin_mask;
     f9c:	4b30      	ldr	r3, [pc, #192]	; (1060 <usart_protocol_analysis+0x310>)
	}
	// configuration mode
	else if(usart_rx_data[1] == USART_PROTOCOL_CFG)
	{
		hs_pwr_sig_sel(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
     f9e:	2002      	movs	r0, #2
     fa0:	619a      	str	r2, [r3, #24]
     fa2:	e6eb      	b.n	d7c <usart_protocol_analysis+0x2c>
	// firmware update
	else if(usart_rx_data[1] == USART_PROTOCOL_FW_UPDATE)	
	{
		if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_STRT)	// start
		{
			fw_update_en = 1;
     fa4:	4a2b      	ldr	r2, [pc, #172]	; (1054 <usart_protocol_analysis+0x304>)
			fw_update_length = (usart_rx_data[6] << 24) | (usart_rx_data[5] << 16) | (usart_rx_data[4] << 8) | (usart_rx_data[3]);
			usart_rx_data[3] = 0;
			usart_rx_data[4] = 0;
			usart_rx_data[5] = 0;
			return Feedback;
     fa6:	2002      	movs	r0, #2
	// firmware update
	else if(usart_rx_data[1] == USART_PROTOCOL_FW_UPDATE)	
	{
		if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_STRT)	// start
		{
			fw_update_en = 1;
     fa8:	7013      	strb	r3, [r2, #0]
			fw_update_length = (usart_rx_data[6] << 24) | (usart_rx_data[5] << 16) | (usart_rx_data[4] << 8) | (usart_rx_data[3]);
     faa:	79a3      	ldrb	r3, [r4, #6]
     fac:	061a      	lsls	r2, r3, #24
     fae:	7963      	ldrb	r3, [r4, #5]
     fb0:	041b      	lsls	r3, r3, #16
     fb2:	4313      	orrs	r3, r2
     fb4:	78e2      	ldrb	r2, [r4, #3]
     fb6:	431a      	orrs	r2, r3
     fb8:	7923      	ldrb	r3, [r4, #4]
     fba:	021b      	lsls	r3, r3, #8
     fbc:	4313      	orrs	r3, r2
     fbe:	4a34      	ldr	r2, [pc, #208]	; (1090 <usart_protocol_analysis+0x340>)
     fc0:	6013      	str	r3, [r2, #0]
			usart_rx_data[3] = 0;
     fc2:	2300      	movs	r3, #0
     fc4:	70e3      	strb	r3, [r4, #3]
			usart_rx_data[4] = 0;
     fc6:	7123      	strb	r3, [r4, #4]
			usart_rx_data[5] = 0;
     fc8:	7163      	strb	r3, [r4, #5]
			return Feedback;
     fca:	e6d7      	b.n	d7c <usart_protocol_analysis+0x2c>
			case USART_PROTOCOl_QUEUE_MODE_00:
				hs_auto_mode_setting = 0;
				hs_auto_mode_delay = usart_rx_data[3];
				if(hs_auto_mode_delay > USART_PROTOCOL_QUEUE_DELAY_MAX)
				{
					hs_auto_mode_delay = USART_PROTOCOL_QUEUE_DELAY_MAX;
     fcc:	221e      	movs	r2, #30
     fce:	4b26      	ldr	r3, [pc, #152]	; (1068 <usart_protocol_analysis+0x318>)
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
     fd0:	2002      	movs	r0, #2
			case USART_PROTOCOl_QUEUE_MODE_00:
				hs_auto_mode_setting = 0;
				hs_auto_mode_delay = usart_rx_data[3];
				if(hs_auto_mode_delay > USART_PROTOCOL_QUEUE_DELAY_MAX)
				{
					hs_auto_mode_delay = USART_PROTOCOL_QUEUE_DELAY_MAX;
     fd2:	701a      	strb	r2, [r3, #0]
     fd4:	e6d2      	b.n	d7c <usart_protocol_analysis+0x2c>
     fd6:	2280      	movs	r2, #128	; 0x80
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     fd8:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
     fda:	0352      	lsls	r2, r2, #13
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     fdc:	2b00      	cmp	r3, #0
     fde:	d000      	beq.n	fe2 <usart_protocol_analysis+0x292>
     fe0:	e70a      	b.n	df8 <usart_protocol_analysis+0xa8>
     fe2:	e7db      	b.n	f9c <usart_protocol_analysis+0x24c>
		port_base->OUTSET.reg = pin_mask;
     fe4:	2280      	movs	r2, #128	; 0x80
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     fe6:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
     fe8:	0212      	lsls	r2, r2, #8
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     fea:	2b00      	cmp	r3, #0
     fec:	d000      	beq.n	ff0 <usart_protocol_analysis+0x2a0>
     fee:	e703      	b.n	df8 <usart_protocol_analysis+0xa8>
     ff0:	e7d4      	b.n	f9c <usart_protocol_analysis+0x24c>
		port_base->OUTSET.reg = pin_mask;
     ff2:	2280      	movs	r2, #128	; 0x80
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     ff4:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
     ff6:	0392      	lsls	r2, r2, #14
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     ff8:	2b00      	cmp	r3, #0
     ffa:	d000      	beq.n	ffe <usart_protocol_analysis+0x2ae>
     ffc:	e6fc      	b.n	df8 <usart_protocol_analysis+0xa8>
     ffe:	e7cd      	b.n	f9c <usart_protocol_analysis+0x24c>
    1000:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
    1002:	2080      	movs	r0, #128	; 0x80
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1004:	2b00      	cmp	r3, #0
    1006:	d100      	bne.n	100a <usart_protocol_analysis+0x2ba>
    1008:	e111      	b.n	122e <usart_protocol_analysis+0x4de>
		port_base->OUTSET.reg = pin_mask;
    100a:	2280      	movs	r2, #128	; 0x80
    100c:	4b21      	ldr	r3, [pc, #132]	; (1094 <usart_protocol_analysis+0x344>)
    100e:	0192      	lsls	r2, r2, #6
    1010:	619a      	str	r2, [r3, #24]
    1012:	2280      	movs	r2, #128	; 0x80
    1014:	4912      	ldr	r1, [pc, #72]	; (1060 <usart_protocol_analysis+0x310>)
    1016:	0152      	lsls	r2, r2, #5
    1018:	618a      	str	r2, [r1, #24]
    101a:	619a      	str	r2, [r3, #24]
	gpio_level = (sw > 0)?true:false;
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    101c:	4a1e      	ldr	r2, [pc, #120]	; (1098 <usart_protocol_analysis+0x348>)
    101e:	7812      	ldrb	r2, [r2, #0]
    1020:	2a00      	cmp	r2, #0
    1022:	d100      	bne.n	1026 <usart_protocol_analysis+0x2d6>
    1024:	e141      	b.n	12aa <usart_protocol_analysis+0x55a>
	{
		port_pin_set_output_level(PE_LANE_TWO_SW,gpio_level);
	}
	else if(module_form_factor == u2u)//u2u module
    1026:	2a02      	cmp	r2, #2
    1028:	d100      	bne.n	102c <usart_protocol_analysis+0x2dc>
    102a:	e130      	b.n	128e <usart_protocol_analysis+0x53e>
    102c:	2080      	movs	r0, #128	; 0x80
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	2440      	movs	r4, #64	; 0x40
    1032:	4b18      	ldr	r3, [pc, #96]	; (1094 <usart_protocol_analysis+0x344>)
    1034:	4a0a      	ldr	r2, [pc, #40]	; (1060 <usart_protocol_analysis+0x310>)
    1036:	0100      	lsls	r0, r0, #4
    1038:	00c9      	lsls	r1, r1, #3
    103a:	6198      	str	r0, [r3, #24]
    103c:	6199      	str	r1, [r3, #24]
    103e:	619c      	str	r4, [r3, #24]
    1040:	6190      	str	r0, [r2, #24]
    1042:	6191      	str	r1, [r2, #24]
				rly_auto_mode_1((usart_rx_data[3]+1));
				break;
			default:
				break;
		}
		return Feedback;
    1044:	2002      	movs	r0, #2
    1046:	e699      	b.n	d7c <usart_protocol_analysis+0x2c>
    1048:	200000dc 	.word	0x200000dc
    104c:	00001851 	.word	0x00001851
    1050:	00003870 	.word	0x00003870
    1054:	20000040 	.word	0x20000040
    1058:	200000d9 	.word	0x200000d9
    105c:	000009b1 	.word	0x000009b1
    1060:	41004400 	.word	0x41004400
    1064:	200000d8 	.word	0x200000d8
    1068:	20000000 	.word	0x20000000
    106c:	00000bed 	.word	0x00000bed
    1070:	000018a5 	.word	0x000018a5
    1074:	000018d9 	.word	0x000018d9
    1078:	200001f7 	.word	0x200001f7
    107c:	00002281 	.word	0x00002281
    1080:	00000d29 	.word	0x00000d29
    1084:	00000cf5 	.word	0x00000cf5
    1088:	00002710 	.word	0x00002710
    108c:	00007530 	.word	0x00007530
    1090:	2000003c 	.word	0x2000003c
    1094:	41004480 	.word	0x41004480
    1098:	20000234 	.word	0x20000234
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    109c:	78e3      	ldrb	r3, [r4, #3]
    109e:	2b00      	cmp	r3, #0
    10a0:	d100      	bne.n	10a4 <usart_protocol_analysis+0x354>
    10a2:	e0a1      	b.n	11e8 <usart_protocol_analysis+0x498>
		port_base->OUTSET.reg = pin_mask;
    10a4:	2280      	movs	r2, #128	; 0x80
    10a6:	4bd3      	ldr	r3, [pc, #844]	; (13f4 <usart_protocol_analysis+0x6a4>)
    10a8:	0192      	lsls	r2, r2, #6
    10aa:	619a      	str	r2, [r3, #24]
    10ac:	2280      	movs	r2, #128	; 0x80
    10ae:	49d2      	ldr	r1, [pc, #840]	; (13f8 <usart_protocol_analysis+0x6a8>)
    10b0:	0152      	lsls	r2, r2, #5
    10b2:	618a      	str	r2, [r1, #24]
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
    10b4:	2002      	movs	r0, #2
    10b6:	619a      	str	r2, [r3, #24]
    10b8:	e660      	b.n	d7c <usart_protocol_analysis+0x2c>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    10ba:	78e3      	ldrb	r3, [r4, #3]
		port_base->OUTSET.reg = pin_mask;
    10bc:	2220      	movs	r2, #32
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    10be:	2b00      	cmp	r3, #0
    10c0:	d000      	beq.n	10c4 <usart_protocol_analysis+0x374>
    10c2:	e699      	b.n	df8 <usart_protocol_analysis+0xa8>
    10c4:	e76a      	b.n	f9c <usart_protocol_analysis+0x24c>
 * sw = 0: close (unconnected)
 */
static void hs_signal_sw(uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?true:false;
    10c6:	78e3      	ldrb	r3, [r4, #3]
    10c8:	1e5a      	subs	r2, r3, #1
    10ca:	4193      	sbcs	r3, r2
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    10cc:	4acb      	ldr	r2, [pc, #812]	; (13fc <usart_protocol_analysis+0x6ac>)
 * sw = 0: close (unconnected)
 */
static void hs_signal_sw(uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?true:false;
    10ce:	b2db      	uxtb	r3, r3
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    10d0:	7812      	ldrb	r2, [r2, #0]
    10d2:	2a00      	cmp	r2, #0
    10d4:	d000      	beq.n	10d8 <usart_protocol_analysis+0x388>
    10d6:	e0ca      	b.n	126e <usart_protocol_analysis+0x51e>
    10d8:	2b00      	cmp	r3, #0
    10da:	d000      	beq.n	10de <usart_protocol_analysis+0x38e>
    10dc:	e0e7      	b.n	12ae <usart_protocol_analysis+0x55e>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10de:	2280      	movs	r2, #128	; 0x80
    10e0:	4bc4      	ldr	r3, [pc, #784]	; (13f4 <usart_protocol_analysis+0x6a4>)
    10e2:	615a      	str	r2, [r3, #20]
    10e4:	2080      	movs	r0, #128	; 0x80
    10e6:	2180      	movs	r1, #128	; 0x80
    10e8:	2440      	movs	r4, #64	; 0x40
    10ea:	4bc2      	ldr	r3, [pc, #776]	; (13f4 <usart_protocol_analysis+0x6a4>)
    10ec:	4ac2      	ldr	r2, [pc, #776]	; (13f8 <usart_protocol_analysis+0x6a8>)
    10ee:	0100      	lsls	r0, r0, #4
    10f0:	00c9      	lsls	r1, r1, #3
    10f2:	6158      	str	r0, [r3, #20]
    10f4:	6159      	str	r1, [r3, #20]
    10f6:	615c      	str	r4, [r3, #20]
    10f8:	6150      	str	r0, [r2, #20]
    10fa:	6151      	str	r1, [r2, #20]
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
    10fc:	2002      	movs	r0, #2
    10fe:	e63d      	b.n	d7c <usart_protocol_analysis+0x2c>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1100:	2280      	movs	r2, #128	; 0x80
    1102:	0192      	lsls	r2, r2, #6
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1104:	2b00      	cmp	r3, #0
    1106:	d000      	beq.n	110a <usart_protocol_analysis+0x3ba>
    1108:	e676      	b.n	df8 <usart_protocol_analysis+0xa8>
    110a:	e747      	b.n	f9c <usart_protocol_analysis+0x24c>
	else if(usart_rx_data[1] == USART_PROTOCOL_SWAP)
	{
		switch(usart_rx_data[2])
		{
			case USART_PROTOCOL_SWAP_POWER_UP:
				if(hs_auto_mode_setting == 0)
    110c:	4bbc      	ldr	r3, [pc, #752]	; (1400 <usart_protocol_analysis+0x6b0>)
    110e:	781b      	ldrb	r3, [r3, #0]
    1110:	2b00      	cmp	r3, #0
    1112:	d000      	beq.n	1116 <usart_protocol_analysis+0x3c6>
    1114:	e6b2      	b.n	e7c <usart_protocol_analysis+0x12c>
		port_base->OUTSET.reg = pin_mask;
    1116:	2280      	movs	r2, #128	; 0x80
    1118:	4bb6      	ldr	r3, [pc, #728]	; (13f4 <usart_protocol_analysis+0x6a4>)
    111a:	0192      	lsls	r2, r2, #6
    111c:	619a      	str	r2, [r3, #24]
    111e:	2280      	movs	r2, #128	; 0x80
    1120:	49b5      	ldr	r1, [pc, #724]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1122:	0152      	lsls	r2, r2, #5
    1124:	618a      	str	r2, [r1, #24]
    1126:	619a      	str	r2, [r3, #24]
 * Brief: auto mode. power up of mode 0: power on -> delay -> signal on
 */
static void hs_auto_mode_0_power_up(void)
{
	hs_power_sw(1);
	timer_delay_ms(hs_auto_mode_delay);
    1128:	4bb6      	ldr	r3, [pc, #728]	; (1404 <usart_protocol_analysis+0x6b4>)
    112a:	4db7      	ldr	r5, [pc, #732]	; (1408 <usart_protocol_analysis+0x6b8>)
    112c:	7818      	ldrb	r0, [r3, #0]
    112e:	47a8      	blx	r5
	while(timer_delay_ms(0))
    1130:	2000      	movs	r0, #0
    1132:	47a8      	blx	r5
    1134:	2800      	cmp	r0, #0
    1136:	d1fb      	bne.n	1130 <usart_protocol_analysis+0x3e0>
	gpio_level = (sw > 0)?true:false;
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    1138:	4bb0      	ldr	r3, [pc, #704]	; (13fc <usart_protocol_analysis+0x6ac>)
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	2b00      	cmp	r3, #0
    113e:	d100      	bne.n	1142 <usart_protocol_analysis+0x3f2>
    1140:	e0b5      	b.n	12ae <usart_protocol_analysis+0x55e>
	{
		port_pin_set_output_level(PE_LANE_TWO_SW,gpio_level);
	}
	else if(module_form_factor == u2u)//u2u module
    1142:	2b02      	cmp	r3, #2
    1144:	d000      	beq.n	1148 <usart_protocol_analysis+0x3f8>
    1146:	e771      	b.n	102c <usart_protocol_analysis+0x2dc>
    1148:	2280      	movs	r2, #128	; 0x80
    114a:	4baa      	ldr	r3, [pc, #680]	; (13f4 <usart_protocol_analysis+0x6a4>)
    114c:	01d2      	lsls	r2, r2, #7
    114e:	619a      	str	r2, [r3, #24]
    1150:	2280      	movs	r2, #128	; 0x80
    1152:	0212      	lsls	r2, r2, #8
    1154:	619a      	str	r2, [r3, #24]
    1156:	2280      	movs	r2, #128	; 0x80
    1158:	0052      	lsls	r2, r2, #1
    115a:	619a      	str	r2, [r3, #24]
    115c:	1892      	adds	r2, r2, r2
    115e:	619a      	str	r2, [r3, #24]
    1160:	3af1      	subs	r2, #241	; 0xf1
    1162:	3aff      	subs	r2, #255	; 0xff
    1164:	619a      	str	r2, [r3, #24]
    1166:	3270      	adds	r2, #112	; 0x70
    1168:	619a      	str	r2, [r3, #24]
    116a:	e75f      	b.n	102c <usart_protocol_analysis+0x2dc>
				{
					usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				}
				break;
			case USART_PROTOCOL_AT_RLY_MD_01:	// relay auto mode 1
				rly_auto_mode_0((usart_rx_data[3]+1));
    116c:	78e0      	ldrb	r0, [r4, #3]
 * 4 : relay 1 on module
 * 5 : relay 2 on module
 */
static void rly_auto_mode_0(uint8_t rly)
{
	if(rly > 5 || rly == 0)
    116e:	2804      	cmp	r0, #4
    1170:	d900      	bls.n	1174 <usart_protocol_analysis+0x424>
    1172:	e64d      	b.n	e10 <usart_protocol_analysis+0xc0>
				{
					usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				}
				break;
			case USART_PROTOCOL_AT_RLY_MD_01:	// relay auto mode 1
				rly_auto_mode_0((usart_rx_data[3]+1));
    1174:	3001      	adds	r0, #1
    1176:	b2c4      	uxtb	r4, r0
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
    1178:	2c03      	cmp	r4, #3
    117a:	d100      	bne.n	117e <usart_protocol_analysis+0x42e>
    117c:	e126      	b.n	13cc <usart_protocol_analysis+0x67c>
    117e:	d800      	bhi.n	1182 <usart_protocol_analysis+0x432>
    1180:	e0f2      	b.n	1368 <usart_protocol_analysis+0x618>
    1182:	2c04      	cmp	r4, #4
    1184:	d100      	bne.n	1188 <usart_protocol_analysis+0x438>
    1186:	e153      	b.n	1430 <usart_protocol_analysis+0x6e0>
    1188:	2c05      	cmp	r4, #5
    118a:	d000      	beq.n	118e <usart_protocol_analysis+0x43e>
    118c:	e14b      	b.n	1426 <usart_protocol_analysis+0x6d6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    118e:	2280      	movs	r2, #128	; 0x80
    1190:	4b99      	ldr	r3, [pc, #612]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1192:	615a      	str	r2, [r3, #20]
	{
		return;
	}
	
	relay_switch(rly,1); // connect the relay rly
	timer_delay_ms(500); // delay 0.5 sec
    1194:	20fa      	movs	r0, #250	; 0xfa
    1196:	4d9c      	ldr	r5, [pc, #624]	; (1408 <usart_protocol_analysis+0x6b8>)
    1198:	0040      	lsls	r0, r0, #1
    119a:	47a8      	blx	r5
	while(timer_delay_ms(0))
    119c:	2000      	movs	r0, #0
    119e:	47a8      	blx	r5
    11a0:	2800      	cmp	r0, #0
    11a2:	d1fb      	bne.n	119c <usart_protocol_analysis+0x44c>
    11a4:	e6da      	b.n	f5c <usart_protocol_analysis+0x20c>
				{
					usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				}
				break;
			case USART_PROTOCOL_SWAP_POWER_DW:
				if(hs_auto_mode_setting == 0)
    11a6:	4b96      	ldr	r3, [pc, #600]	; (1400 <usart_protocol_analysis+0x6b0>)
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d000      	beq.n	11b0 <usart_protocol_analysis+0x460>
    11ae:	e665      	b.n	e7c <usart_protocol_analysis+0x12c>
	gpio_level = (sw > 0)?true:false;
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    11b0:	4b92      	ldr	r3, [pc, #584]	; (13fc <usart_protocol_analysis+0x6ac>)
    11b2:	781b      	ldrb	r3, [r3, #0]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d000      	beq.n	11ba <usart_protocol_analysis+0x46a>
    11b8:	e0aa      	b.n	1310 <usart_protocol_analysis+0x5c0>
    11ba:	2280      	movs	r2, #128	; 0x80
    11bc:	4b8d      	ldr	r3, [pc, #564]	; (13f4 <usart_protocol_analysis+0x6a4>)
    11be:	615a      	str	r2, [r3, #20]
    11c0:	2080      	movs	r0, #128	; 0x80
    11c2:	2180      	movs	r1, #128	; 0x80
    11c4:	2440      	movs	r4, #64	; 0x40
    11c6:	4b8b      	ldr	r3, [pc, #556]	; (13f4 <usart_protocol_analysis+0x6a4>)
    11c8:	0100      	lsls	r0, r0, #4
    11ca:	4a8b      	ldr	r2, [pc, #556]	; (13f8 <usart_protocol_analysis+0x6a8>)
    11cc:	00c9      	lsls	r1, r1, #3
    11ce:	6158      	str	r0, [r3, #20]
    11d0:	6159      	str	r1, [r3, #20]
    11d2:	615c      	str	r4, [r3, #20]
 * Brief: auto mode. power down of mode 0: signal off -> delay -> power off
 */
static void hs_auto_mode_0_power_dw(void)
{
	hs_signal_sw(0);
	timer_delay_ms(hs_auto_mode_delay);
    11d4:	4b8b      	ldr	r3, [pc, #556]	; (1404 <usart_protocol_analysis+0x6b4>)
    11d6:	6150      	str	r0, [r2, #20]
    11d8:	6151      	str	r1, [r2, #20]
    11da:	7818      	ldrb	r0, [r3, #0]
    11dc:	4d8a      	ldr	r5, [pc, #552]	; (1408 <usart_protocol_analysis+0x6b8>)
    11de:	47a8      	blx	r5
	while(timer_delay_ms(0))
    11e0:	2000      	movs	r0, #0
    11e2:	47a8      	blx	r5
    11e4:	2800      	cmp	r0, #0
    11e6:	d1fb      	bne.n	11e0 <usart_protocol_analysis+0x490>
    11e8:	2280      	movs	r2, #128	; 0x80
    11ea:	4b82      	ldr	r3, [pc, #520]	; (13f4 <usart_protocol_analysis+0x6a4>)
    11ec:	0192      	lsls	r2, r2, #6
    11ee:	615a      	str	r2, [r3, #20]
    11f0:	2280      	movs	r2, #128	; 0x80
    11f2:	4981      	ldr	r1, [pc, #516]	; (13f8 <usart_protocol_analysis+0x6a8>)
    11f4:	0152      	lsls	r2, r2, #5
    11f6:	614a      	str	r2, [r1, #20]
				break;
			default:
				usart_cmd_error = USART_PROTOCOL_FB_ERR_BYT2;
				break;
		}
		return Feedback;
    11f8:	2002      	movs	r0, #2
    11fa:	615a      	str	r2, [r3, #20]
    11fc:	e5be      	b.n	d7c <usart_protocol_analysis+0x2c>
}

static void power_load_test(uint8_t load,uint8_t sw)
{
	bool gpio_level = false;
	gpio_level = (sw > 0)?true:false;
    11fe:	78e3      	ldrb	r3, [r4, #3]
    1200:	1e5a      	subs	r2, r3, #1
    1202:	4193      	sbcs	r3, r2
	
	switch(load)
    1204:	78a2      	ldrb	r2, [r4, #2]
}

static void power_load_test(uint8_t load,uint8_t sw)
{
	bool gpio_level = false;
	gpio_level = (sw > 0)?true:false;
    1206:	b2db      	uxtb	r3, r3
	
	switch(load)
    1208:	2a01      	cmp	r2, #1
    120a:	d064      	beq.n	12d6 <usart_protocol_analysis+0x586>
    120c:	2a00      	cmp	r2, #0
    120e:	d05a      	beq.n	12c6 <usart_protocol_analysis+0x576>
    1210:	2a04      	cmp	r2, #4
    1212:	d000      	beq.n	1216 <usart_protocol_analysis+0x4c6>
    1214:	e5fc      	b.n	e10 <usart_protocol_analysis+0xc0>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1216:	2b00      	cmp	r3, #0
    1218:	d100      	bne.n	121c <usart_protocol_analysis+0x4cc>
    121a:	e08e      	b.n	133a <usart_protocol_analysis+0x5ea>
		port_base->OUTSET.reg = pin_mask;
    121c:	2280      	movs	r2, #128	; 0x80
    121e:	4b75      	ldr	r3, [pc, #468]	; (13f4 <usart_protocol_analysis+0x6a4>)
    1220:	0192      	lsls	r2, r2, #6
    1222:	619a      	str	r2, [r3, #24]
    1224:	2280      	movs	r2, #128	; 0x80
    1226:	0152      	lsls	r2, r2, #5
    1228:	619a      	str	r2, [r3, #24]
		}
	}
	else if(usart_rx_data[1] == USART_PROTOCOL_PWR_LOAD_TEST) // load test
	{
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
    122a:	2002      	movs	r0, #2
    122c:	e5a6      	b.n	d7c <usart_protocol_analysis+0x2c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    122e:	2280      	movs	r2, #128	; 0x80
    1230:	4b70      	ldr	r3, [pc, #448]	; (13f4 <usart_protocol_analysis+0x6a4>)
    1232:	0192      	lsls	r2, r2, #6
    1234:	615a      	str	r2, [r3, #20]
    1236:	2280      	movs	r2, #128	; 0x80
    1238:	496f      	ldr	r1, [pc, #444]	; (13f8 <usart_protocol_analysis+0x6a8>)
    123a:	0152      	lsls	r2, r2, #5
    123c:	614a      	str	r2, [r1, #20]
    123e:	615a      	str	r2, [r3, #20]
	gpio_level = (sw > 0)?true:false;
	
	/*
	 * different form factors need to control different signals, except for the common ones.
	 */
	if(module_form_factor == p2p)//p2p module
    1240:	4a6e      	ldr	r2, [pc, #440]	; (13fc <usart_protocol_analysis+0x6ac>)
    1242:	7812      	ldrb	r2, [r2, #0]
    1244:	2a00      	cmp	r2, #0
    1246:	d010      	beq.n	126a <usart_protocol_analysis+0x51a>
	{
		port_pin_set_output_level(PE_LANE_TWO_SW,gpio_level);
	}
	else if(module_form_factor == u2u)//u2u module
    1248:	2a02      	cmp	r2, #2
    124a:	d000      	beq.n	124e <usart_protocol_analysis+0x4fe>
    124c:	e74a      	b.n	10e4 <usart_protocol_analysis+0x394>
    124e:	2280      	movs	r2, #128	; 0x80
    1250:	01d2      	lsls	r2, r2, #7
    1252:	615a      	str	r2, [r3, #20]
    1254:	2280      	movs	r2, #128	; 0x80
    1256:	0212      	lsls	r2, r2, #8
    1258:	615a      	str	r2, [r3, #20]
    125a:	2280      	movs	r2, #128	; 0x80
    125c:	0052      	lsls	r2, r2, #1
    125e:	615a      	str	r2, [r3, #20]
    1260:	1892      	adds	r2, r2, r2
    1262:	615a      	str	r2, [r3, #20]
    1264:	3af1      	subs	r2, #241	; 0xf1
    1266:	3aff      	subs	r2, #255	; 0xff
    1268:	615a      	str	r2, [r3, #20]
    126a:	6158      	str	r0, [r3, #20]
    126c:	e73a      	b.n	10e4 <usart_protocol_analysis+0x394>
    126e:	2a02      	cmp	r2, #2
    1270:	d039      	beq.n	12e6 <usart_protocol_analysis+0x596>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1272:	2b00      	cmp	r3, #0
    1274:	d100      	bne.n	1278 <usart_protocol_analysis+0x528>
    1276:	e735      	b.n	10e4 <usart_protocol_analysis+0x394>
    1278:	e6d8      	b.n	102c <usart_protocol_analysis+0x2dc>
			usart_rx_data[5] = 0;
			return Feedback;
		}
		else if(usart_rx_data[2] == USART_PROTOCOL_FW_UPDATE_FNSH)	// end
		{
			if(fw_update_en)
    127a:	4b64      	ldr	r3, [pc, #400]	; (140c <usart_protocol_analysis+0x6bc>)
    127c:	781b      	ldrb	r3, [r3, #0]
    127e:	2b00      	cmp	r3, #0
    1280:	d000      	beq.n	1284 <usart_protocol_analysis+0x534>
    1282:	e580      	b.n	d86 <usart_protocol_analysis+0x36>
			{
				usart_cmd_error = USART_PROTOCOL_FB_ERR_FW_DWLD;
				return Feedback;
			}
			fw_update_done(2);
    1284:	2002      	movs	r0, #2
    1286:	4b62      	ldr	r3, [pc, #392]	; (1410 <usart_protocol_analysis+0x6c0>)
    1288:	4798      	blx	r3
			return Feedback;
    128a:	2002      	movs	r0, #2
    128c:	e576      	b.n	d7c <usart_protocol_analysis+0x2c>
		port_base->OUTSET.reg = pin_mask;
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	01d2      	lsls	r2, r2, #7
    1292:	619a      	str	r2, [r3, #24]
    1294:	2280      	movs	r2, #128	; 0x80
    1296:	0212      	lsls	r2, r2, #8
    1298:	619a      	str	r2, [r3, #24]
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	0052      	lsls	r2, r2, #1
    129e:	619a      	str	r2, [r3, #24]
    12a0:	1892      	adds	r2, r2, r2
    12a2:	619a      	str	r2, [r3, #24]
    12a4:	3af1      	subs	r2, #241	; 0xf1
    12a6:	3aff      	subs	r2, #255	; 0xff
    12a8:	619a      	str	r2, [r3, #24]
    12aa:	6198      	str	r0, [r3, #24]
    12ac:	e6be      	b.n	102c <usart_protocol_analysis+0x2dc>
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	4b50      	ldr	r3, [pc, #320]	; (13f4 <usart_protocol_analysis+0x6a4>)
    12b2:	619a      	str	r2, [r3, #24]
    12b4:	e6ba      	b.n	102c <usart_protocol_analysis+0x2dc>
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
    12b6:	2c02      	cmp	r4, #2
    12b8:	d16a      	bne.n	1390 <usart_protocol_analysis+0x640>
    12ba:	2280      	movs	r2, #128	; 0x80
    12bc:	4b4e      	ldr	r3, [pc, #312]	; (13f8 <usart_protocol_analysis+0x6a8>)
    12be:	0392      	lsls	r2, r2, #14
    12c0:	619a      	str	r2, [r3, #24]
				rly_auto_mode_1((usart_rx_data[3]+1));
				break;
			default:
				break;
		}
		return Feedback;
    12c2:	1c20      	adds	r0, r4, #0
    12c4:	e55a      	b.n	d7c <usart_protocol_analysis+0x2c>
    12c6:	2280      	movs	r2, #128	; 0x80
    12c8:	0192      	lsls	r2, r2, #6
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    12ca:	2b00      	cmp	r3, #0
    12cc:	d007      	beq.n	12de <usart_protocol_analysis+0x58e>
		port_base->OUTSET.reg = pin_mask;
    12ce:	4b49      	ldr	r3, [pc, #292]	; (13f4 <usart_protocol_analysis+0x6a4>)
		}
	}
	else if(usart_rx_data[1] == USART_PROTOCOL_PWR_LOAD_TEST) // load test
	{
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
    12d0:	2002      	movs	r0, #2
    12d2:	619a      	str	r2, [r3, #24]
    12d4:	e552      	b.n	d7c <usart_protocol_analysis+0x2c>
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	0152      	lsls	r2, r2, #5
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    12da:	2b00      	cmp	r3, #0
    12dc:	d1f7      	bne.n	12ce <usart_protocol_analysis+0x57e>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12de:	4b45      	ldr	r3, [pc, #276]	; (13f4 <usart_protocol_analysis+0x6a4>)
    12e0:	2002      	movs	r0, #2
    12e2:	615a      	str	r2, [r3, #20]
    12e4:	e54a      	b.n	d7c <usart_protocol_analysis+0x2c>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    12e6:	2b00      	cmp	r3, #0
    12e8:	d000      	beq.n	12ec <usart_protocol_analysis+0x59c>
    12ea:	e72d      	b.n	1148 <usart_protocol_analysis+0x3f8>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12ec:	2280      	movs	r2, #128	; 0x80
    12ee:	4b41      	ldr	r3, [pc, #260]	; (13f4 <usart_protocol_analysis+0x6a4>)
    12f0:	01d2      	lsls	r2, r2, #7
    12f2:	615a      	str	r2, [r3, #20]
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	0212      	lsls	r2, r2, #8
    12f8:	615a      	str	r2, [r3, #20]
    12fa:	2280      	movs	r2, #128	; 0x80
    12fc:	0052      	lsls	r2, r2, #1
    12fe:	615a      	str	r2, [r3, #20]
    1300:	1892      	adds	r2, r2, r2
    1302:	615a      	str	r2, [r3, #20]
    1304:	3af1      	subs	r2, #241	; 0xf1
    1306:	3aff      	subs	r2, #255	; 0xff
    1308:	615a      	str	r2, [r3, #20]
    130a:	3270      	adds	r2, #112	; 0x70
    130c:	615a      	str	r2, [r3, #20]
    130e:	e6e9      	b.n	10e4 <usart_protocol_analysis+0x394>
	 */
	if(module_form_factor == p2p)//p2p module
	{
		port_pin_set_output_level(PE_LANE_TWO_SW,gpio_level);
	}
	else if(module_form_factor == u2u)//u2u module
    1310:	2b02      	cmp	r3, #2
    1312:	d000      	beq.n	1316 <usart_protocol_analysis+0x5c6>
    1314:	e754      	b.n	11c0 <usart_protocol_analysis+0x470>
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	4b36      	ldr	r3, [pc, #216]	; (13f4 <usart_protocol_analysis+0x6a4>)
    131a:	01d2      	lsls	r2, r2, #7
    131c:	615a      	str	r2, [r3, #20]
    131e:	2280      	movs	r2, #128	; 0x80
    1320:	0212      	lsls	r2, r2, #8
    1322:	615a      	str	r2, [r3, #20]
    1324:	2280      	movs	r2, #128	; 0x80
    1326:	0052      	lsls	r2, r2, #1
    1328:	615a      	str	r2, [r3, #20]
    132a:	1892      	adds	r2, r2, r2
    132c:	615a      	str	r2, [r3, #20]
    132e:	3af1      	subs	r2, #241	; 0xf1
    1330:	3aff      	subs	r2, #255	; 0xff
    1332:	615a      	str	r2, [r3, #20]
    1334:	3270      	adds	r2, #112	; 0x70
    1336:	615a      	str	r2, [r3, #20]
    1338:	e742      	b.n	11c0 <usart_protocol_analysis+0x470>
    133a:	2280      	movs	r2, #128	; 0x80
    133c:	4b2d      	ldr	r3, [pc, #180]	; (13f4 <usart_protocol_analysis+0x6a4>)
    133e:	0192      	lsls	r2, r2, #6
    1340:	615a      	str	r2, [r3, #20]
    1342:	2280      	movs	r2, #128	; 0x80
    1344:	0152      	lsls	r2, r2, #5
    1346:	615a      	str	r2, [r3, #20]
		}
	}
	else if(usart_rx_data[1] == USART_PROTOCOL_PWR_LOAD_TEST) // load test
	{
		power_load_test(usart_rx_data[2],usart_rx_data[3]);
		return Feedback;
    1348:	2002      	movs	r0, #2
    134a:	e517      	b.n	d7c <usart_protocol_analysis+0x2c>
static void relay_switch(uint8_t rly,uint8_t sw)
{
	bool gpio_level = 0;
	gpio_level = (sw > 0)?false:true;
	
	switch(rly)
    134c:	2c02      	cmp	r4, #2
    134e:	d161      	bne.n	1414 <usart_protocol_analysis+0x6c4>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1350:	2280      	movs	r2, #128	; 0x80
    1352:	4b29      	ldr	r3, [pc, #164]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1354:	0392      	lsls	r2, r2, #14
    1356:	619a      	str	r2, [r3, #24]
    1358:	e5e5      	b.n	f26 <usart_protocol_analysis+0x1d6>
    135a:	2c02      	cmp	r4, #2
    135c:	d12d      	bne.n	13ba <usart_protocol_analysis+0x66a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    135e:	2280      	movs	r2, #128	; 0x80
    1360:	4b25      	ldr	r3, [pc, #148]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1362:	0392      	lsls	r2, r2, #14
    1364:	615a      	str	r2, [r3, #20]
    1366:	e5c9      	b.n	efc <usart_protocol_analysis+0x1ac>
    1368:	2c02      	cmp	r4, #2
    136a:	d15c      	bne.n	1426 <usart_protocol_analysis+0x6d6>
    136c:	2280      	movs	r2, #128	; 0x80
    136e:	4b22      	ldr	r3, [pc, #136]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1370:	0392      	lsls	r2, r2, #14
    1372:	615a      	str	r2, [r3, #20]
    1374:	e70e      	b.n	1194 <usart_protocol_analysis+0x444>
    1376:	2c02      	cmp	r4, #2
    1378:	d132      	bne.n	13e0 <usart_protocol_analysis+0x690>
    137a:	2280      	movs	r2, #128	; 0x80
    137c:	4b1e      	ldr	r3, [pc, #120]	; (13f8 <usart_protocol_analysis+0x6a8>)
    137e:	0392      	lsls	r2, r2, #14
    1380:	615a      	str	r2, [r3, #20]
    1382:	e5e4      	b.n	f4e <usart_protocol_analysis+0x1fe>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	4b1c      	ldr	r3, [pc, #112]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1388:	0212      	lsls	r2, r2, #8
    138a:	619a      	str	r2, [r3, #24]
				rly_auto_mode_1((usart_rx_data[3]+1));
				break;
			default:
				break;
		}
		return Feedback;
    138c:	2002      	movs	r0, #2
    138e:	e4f5      	b.n	d7c <usart_protocol_analysis+0x2c>
    1390:	2280      	movs	r2, #128	; 0x80
    1392:	4b19      	ldr	r3, [pc, #100]	; (13f8 <usart_protocol_analysis+0x6a8>)
    1394:	0352      	lsls	r2, r2, #13
    1396:	619a      	str	r2, [r3, #24]
    1398:	2002      	movs	r0, #2
    139a:	e4ef      	b.n	d7c <usart_protocol_analysis+0x2c>
    139c:	2220      	movs	r2, #32
    139e:	4b16      	ldr	r3, [pc, #88]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13a0:	2002      	movs	r0, #2
    13a2:	619a      	str	r2, [r3, #24]
    13a4:	e4ea      	b.n	d7c <usart_protocol_analysis+0x2c>
    13a6:	2280      	movs	r2, #128	; 0x80
    13a8:	4b13      	ldr	r3, [pc, #76]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13aa:	0212      	lsls	r2, r2, #8
    13ac:	619a      	str	r2, [r3, #24]
    13ae:	e5ba      	b.n	f26 <usart_protocol_analysis+0x1d6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	4b11      	ldr	r3, [pc, #68]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13b4:	0212      	lsls	r2, r2, #8
    13b6:	615a      	str	r2, [r3, #20]
    13b8:	e5a0      	b.n	efc <usart_protocol_analysis+0x1ac>
    13ba:	2280      	movs	r2, #128	; 0x80
    13bc:	4b0e      	ldr	r3, [pc, #56]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13be:	0352      	lsls	r2, r2, #13
    13c0:	615a      	str	r2, [r3, #20]
    13c2:	e59b      	b.n	efc <usart_protocol_analysis+0x1ac>
    13c4:	2220      	movs	r2, #32
    13c6:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13c8:	615a      	str	r2, [r3, #20]
    13ca:	e597      	b.n	efc <usart_protocol_analysis+0x1ac>
    13cc:	2280      	movs	r2, #128	; 0x80
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13d0:	0212      	lsls	r2, r2, #8
    13d2:	615a      	str	r2, [r3, #20]
    13d4:	e6de      	b.n	1194 <usart_protocol_analysis+0x444>
    13d6:	2280      	movs	r2, #128	; 0x80
    13d8:	4b07      	ldr	r3, [pc, #28]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13da:	0212      	lsls	r2, r2, #8
    13dc:	615a      	str	r2, [r3, #20]
    13de:	e5b6      	b.n	f4e <usart_protocol_analysis+0x1fe>
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13e4:	0352      	lsls	r2, r2, #13
    13e6:	615a      	str	r2, [r3, #20]
    13e8:	e5b1      	b.n	f4e <usart_protocol_analysis+0x1fe>
    13ea:	2220      	movs	r2, #32
    13ec:	4b02      	ldr	r3, [pc, #8]	; (13f8 <usart_protocol_analysis+0x6a8>)
    13ee:	615a      	str	r2, [r3, #20]
    13f0:	e5ad      	b.n	f4e <usart_protocol_analysis+0x1fe>
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	41004480 	.word	0x41004480
    13f8:	41004400 	.word	0x41004400
    13fc:	20000234 	.word	0x20000234
    1400:	200000d8 	.word	0x200000d8
    1404:	20000000 	.word	0x20000000
    1408:	00002281 	.word	0x00002281
    140c:	20000040 	.word	0x20000040
    1410:	00000bed 	.word	0x00000bed
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1414:	2280      	movs	r2, #128	; 0x80
    1416:	4b08      	ldr	r3, [pc, #32]	; (1438 <usart_protocol_analysis+0x6e8>)
    1418:	0352      	lsls	r2, r2, #13
    141a:	619a      	str	r2, [r3, #24]
    141c:	e583      	b.n	f26 <usart_protocol_analysis+0x1d6>
    141e:	2220      	movs	r2, #32
    1420:	4b05      	ldr	r3, [pc, #20]	; (1438 <usart_protocol_analysis+0x6e8>)
    1422:	619a      	str	r2, [r3, #24]
    1424:	e57f      	b.n	f26 <usart_protocol_analysis+0x1d6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1426:	2280      	movs	r2, #128	; 0x80
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <usart_protocol_analysis+0x6e8>)
    142a:	0352      	lsls	r2, r2, #13
    142c:	615a      	str	r2, [r3, #20]
    142e:	e6b1      	b.n	1194 <usart_protocol_analysis+0x444>
    1430:	2220      	movs	r2, #32
    1432:	4b01      	ldr	r3, [pc, #4]	; (1438 <usart_protocol_analysis+0x6e8>)
    1434:	615a      	str	r2, [r3, #20]
    1436:	e6ad      	b.n	1194 <usart_protocol_analysis+0x444>
    1438:	41004400 	.word	0x41004400

0000143c <usart_2_i2c_mode>:
	return Init;
}


enum USART_FSM_STATUS usart_2_i2c_mode(void)
{
    143c:	b510      	push	{r4, lr}
	uint8_t rstn = 0;
	uint8_t i = 0;
	
	rstn = usart_2_iic_operation((uint8_t *)usart_rx_data);
    143e:	4c0f      	ldr	r4, [pc, #60]	; (147c <usart_2_i2c_mode+0x40>)
    1440:	4b0f      	ldr	r3, [pc, #60]	; (1480 <usart_2_i2c_mode+0x44>)
    1442:	1c20      	adds	r0, r4, #0
    1444:	4798      	blx	r3
	if(rstn == 0)	// ACK
    1446:	2800      	cmp	r0, #0
    1448:	d108      	bne.n	145c <usart_2_i2c_mode+0x20>
	{
		for(i = 1;i < 6;i++)
		{
			usart_rx_data[i] = 0;
		}
		usart_cmd_error = 0;
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <usart_2_i2c_mode+0x48>)
	rstn = usart_2_iic_operation((uint8_t *)usart_rx_data);
	if(rstn == 0)	// ACK
	{
		for(i = 1;i < 6;i++)
		{
			usart_rx_data[i] = 0;
    144c:	7060      	strb	r0, [r4, #1]
    144e:	70a0      	strb	r0, [r4, #2]
    1450:	70e0      	strb	r0, [r4, #3]
    1452:	7120      	strb	r0, [r4, #4]
    1454:	7160      	strb	r0, [r4, #5]
		}
		usart_cmd_error = 0;
    1456:	7018      	strb	r0, [r3, #0]
		return Feedback;
    1458:	3002      	adds	r0, #2
	if(rstn == 3)	// has send all data, no feedback
	{
		return Init;
	}
	return Feedback;
}
    145a:	bd10      	pop	{r4, pc}
			usart_rx_data[i] = 0;
		}
		usart_cmd_error = 0;
		return Feedback;
	}
	if(rstn == 1)	// error, no feedback
    145c:	2801      	cmp	r0, #1
    145e:	d00a      	beq.n	1476 <usart_2_i2c_mode+0x3a>
	{	
		return Init;
	}
	if(rstn == 2)	// sending, no clear data
    1460:	2802      	cmp	r0, #2
    1462:	d004      	beq.n	146e <usart_2_i2c_mode+0x32>
	}
	if(rstn == 3)	// has send all data, no feedback
	{
		return Init;
	}
	return Feedback;
    1464:	3803      	subs	r0, #3
    1466:	1e43      	subs	r3, r0, #1
    1468:	4198      	sbcs	r0, r3
    146a:	0040      	lsls	r0, r0, #1
    146c:	e7f5      	b.n	145a <usart_2_i2c_mode+0x1e>
	{	
		return Init;
	}
	if(rstn == 2)	// sending, no clear data
	{
		usart_cmd_error = usart_rx_data[6];
    146e:	79a2      	ldrb	r2, [r4, #6]
    1470:	4b04      	ldr	r3, [pc, #16]	; (1484 <usart_2_i2c_mode+0x48>)
    1472:	701a      	strb	r2, [r3, #0]
		return Feedback;
    1474:	e7f1      	b.n	145a <usart_2_i2c_mode+0x1e>
		usart_cmd_error = 0;
		return Feedback;
	}
	if(rstn == 1)	// error, no feedback
	{	
		return Init;
    1476:	2000      	movs	r0, #0
    1478:	e7ef      	b.n	145a <usart_2_i2c_mode+0x1e>
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	200000dc 	.word	0x200000dc
    1480:	00001499 	.word	0x00001499
    1484:	200000d9 	.word	0x200000d9

00001488 <usart_waiting>:
	}
	return Feedback;
}

enum USART_FSM_STATUS usart_waiting(void)
{
    1488:	b508      	push	{r3, lr}
	usart_2_iic_timeout();
    148a:	4b02      	ldr	r3, [pc, #8]	; (1494 <usart_waiting+0xc>)
    148c:	4798      	blx	r3
	return Init;
    148e:	2000      	movs	r0, #0
    1490:	bd08      	pop	{r3, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	00001689 	.word	0x00001689

00001498 <usart_2_iic_operation>:
 *  1: ERROR, Not feedback;
 *  2: Sending, Not clear data.
 *  3: Send End, Not feedback.
 */
uint8_t usart_2_iic_operation(uint8_t *p_rx_data)
{
    1498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    149a:	464f      	mov	r7, r9
    149c:	4646      	mov	r6, r8
	//static uint8_t fsm_status = 0;
	static uint8_t total_len = 0;
	uint8_t tem_len = 0;
	uint8_t i = 0;
	
	timer_usart_i2c_timeout = USART_I2C_TIMEOUT;
    149e:	22c8      	movs	r2, #200	; 0xc8
 *  1: ERROR, Not feedback;
 *  2: Sending, Not clear data.
 *  3: Send End, Not feedback.
 */
uint8_t usart_2_iic_operation(uint8_t *p_rx_data)
{
    14a0:	b4c0      	push	{r6, r7}
	uint8_t tem_len = 0;
	uint8_t i = 0;
	
	timer_usart_i2c_timeout = USART_I2C_TIMEOUT;
	
	switch(fsm_status)
    14a2:	4d6c      	ldr	r5, [pc, #432]	; (1654 <usart_2_iic_operation+0x1bc>)
 *  1: ERROR, Not feedback;
 *  2: Sending, Not clear data.
 *  3: Send End, Not feedback.
 */
uint8_t usart_2_iic_operation(uint8_t *p_rx_data)
{
    14a4:	1c04      	adds	r4, r0, #0
	//static uint8_t fsm_status = 0;
	static uint8_t total_len = 0;
	uint8_t tem_len = 0;
	uint8_t i = 0;
	
	timer_usart_i2c_timeout = USART_I2C_TIMEOUT;
    14a6:	4b6c      	ldr	r3, [pc, #432]	; (1658 <usart_2_iic_operation+0x1c0>)
	
	switch(fsm_status)
    14a8:	7828      	ldrb	r0, [r5, #0]
	//static uint8_t fsm_status = 0;
	static uint8_t total_len = 0;
	uint8_t tem_len = 0;
	uint8_t i = 0;
	
	timer_usart_i2c_timeout = USART_I2C_TIMEOUT;
    14aa:	701a      	strb	r2, [r3, #0]
	
	switch(fsm_status)
    14ac:	2801      	cmp	r0, #1
    14ae:	d100      	bne.n	14b2 <usart_2_iic_operation+0x1a>
    14b0:	e081      	b.n	15b6 <usart_2_iic_operation+0x11e>
    14b2:	2800      	cmp	r0, #0
    14b4:	d029      	beq.n	150a <usart_2_iic_operation+0x72>
    14b6:	2802      	cmp	r0, #2
    14b8:	d004      	beq.n	14c4 <usart_2_iic_operation+0x2c>
				{
					return 1;
				}
				return 0;
			}
			return 0;
    14ba:	2000      	movs	r0, #0
			break;
		default:
			break;
	}
	return 0;
}
    14bc:	bc0c      	pop	{r2, r3}
    14be:	4690      	mov	r8, r2
    14c0:	4699      	mov	r9, r3
    14c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return 0;
			}
			return 0;
		case 2:
			/* if all data have been send, jump to the initial state */
			if(!total_len)
    14c4:	4e65      	ldr	r6, [pc, #404]	; (165c <usart_2_iic_operation+0x1c4>)
    14c6:	7833      	ldrb	r3, [r6, #0]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d100      	bne.n	14ce <usart_2_iic_operation+0x36>
    14cc:	e0ac      	b.n	1628 <usart_2_iic_operation+0x190>
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
				return 3;// has send all data, no feedback
			}
			tem_len = min(total_len,6);
    14ce:	1c1a      	adds	r2, r3, #0
    14d0:	2b06      	cmp	r3, #6
    14d2:	d900      	bls.n	14d6 <usart_2_iic_operation+0x3e>
    14d4:	2206      	movs	r2, #6
		//return 1;
	//}
	for(i = 0;i < len;i++)
	{
		//*(buff+offset+i) = i2c_buff[buff_head+i];
		*(buff+offset+i) = i+10;
    14d6:	210a      	movs	r1, #10
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
				return 3;// has send all data, no feedback
			}
			tem_len = min(total_len,6);
    14d8:	b2d2      	uxtb	r2, r2
		//return 1;
	//}
	for(i = 0;i < len;i++)
	{
		//*(buff+offset+i) = i2c_buff[buff_head+i];
		*(buff+offset+i) = i+10;
    14da:	7061      	strb	r1, [r4, #1]
    14dc:	2a01      	cmp	r2, #1
    14de:	d011      	beq.n	1504 <usart_2_iic_operation+0x6c>
    14e0:	3101      	adds	r1, #1
    14e2:	70a1      	strb	r1, [r4, #2]
    14e4:	2a02      	cmp	r2, #2
    14e6:	d00d      	beq.n	1504 <usart_2_iic_operation+0x6c>
    14e8:	3101      	adds	r1, #1
    14ea:	70e1      	strb	r1, [r4, #3]
    14ec:	2a03      	cmp	r2, #3
    14ee:	d009      	beq.n	1504 <usart_2_iic_operation+0x6c>
    14f0:	3101      	adds	r1, #1
    14f2:	7121      	strb	r1, [r4, #4]
    14f4:	2a04      	cmp	r2, #4
    14f6:	d005      	beq.n	1504 <usart_2_iic_operation+0x6c>
    14f8:	3101      	adds	r1, #1
    14fa:	7161      	strb	r1, [r4, #5]
    14fc:	2a06      	cmp	r2, #6
    14fe:	d101      	bne.n	1504 <usart_2_iic_operation+0x6c>
    1500:	3101      	adds	r1, #1
    1502:	71a1      	strb	r1, [r4, #6]
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
				return 1;
			}
			total_len -= tem_len;
    1504:	1a9b      	subs	r3, r3, r2
    1506:	7033      	strb	r3, [r6, #0]
			return 2;
    1508:	e7d8      	b.n	14bc <usart_2_iic_operation+0x24>
	switch(fsm_status)
	{
		/* initial state, check it's read or write operation */
		case 0:
			/* re-arrange the rx info */
			op_info.rd_or_wr = *(p_rx_data+1) & 0x1;
    150a:	2101      	movs	r1, #1
    150c:	7862      	ldrb	r2, [r4, #1]
			op_info.address = (uint8_t)((*(p_rx_data+1))>>1);
			op_info.length = *(p_rx_data+3);
    150e:	78e7      	ldrb	r7, [r4, #3]
	switch(fsm_status)
	{
		/* initial state, check it's read or write operation */
		case 0:
			/* re-arrange the rx info */
			op_info.rd_or_wr = *(p_rx_data+1) & 0x1;
    1510:	4b53      	ldr	r3, [pc, #332]	; (1660 <usart_2_iic_operation+0x1c8>)
    1512:	4011      	ands	r1, r2
			op_info.address = (uint8_t)((*(p_rx_data+1))>>1);
    1514:	0852      	lsrs	r2, r2, #1
    1516:	705a      	strb	r2, [r3, #1]
	switch(fsm_status)
	{
		/* initial state, check it's read or write operation */
		case 0:
			/* re-arrange the rx info */
			op_info.rd_or_wr = *(p_rx_data+1) & 0x1;
    1518:	7019      	strb	r1, [r3, #0]
			op_info.address = (uint8_t)((*(p_rx_data+1))>>1);
			op_info.length = *(p_rx_data+3);
    151a:	70df      	strb	r7, [r3, #3]
	return 0;
}

static inline void config_packet(void)
{
	packet.address = op_info.address;
    151c:	4b51      	ldr	r3, [pc, #324]	; (1664 <usart_2_iic_operation+0x1cc>)
    151e:	801a      	strh	r2, [r3, #0]
	packet.data_length = op_info.length;
	packet.data = i2c_buff;
    1520:	4a51      	ldr	r2, [pc, #324]	; (1668 <usart_2_iic_operation+0x1d0>)
}

static inline void config_packet(void)
{
	packet.address = op_info.address;
	packet.data_length = op_info.length;
    1522:	805f      	strh	r7, [r3, #2]
	packet.data = i2c_buff;
    1524:	605a      	str	r2, [r3, #4]
	packet.high_speed = false;
    1526:	7258      	strb	r0, [r3, #9]
	packet.hs_master_code = 0x0;
    1528:	7298      	strb	r0, [r3, #10]
	packet.ten_bit_address = false;
    152a:	7218      	strb	r0, [r3, #8]
			/* write operation 
			 * 1. receive the first 3 bytes data to buff;
			 * 2. if total length is more than 3, then jump next status to receive the left data
			 * 3. else, send feedback directly
			 */
			if(op_info.rd_or_wr == I2C_WRITE)
    152c:	2900      	cmp	r1, #0
    152e:	d100      	bne.n	1532 <usart_2_iic_operation+0x9a>
    1530:	e086      	b.n	1640 <usart_2_iic_operation+0x1a8>
/*
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
    1532:	2200      	movs	r2, #0
    1534:	4b4d      	ldr	r3, [pc, #308]	; (166c <usart_2_iic_operation+0x1d4>)
			}
			/* read operation */
			else if(op_info.rd_or_wr == I2C_READ)
			{
				buff_reset();
				total_len = op_info.length;
    1536:	4e49      	ldr	r6, [pc, #292]	; (165c <usart_2_iic_operation+0x1c4>)
/*
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
    1538:	8018      	strh	r0, [r3, #0]
    153a:	4699      	mov	r9, r3
	buff_tail = 0;
    153c:	4b4c      	ldr	r3, [pc, #304]	; (1670 <usart_2_iic_operation+0x1d8>)
    153e:	70e2      	strb	r2, [r4, #3]
    1540:	8018      	strh	r0, [r3, #0]
    1542:	7122      	strb	r2, [r4, #4]
				/* clear the usart rx buff [1]~[5] to 0 */
				for(i = 1;i < 7;i++)
				{
					*(p_rx_data+i) = 0;
				}
				usart_set_tx_frame((uint8_t *)p_rx_data);
    1544:	1c20      	adds	r0, r4, #0
    1546:	7062      	strb	r2, [r4, #1]
    1548:	70a2      	strb	r2, [r4, #2]
    154a:	7162      	strb	r2, [r4, #5]
    154c:	71a2      	strb	r2, [r4, #6]
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
	buff_tail = 0;
    154e:	4698      	mov	r8, r3
				/* clear the usart rx buff [1]~[5] to 0 */
				for(i = 1;i < 7;i++)
				{
					*(p_rx_data+i) = 0;
				}
				usart_set_tx_frame((uint8_t *)p_rx_data);
    1550:	4b48      	ldr	r3, [pc, #288]	; (1674 <usart_2_iic_operation+0x1dc>)
			}
			/* read operation */
			else if(op_info.rd_or_wr == I2C_READ)
			{
				buff_reset();
				total_len = op_info.length;
    1552:	7037      	strb	r7, [r6, #0]
				/* clear the usart rx buff [1]~[5] to 0 */
				for(i = 1;i < 7;i++)
				{
					*(p_rx_data+i) = 0;
				}
				usart_set_tx_frame((uint8_t *)p_rx_data);
    1554:	4798      	blx	r3
				usart_send_data();
    1556:	4b48      	ldr	r3, [pc, #288]	; (1678 <usart_2_iic_operation+0x1e0>)
    1558:	4798      	blx	r3
				
				/* wait 10ms for the tx end */
				timer_delay_ms(10);
    155a:	200a      	movs	r0, #10
    155c:	4f47      	ldr	r7, [pc, #284]	; (167c <usart_2_iic_operation+0x1e4>)
    155e:	47b8      	blx	r7
				while(timer_delay_ms(0));
    1560:	2000      	movs	r0, #0
    1562:	47b8      	blx	r7
    1564:	2800      	cmp	r0, #0
    1566:	d1fb      	bne.n	1560 <usart_2_iic_operation+0xc8>
/*
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
    1568:	464b      	mov	r3, r9
    156a:	8018      	strh	r0, [r3, #0]
	buff_tail = 0;
    156c:	4643      	mov	r3, r8
				while(timer_delay_ms(0));
				
				/* then, begin to send valid data */
				buff_reset();
				
				tem_len = min(total_len,5);
    156e:	7832      	ldrb	r2, [r6, #0]
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
	buff_tail = 0;
    1570:	8018      	strh	r0, [r3, #0]
				while(timer_delay_ms(0));
				
				/* then, begin to send valid data */
				buff_reset();
				
				tem_len = min(total_len,5);
    1572:	1c13      	adds	r3, r2, #0
    1574:	2a05      	cmp	r2, #5
    1576:	d86b      	bhi.n	1650 <usart_2_iic_operation+0x1b8>
    1578:	b2db      	uxtb	r3, r3
				*(p_rx_data+1) = total_len;
    157a:	7062      	strb	r2, [r4, #1]
	uint8_t i = 0;
	//if(buff_get_valid_length() < len)
	//{
		//return 1;
	//}
	for(i = 0;i < len;i++)
    157c:	2b00      	cmp	r3, #0
    157e:	d011      	beq.n	15a4 <usart_2_iic_operation+0x10c>
	{
		//*(buff+offset+i) = i2c_buff[buff_head+i];
		*(buff+offset+i) = i+10;
    1580:	210a      	movs	r1, #10
    1582:	70a1      	strb	r1, [r4, #2]
    1584:	2b01      	cmp	r3, #1
    1586:	d00d      	beq.n	15a4 <usart_2_iic_operation+0x10c>
    1588:	3101      	adds	r1, #1
    158a:	70e1      	strb	r1, [r4, #3]
    158c:	2b02      	cmp	r3, #2
    158e:	d009      	beq.n	15a4 <usart_2_iic_operation+0x10c>
    1590:	3101      	adds	r1, #1
    1592:	7121      	strb	r1, [r4, #4]
    1594:	2b03      	cmp	r3, #3
    1596:	d005      	beq.n	15a4 <usart_2_iic_operation+0x10c>
    1598:	3101      	adds	r1, #1
    159a:	7161      	strb	r1, [r4, #5]
    159c:	2b05      	cmp	r3, #5
    159e:	d101      	bne.n	15a4 <usart_2_iic_operation+0x10c>
    15a0:	3101      	adds	r1, #1
    15a2:	71a1      	strb	r1, [r4, #6]
				*(p_rx_data+1) = total_len;
				if(read_buff((uint8_t*)p_rx_data,2,tem_len))
				{
					return 1;
				}
				total_len -= tem_len;
    15a4:	1ad3      	subs	r3, r2, r3
    15a6:	7033      	strb	r3, [r6, #0]
				fsm_status = 2;
    15a8:	2302      	movs	r3, #2
				usart_2_iic_ing = 1;
    15aa:	2201      	movs	r2, #1
				if(read_buff((uint8_t*)p_rx_data,2,tem_len))
				{
					return 1;
				}
				total_len -= tem_len;
				fsm_status = 2;
    15ac:	702b      	strb	r3, [r5, #0]
				usart_2_iic_ing = 1;
    15ae:	4b34      	ldr	r3, [pc, #208]	; (1680 <usart_2_iic_operation+0x1e8>)
				return 2; // sending, no clear
    15b0:	2002      	movs	r0, #2
				{
					return 1;
				}
				total_len -= tem_len;
				fsm_status = 2;
				usart_2_iic_ing = 1;
    15b2:	701a      	strb	r2, [r3, #0]
				return 2; // sending, no clear
    15b4:	e782      	b.n	14bc <usart_2_iic_operation+0x24>
			}
			break;
		/* receive all write data from host */
		case 1:
			/* fill the left bytes data to buff */
			tem_len = min(total_len,6);
    15b6:	4e29      	ldr	r6, [pc, #164]	; (165c <usart_2_iic_operation+0x1c4>)
    15b8:	7837      	ldrb	r7, [r6, #0]
    15ba:	1c3a      	adds	r2, r7, #0
    15bc:	2f06      	cmp	r7, #6
    15be:	d83d      	bhi.n	163c <usart_2_iic_operation+0x1a4>
    15c0:	b2d3      	uxtb	r3, r2
/*
 * return the empty length of buff
 */
static uint8_t buff_get_empty_length(void)
{
	return (uint8_t)((uint16_t)DATA_LENGTH - buff_tail + buff_head);
    15c2:	4a2b      	ldr	r2, [pc, #172]	; (1670 <usart_2_iic_operation+0x1d8>)
    15c4:	8811      	ldrh	r1, [r2, #0]
    15c6:	4a29      	ldr	r2, [pc, #164]	; (166c <usart_2_iic_operation+0x1d4>)
    15c8:	8812      	ldrh	r2, [r2, #0]
    15ca:	1a52      	subs	r2, r2, r1
//}

static uint8_t write_buff(uint8_t *buff, uint8_t offset, uint8_t len)
{
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
    15cc:	b2d2      	uxtb	r2, r2
    15ce:	4293      	cmp	r3, r2
    15d0:	d82f      	bhi.n	1632 <usart_2_iic_operation+0x19a>
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15d2:	2b00      	cmp	r3, #0
    15d4:	d017      	beq.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    15d6:	7860      	ldrb	r0, [r4, #1]
    15d8:	4a23      	ldr	r2, [pc, #140]	; (1668 <usart_2_iic_operation+0x1d0>)
    15da:	5450      	strb	r0, [r2, r1]
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15dc:	2b01      	cmp	r3, #1
    15de:	d012      	beq.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    15e0:	78a0      	ldrb	r0, [r4, #2]
    15e2:	1851      	adds	r1, r2, r1
    15e4:	7048      	strb	r0, [r1, #1]
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15e6:	2b02      	cmp	r3, #2
    15e8:	d00d      	beq.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    15ea:	78e2      	ldrb	r2, [r4, #3]
    15ec:	708a      	strb	r2, [r1, #2]
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15ee:	2b03      	cmp	r3, #3
    15f0:	d009      	beq.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    15f2:	7922      	ldrb	r2, [r4, #4]
    15f4:	70ca      	strb	r2, [r1, #3]
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15f6:	2b04      	cmp	r3, #4
    15f8:	d005      	beq.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    15fa:	7962      	ldrb	r2, [r4, #5]
    15fc:	710a      	strb	r2, [r1, #4]
	uint8_t i = 0;
	if(buff_get_empty_length() < len)
	{
		return 1;
	}
	for(i = 0;i < len;i++)
    15fe:	2b06      	cmp	r3, #6
    1600:	d101      	bne.n	1606 <usart_2_iic_operation+0x16e>
	{
		i2c_buff[buff_tail+i] = *(buff+offset+i);
    1602:	79a2      	ldrb	r2, [r4, #6]
    1604:	714a      	strb	r2, [r1, #5]
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
				return 1;
			}
			total_len -= tem_len;
    1606:	1afb      	subs	r3, r7, r3
    1608:	b2db      	uxtb	r3, r3
    160a:	7033      	strb	r3, [r6, #0]
			/* check whether all data has been filled into fifo */
			if(!total_len)
    160c:	2b00      	cmp	r3, #0
    160e:	d000      	beq.n	1612 <usart_2_iic_operation+0x17a>
    1610:	e753      	b.n	14ba <usart_2_iic_operation+0x22>
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
    1612:	4a1b      	ldr	r2, [pc, #108]	; (1680 <usart_2_iic_operation+0x1e8>)
			}
			total_len -= tem_len;
			/* check whether all data has been filled into fifo */
			if(!total_len)
			{
				fsm_status = 0;
    1614:	702b      	strb	r3, [r5, #0]
				usart_2_iic_ing = 0;
    1616:	7013      	strb	r3, [r2, #0]
				if(i2c_master_write(packet))
    1618:	4b12      	ldr	r3, [pc, #72]	; (1664 <usart_2_iic_operation+0x1cc>)
    161a:	cb07      	ldmia	r3!, {r0, r1, r2}
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <usart_2_iic_operation+0x1ec>)
    161e:	4798      	blx	r3
    1620:	1e43      	subs	r3, r0, #1
    1622:	4198      	sbcs	r0, r3
				total_len = op_info.length;
				buff_reset();
				tem_len = min(total_len,3);
				if(write_buff((uint8_t *)p_rx_data,4,3))
				{
					return 1;
    1624:	b2c0      	uxtb	r0, r0
    1626:	e749      	b.n	14bc <usart_2_iic_operation+0x24>
		case 2:
			/* if all data have been send, jump to the initial state */
			if(!total_len)
			{
				fsm_status = 0;
				usart_2_iic_ing = 0;
    1628:	4a15      	ldr	r2, [pc, #84]	; (1680 <usart_2_iic_operation+0x1e8>)
			return 0;
		case 2:
			/* if all data have been send, jump to the initial state */
			if(!total_len)
			{
				fsm_status = 0;
    162a:	702b      	strb	r3, [r5, #0]
				usart_2_iic_ing = 0;
    162c:	7013      	strb	r3, [r2, #0]
				return 3;// has send all data, no feedback
    162e:	2003      	movs	r0, #3
    1630:	e744      	b.n	14bc <usart_2_iic_operation+0x24>
		case 1:
			/* fill the left bytes data to buff */
			tem_len = min(total_len,6);
			if(write_buff((uint8_t *)p_rx_data,1,tem_len))
			{
				fsm_status = 0;
    1632:	2300      	movs	r3, #0
				usart_2_iic_ing = 0;
    1634:	4a12      	ldr	r2, [pc, #72]	; (1680 <usart_2_iic_operation+0x1e8>)
		case 1:
			/* fill the left bytes data to buff */
			tem_len = min(total_len,6);
			if(write_buff((uint8_t *)p_rx_data,1,tem_len))
			{
				fsm_status = 0;
    1636:	702b      	strb	r3, [r5, #0]
				usart_2_iic_ing = 0;
    1638:	7013      	strb	r3, [r2, #0]
				return 1;
    163a:	e73f      	b.n	14bc <usart_2_iic_operation+0x24>
			}
			break;
		/* receive all write data from host */
		case 1:
			/* fill the left bytes data to buff */
			tem_len = min(total_len,6);
    163c:	2206      	movs	r2, #6
    163e:	e7bf      	b.n	15c0 <usart_2_iic_operation+0x128>
			 * 3. else, send feedback directly
			 */
			if(op_info.rd_or_wr == I2C_WRITE)
			{
				/* begin to receive the first 3 bytes */
				total_len = op_info.length;
    1640:	4b06      	ldr	r3, [pc, #24]	; (165c <usart_2_iic_operation+0x1c4>)
    1642:	701f      	strb	r7, [r3, #0]
/*
 * reset buff
 */
static void buff_reset(void)
{
	buff_head = 0;
    1644:	4b09      	ldr	r3, [pc, #36]	; (166c <usart_2_iic_operation+0x1d4>)
    1646:	8018      	strh	r0, [r3, #0]
	buff_tail = 0;
    1648:	4b09      	ldr	r3, [pc, #36]	; (1670 <usart_2_iic_operation+0x1d8>)
    164a:	8018      	strh	r0, [r3, #0]
				total_len = op_info.length;
				buff_reset();
				tem_len = min(total_len,3);
				if(write_buff((uint8_t *)p_rx_data,4,3))
				{
					return 1;
    164c:	2001      	movs	r0, #1
    164e:	e735      	b.n	14bc <usart_2_iic_operation+0x24>
				while(timer_delay_ms(0));
				
				/* then, begin to send valid data */
				buff_reset();
				
				tem_len = min(total_len,5);
    1650:	2305      	movs	r3, #5
    1652:	e791      	b.n	1578 <usart_2_iic_operation+0xe0>
    1654:	200001e8 	.word	0x200001e8
    1658:	200001fa 	.word	0x200001fa
    165c:	200001e5 	.word	0x200001e5
    1660:	20000278 	.word	0x20000278
    1664:	2000026c 	.word	0x2000026c
    1668:	200000e4 	.word	0x200000e4
    166c:	200001ea 	.word	0x200001ea
    1670:	200001e6 	.word	0x200001e6
    1674:	000018a5 	.word	0x000018a5
    1678:	000018d9 	.word	0x000018d9
    167c:	00002281 	.word	0x00002281
    1680:	200001e4 	.word	0x200001e4
    1684:	00000cad 	.word	0x00000cad

00001688 <usart_2_iic_timeout>:
	return 0;
}

void usart_2_iic_timeout(void)
{
	if(!usart_2_iic_ing)
    1688:	4b05      	ldr	r3, [pc, #20]	; (16a0 <usart_2_iic_timeout+0x18>)
    168a:	781a      	ldrb	r2, [r3, #0]
    168c:	2a00      	cmp	r2, #0
    168e:	d006      	beq.n	169e <usart_2_iic_timeout+0x16>
	{
		return;
	}
	if(!timer_usart_i2c_timeout)
    1690:	4a04      	ldr	r2, [pc, #16]	; (16a4 <usart_2_iic_timeout+0x1c>)
    1692:	7812      	ldrb	r2, [r2, #0]
    1694:	2a00      	cmp	r2, #0
    1696:	d102      	bne.n	169e <usart_2_iic_timeout+0x16>
	{
		fsm_status = 0;
    1698:	4903      	ldr	r1, [pc, #12]	; (16a8 <usart_2_iic_timeout+0x20>)
		usart_2_iic_ing = 0;
    169a:	701a      	strb	r2, [r3, #0]
	{
		return;
	}
	if(!timer_usart_i2c_timeout)
	{
		fsm_status = 0;
    169c:	700a      	strb	r2, [r1, #0]
		usart_2_iic_ing = 0;
	}
    169e:	4770      	bx	lr
    16a0:	200001e4 	.word	0x200001e4
    16a4:	200001fa 	.word	0x200001fa
    16a8:	200001e8 	.word	0x200001e8

000016ac <usart_read_callback>:
	
	usart_enable(&usart_instance);
}

static void usart_read_callback(struct usart_module *const usart_module)
{
    16ac:	b530      	push	{r4, r5, lr}
	static uint8_t rx_data_seq = 0;
	static uint8_t check_sum = 0;
	uint8_t rx_data = 0;
	
	if(usart_status != Init)
    16ae:	4925      	ldr	r1, [pc, #148]	; (1744 <usart_read_callback+0x98>)
    16b0:	780b      	ldrb	r3, [r1, #0]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d113      	bne.n	16de <usart_read_callback+0x32>
	{
		return;
	}
	
	rx_data = (uint8_t)usart_rx_byte;
    16b6:	4b24      	ldr	r3, [pc, #144]	; (1748 <usart_read_callback+0x9c>)
	switch(rx_data_seq)
    16b8:	4824      	ldr	r0, [pc, #144]	; (174c <usart_read_callback+0xa0>)
	if(usart_status != Init)
	{
		return;
	}
	
	rx_data = (uint8_t)usart_rx_byte;
    16ba:	781c      	ldrb	r4, [r3, #0]
	switch(rx_data_seq)
    16bc:	7803      	ldrb	r3, [r0, #0]
    16be:	2b11      	cmp	r3, #17
    16c0:	d833      	bhi.n	172a <usart_read_callback+0x7e>
    16c2:	4d23      	ldr	r5, [pc, #140]	; (1750 <usart_read_callback+0xa4>)
    16c4:	009a      	lsls	r2, r3, #2
    16c6:	58aa      	ldr	r2, [r5, r2]
    16c8:	4697      	mov	pc, r2
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
			if(rx_data == USART_PROTOCOL_HEADER)
    16ca:	2cfe      	cmp	r4, #254	; 0xfe
    16cc:	d032      	beq.n	1734 <usart_read_callback+0x88>
				usart_rx_frame[0] = USART_PROTOCOL_HEADER;
				rx_data_seq = 1;
			}
			else
			{
				check_sum += rx_data;
    16ce:	4921      	ldr	r1, [pc, #132]	; (1754 <usart_read_callback+0xa8>)
    16d0:	780a      	ldrb	r2, [r1, #0]
    16d2:	18a2      	adds	r2, r4, r2
    16d4:	700a      	strb	r2, [r1, #0]
				usart_rx_frame[rx_data_seq] = rx_data;
    16d6:	4a20      	ldr	r2, [pc, #128]	; (1758 <usart_read_callback+0xac>)
    16d8:	54d4      	strb	r4, [r2, r3]
				rx_data_seq++;
    16da:	3301      	adds	r3, #1
    16dc:	7003      	strb	r3, [r0, #0]
			rx_data = 0;
			check_sum = 0;
			rx_data_seq = 0;
			break;
	}
}
    16de:	bd30      	pop	{r4, r5, pc}
				usart_rx_frame[rx_data_seq] = rx_data;
				rx_data_seq++;
			}
			break;
		case 7:
			if(check_sum == rx_data)
    16e0:	4a1c      	ldr	r2, [pc, #112]	; (1754 <usart_read_callback+0xa8>)
    16e2:	7813      	ldrb	r3, [r2, #0]
    16e4:	42a3      	cmp	r3, r4
    16e6:	d01b      	beq.n	1720 <usart_read_callback+0x74>
			{
				usart_status = Analysis;
				led_blink_en = 1;
			}
			rx_data = 0;
			check_sum = 0;
    16e8:	2300      	movs	r3, #0
    16ea:	7013      	strb	r3, [r2, #0]
			rx_data_seq = 0;
    16ec:	7003      	strb	r3, [r0, #0]
    16ee:	e7f6      	b.n	16de <usart_read_callback+0x32>
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
			check_sum += rx_data;
    16f0:	4918      	ldr	r1, [pc, #96]	; (1754 <usart_read_callback+0xa8>)
    16f2:	780a      	ldrb	r2, [r1, #0]
    16f4:	18a2      	adds	r2, r4, r2
    16f6:	700a      	strb	r2, [r1, #0]
			usart_rx_frame[rx_data_seq-10] = rx_data;
    16f8:	4a17      	ldr	r2, [pc, #92]	; (1758 <usart_read_callback+0xac>)
    16fa:	18d2      	adds	r2, r2, r3
    16fc:	3a0a      	subs	r2, #10
			rx_data_seq++;
    16fe:	3301      	adds	r3, #1
		case 13:
		case 14:
		case 15:
		case 16:
			check_sum += rx_data;
			usart_rx_frame[rx_data_seq-10] = rx_data;
    1700:	7014      	strb	r4, [r2, #0]
			rx_data_seq++;
    1702:	7003      	strb	r3, [r0, #0]
    1704:	e7eb      	b.n	16de <usart_read_callback+0x32>
	
	rx_data = (uint8_t)usart_rx_byte;
	switch(rx_data_seq)
	{
		case 0:
			if(rx_data == USART_PROTOCOL_HEADER)
    1706:	2cfe      	cmp	r4, #254	; 0xfe
    1708:	d014      	beq.n	1734 <usart_read_callback+0x88>
			{
				check_sum = rx_data;
				usart_rx_frame[0] = USART_PROTOCOL_HEADER;
				rx_data_seq = 1;
			}
			else if(rx_data == USART_PROTOCOL_HEADER_FW_DWLD || rx_data == USART_PROTOCOL_HEADER_USART_I2C)
    170a:	22fd      	movs	r2, #253	; 0xfd
    170c:	1da3      	adds	r3, r4, #6
    170e:	4213      	tst	r3, r2
    1710:	d1e5      	bne.n	16de <usart_read_callback+0x32>
			{
				check_sum = rx_data;
    1712:	4b10      	ldr	r3, [pc, #64]	; (1754 <usart_read_callback+0xa8>)
    1714:	701c      	strb	r4, [r3, #0]
				usart_rx_frame[0] = rx_data;
    1716:	4b10      	ldr	r3, [pc, #64]	; (1758 <usart_read_callback+0xac>)
    1718:	701c      	strb	r4, [r3, #0]
				rx_data_seq = 11;
    171a:	230b      	movs	r3, #11
    171c:	7003      	strb	r3, [r0, #0]
    171e:	e7de      	b.n	16de <usart_read_callback+0x32>
			}
			break;
		case 7:
			if(check_sum == rx_data)
			{
				usart_status = Analysis;
    1720:	2301      	movs	r3, #1
    1722:	700b      	strb	r3, [r1, #0]
				led_blink_en = 1;
    1724:	490d      	ldr	r1, [pc, #52]	; (175c <usart_read_callback+0xb0>)
    1726:	700b      	strb	r3, [r1, #0]
    1728:	e7de      	b.n	16e8 <usart_read_callback+0x3c>
			check_sum = 0;
			rx_data_seq = 0;
			break;
		default:
			rx_data = 0;
			check_sum = 0;
    172a:	2300      	movs	r3, #0
    172c:	4a09      	ldr	r2, [pc, #36]	; (1754 <usart_read_callback+0xa8>)
			rx_data_seq = 0;
    172e:	7003      	strb	r3, [r0, #0]
			check_sum = 0;
			rx_data_seq = 0;
			break;
		default:
			rx_data = 0;
			check_sum = 0;
    1730:	7013      	strb	r3, [r2, #0]
    1732:	e7d4      	b.n	16de <usart_read_callback+0x32>
	switch(rx_data_seq)
	{
		case 0:
			if(rx_data == USART_PROTOCOL_HEADER)
			{
				check_sum = rx_data;
    1734:	23fe      	movs	r3, #254	; 0xfe
    1736:	4a07      	ldr	r2, [pc, #28]	; (1754 <usart_read_callback+0xa8>)
    1738:	7013      	strb	r3, [r2, #0]
				usart_rx_frame[0] = USART_PROTOCOL_HEADER;
    173a:	4a07      	ldr	r2, [pc, #28]	; (1758 <usart_read_callback+0xac>)
    173c:	7013      	strb	r3, [r2, #0]
				rx_data_seq = 1;
    173e:	3bfd      	subs	r3, #253	; 0xfd
    1740:	7003      	strb	r3, [r0, #0]
    1742:	e7cc      	b.n	16de <usart_read_callback+0x32>
    1744:	20000235 	.word	0x20000235
    1748:	200001ee 	.word	0x200001ee
    174c:	200001f0 	.word	0x200001f0
    1750:	0000388c 	.word	0x0000388c
    1754:	200001ec 	.word	0x200001ec
    1758:	2000000c 	.word	0x2000000c
    175c:	200001f7 	.word	0x200001f7

00001760 <usart_link_init>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1760:	2380      	movs	r3, #128	; 0x80
	system_pinmux_pin_set_config(MCU_USB_UART_TX,&configure_pinmux);
	system_pinmux_pin_set_config(MCU_USB_UART_RX,&configure_pinmux);
}

void usart_link_init(void)
{
    1762:	b570      	push	{r4, r5, r6, lr}
    1764:	05db      	lsls	r3, r3, #23
    1766:	b08c      	sub	sp, #48	; 0x30
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
    1768:	4669      	mov	r1, sp
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    176a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    176c:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
    176e:	22ff      	movs	r2, #255	; 0xff
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1770:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
    1772:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1774:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
    1776:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1778:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    177a:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    177c:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    177e:	774b      	strb	r3, [r1, #29]
{
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	
	config_usart.baudrate		=	9600;
	config_usart.mux_setting	=	USART_RX_3_TX_2_XCK_3;
    1780:	23c4      	movs	r3, #196	; 0xc4
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
    1782:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
    1784:	2296      	movs	r2, #150	; 0x96
    1786:	039b      	lsls	r3, r3, #14
    1788:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0	=	PINMUX_UNUSED;
    178a:	2301      	movs	r3, #1
    178c:	0192      	lsls	r2, r2, #6
    178e:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    1790:	2201      	movs	r2, #1
    1792:	425b      	negs	r3, r3
    1794:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1	=	PINMUX_UNUSED;
    1796:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2	=	MCU_USB_UART_TX;
    1798:	3337      	adds	r3, #55	; 0x37
    179a:	930a      	str	r3, [sp, #40]	; 0x28
    179c:	4d1e      	ldr	r5, [pc, #120]	; (1818 <usart_link_init+0xb8>)
	config_usart.pinmux_pad3	=	MCU_USB_UART_RX;
    179e:	3301      	adds	r3, #1
    17a0:	4c1e      	ldr	r4, [pc, #120]	; (181c <usart_link_init+0xbc>)
    17a2:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    17a4:	754a      	strb	r2, [r1, #21]
    17a6:	930b      	str	r3, [sp, #44]	; 0x2c
	config_usart.data_order		=	USART_DATAORDER_LSB;
	config_usart.character_size =	USART_CHARACTER_SIZE_8BIT;
	config_usart.transfer_mode	=	USART_TRANSFER_ASYNCHRONOUSLY;
	config_usart.generator_source = GCLK_GENERATOR_0;
	
	while(usart_init(&usart_instance,USART_MODULE,&config_usart) != STATUS_OK)
    17a8:	1c28      	adds	r0, r5, #0
    17aa:	491d      	ldr	r1, [pc, #116]	; (1820 <usart_link_init+0xc0>)
    17ac:	466a      	mov	r2, sp
    17ae:	47a0      	blx	r4
    17b0:	2800      	cmp	r0, #0
    17b2:	d1f9      	bne.n	17a8 <usart_link_init+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17b4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    17b6:	4b1b      	ldr	r3, [pc, #108]	; (1824 <usart_link_init+0xc4>)
    17b8:	1c30      	adds	r0, r6, #0
    17ba:	4798      	blx	r3
    17bc:	231f      	movs	r3, #31
    17be:	4018      	ands	r0, r3
    17c0:	3b1e      	subs	r3, #30
    17c2:	4083      	lsls	r3, r0
    17c4:	1c18      	adds	r0, r3, #0
    17c6:	4b18      	ldr	r3, [pc, #96]	; (1828 <usart_link_init+0xc8>)
    17c8:	6018      	str	r0, [r3, #0]
    17ca:	682b      	ldr	r3, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    17cc:	8a1c      	ldrh	r4, [r3, #16]
    17ce:	0be4      	lsrs	r4, r4, #15
    17d0:	03e4      	lsls	r4, r4, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    17d2:	b2a4      	uxth	r4, r4
    17d4:	2c00      	cmp	r4, #0
    17d6:	d1f9      	bne.n	17cc <usart_link_init+0x6c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    17d8:	2302      	movs	r3, #2
    17da:	6832      	ldr	r2, [r6, #0]
}

static void configure_usart_callback(void)
{
	//usart_register_callback(&USART_INSTANCE,usart_write_callback,USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,usart_read_callback,USART_CALLBACK_BUFFER_RECEIVED);
    17dc:	1c28      	adds	r0, r5, #0
    17de:	4313      	orrs	r3, r2
    17e0:	6033      	str	r3, [r6, #0]
    17e2:	4912      	ldr	r1, [pc, #72]	; (182c <usart_link_init+0xcc>)
    17e4:	2201      	movs	r2, #1
    17e6:	4b12      	ldr	r3, [pc, #72]	; (1830 <usart_link_init+0xd0>)
    17e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    17ea:	2221      	movs	r2, #33	; 0x21
    17ec:	2302      	movs	r3, #2
    17ee:	5ca9      	ldrb	r1, [r5, r2]
	struct system_pinmux_config configure_pinmux;
	system_pinmux_get_config_defaults(&configure_pinmux);
	
	configure_pinmux.mux_position = PINMUX_USART;
	
	system_pinmux_pin_set_config(MCU_USB_UART_TX,&configure_pinmux);
    17f0:	2036      	movs	r0, #54	; 0x36
    17f2:	430b      	orrs	r3, r1
    17f4:	54ab      	strb	r3, [r5, r2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17f6:	466b      	mov	r3, sp
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17f8:	466a      	mov	r2, sp
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17fa:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17fc:	2301      	movs	r3, #1
    17fe:	7093      	strb	r3, [r2, #2]
static void configure_pinmux_usart(void)
{
	struct system_pinmux_config configure_pinmux;
	system_pinmux_get_config_defaults(&configure_pinmux);
	
	configure_pinmux.mux_position = PINMUX_USART;
    1800:	2303      	movs	r3, #3
	config->powersave    = false;
    1802:	70d4      	strb	r4, [r2, #3]
	
	system_pinmux_pin_set_config(MCU_USB_UART_TX,&configure_pinmux);
    1804:	4669      	mov	r1, sp
    1806:	4c0b      	ldr	r4, [pc, #44]	; (1834 <usart_link_init+0xd4>)
static void configure_pinmux_usart(void)
{
	struct system_pinmux_config configure_pinmux;
	system_pinmux_get_config_defaults(&configure_pinmux);
	
	configure_pinmux.mux_position = PINMUX_USART;
    1808:	7013      	strb	r3, [r2, #0]
	
	system_pinmux_pin_set_config(MCU_USB_UART_TX,&configure_pinmux);
    180a:	47a0      	blx	r4
	system_pinmux_pin_set_config(MCU_USB_UART_RX,&configure_pinmux);
    180c:	2037      	movs	r0, #55	; 0x37
    180e:	4669      	mov	r1, sp
    1810:	47a0      	blx	r4
void usart_link_init(void)
{
	configure_usart();
	configure_usart_callback();
	configure_pinmux_usart();
}
    1812:	b00c      	add	sp, #48	; 0x30
    1814:	bd70      	pop	{r4, r5, r6, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	2000027c 	.word	0x2000027c
    181c:	0000299d 	.word	0x0000299d
    1820:	42001c00 	.word	0x42001c00
    1824:	00002911 	.word	0x00002911
    1828:	e000e100 	.word	0xe000e100
    182c:	000016ad 	.word	0x000016ad
    1830:	00002bf9 	.word	0x00002bf9
    1834:	0000328d 	.word	0x0000328d

00001838 <usart_read_data>:

void usart_read_data(void)
{
    1838:	b508      	push	{r3, lr}
	usart_read_job(&usart_instance,(uint16_t *)(&usart_rx_byte));
    183a:	4802      	ldr	r0, [pc, #8]	; (1844 <usart_read_data+0xc>)
    183c:	4902      	ldr	r1, [pc, #8]	; (1848 <usart_read_data+0x10>)
    183e:	4b03      	ldr	r3, [pc, #12]	; (184c <usart_read_data+0x14>)
    1840:	4798      	blx	r3
}
    1842:	bd08      	pop	{r3, pc}
    1844:	2000027c 	.word	0x2000027c
    1848:	200001ee 	.word	0x200001ee
    184c:	00002c11 	.word	0x00002c11

00001850 <usart_get_rx_frame>:

void usart_get_rx_frame(uint8_t *p_dst)
{
    1850:	b510      	push	{r4, lr}
    1852:	0783      	lsls	r3, r0, #30
    1854:	d112      	bne.n	187c <usart_get_rx_frame+0x2c>
    1856:	2300      	movs	r3, #0
    1858:	1c1c      	adds	r4, r3, #0
    185a:	4a11      	ldr	r2, [pc, #68]	; (18a0 <usart_get_rx_frame+0x50>)
    185c:	1d01      	adds	r1, r0, #4
    185e:	428a      	cmp	r2, r1
    1860:	415c      	adcs	r4, r3
    1862:	1c21      	adds	r1, r4, #0
    1864:	1d14      	adds	r4, r2, #4
    1866:	42a0      	cmp	r0, r4
    1868:	415b      	adcs	r3, r3
    186a:	430b      	orrs	r3, r1
    186c:	b2db      	uxtb	r3, r3
    186e:	2b00      	cmp	r3, #0
    1870:	d005      	beq.n	187e <usart_get_rx_frame+0x2e>
	uint8_t i = 0;
	for(i = 0;i < USART_FRAME_LENGTH;i++)
	{
		*(p_dst+i) = usart_rx_frame[i];
    1872:	6813      	ldr	r3, [r2, #0]
    1874:	6003      	str	r3, [r0, #0]
    1876:	6853      	ldr	r3, [r2, #4]
    1878:	6043      	str	r3, [r0, #4]
	}
}
    187a:	bd10      	pop	{r4, pc}
    187c:	4a08      	ldr	r2, [pc, #32]	; (18a0 <usart_get_rx_frame+0x50>)
void usart_get_rx_frame(uint8_t *p_dst)
{
	uint8_t i = 0;
	for(i = 0;i < USART_FRAME_LENGTH;i++)
	{
		*(p_dst+i) = usart_rx_frame[i];
    187e:	7813      	ldrb	r3, [r2, #0]
    1880:	7003      	strb	r3, [r0, #0]
    1882:	7853      	ldrb	r3, [r2, #1]
    1884:	7043      	strb	r3, [r0, #1]
    1886:	7893      	ldrb	r3, [r2, #2]
    1888:	7083      	strb	r3, [r0, #2]
    188a:	78d3      	ldrb	r3, [r2, #3]
    188c:	70c3      	strb	r3, [r0, #3]
    188e:	7913      	ldrb	r3, [r2, #4]
    1890:	7103      	strb	r3, [r0, #4]
    1892:	7953      	ldrb	r3, [r2, #5]
    1894:	7143      	strb	r3, [r0, #5]
    1896:	7993      	ldrb	r3, [r2, #6]
    1898:	7183      	strb	r3, [r0, #6]
    189a:	79d3      	ldrb	r3, [r2, #7]
    189c:	71c3      	strb	r3, [r0, #7]
    189e:	e7ec      	b.n	187a <usart_get_rx_frame+0x2a>
    18a0:	2000000c 	.word	0x2000000c

000018a4 <usart_set_tx_frame>:
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18a4:	7801      	ldrb	r1, [r0, #0]
    18a6:	4b0b      	ldr	r3, [pc, #44]	; (18d4 <usart_set_tx_frame+0x30>)
	{
		*(p_dst+i) = usart_rx_frame[i];
	}
}
void usart_set_tx_frame(const uint8_t *p_src)
{
    18a8:	b510      	push	{r4, lr}
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18aa:	7019      	strb	r1, [r3, #0]
    18ac:	7842      	ldrb	r2, [r0, #1]
    18ae:	705a      	strb	r2, [r3, #1]
    18b0:	7884      	ldrb	r4, [r0, #2]
    18b2:	709c      	strb	r4, [r3, #2]
    18b4:	18a2      	adds	r2, r4, r2
		check_sum += usart_tx_frame[i];
    18b6:	188a      	adds	r2, r1, r2
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18b8:	78c1      	ldrb	r1, [r0, #3]
    18ba:	70d9      	strb	r1, [r3, #3]
		check_sum += usart_tx_frame[i];
    18bc:	1852      	adds	r2, r2, r1
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18be:	7901      	ldrb	r1, [r0, #4]
    18c0:	7119      	strb	r1, [r3, #4]
		check_sum += usart_tx_frame[i];
    18c2:	1852      	adds	r2, r2, r1
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18c4:	7941      	ldrb	r1, [r0, #5]
    18c6:	7159      	strb	r1, [r3, #5]
		check_sum += usart_tx_frame[i];
    18c8:	1852      	adds	r2, r2, r1
	uint8_t i = 0;
	uint8_t check_sum = 0;
	
	for(i = 0;i < (USART_FRAME_LENGTH-1);i++)
	{
		usart_tx_frame[i] = *(p_src+i);
    18ca:	7981      	ldrb	r1, [r0, #6]
    18cc:	7199      	strb	r1, [r3, #6]
		check_sum += usart_tx_frame[i];
    18ce:	1851      	adds	r1, r2, r1
	}
	usart_tx_frame[USART_FRAME_LENGTH-1] = check_sum;
    18d0:	71d9      	strb	r1, [r3, #7]
}
    18d2:	bd10      	pop	{r4, pc}
    18d4:	20000004 	.word	0x20000004

000018d8 <usart_send_data>:

void usart_send_data(void)
{
    18d8:	b508      	push	{r3, lr}
	usart_write_buffer_job(&usart_instance,(uint8_t *)usart_tx_frame,USART_FRAME_LENGTH);
    18da:	4803      	ldr	r0, [pc, #12]	; (18e8 <usart_send_data+0x10>)
    18dc:	4903      	ldr	r1, [pc, #12]	; (18ec <usart_send_data+0x14>)
    18de:	2208      	movs	r2, #8
    18e0:	4b03      	ldr	r3, [pc, #12]	; (18f0 <usart_send_data+0x18>)
    18e2:	4798      	blx	r3
}
    18e4:	bd08      	pop	{r3, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	2000027c 	.word	0x2000027c
    18ec:	20000004 	.word	0x20000004
    18f0:	00002c4d 	.word	0x00002c4d

000018f4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18f4:	1c93      	adds	r3, r2, #2
    18f6:	009b      	lsls	r3, r3, #2
    18f8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    18fa:	2a02      	cmp	r2, #2
    18fc:	d009      	beq.n	1912 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    18fe:	2a03      	cmp	r2, #3
    1900:	d00c      	beq.n	191c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1902:	2301      	movs	r3, #1
    1904:	4093      	lsls	r3, r2
    1906:	1c1a      	adds	r2, r3, #0
    1908:	7e03      	ldrb	r3, [r0, #24]
    190a:	431a      	orrs	r2, r3
    190c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    190e:	2000      	movs	r0, #0
    1910:	4770      	bx	lr
	/* Register callback function */
	module->callback[callback_type] = callback_func;

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1912:	2310      	movs	r3, #16
    1914:	7e02      	ldrb	r2, [r0, #24]
    1916:	4313      	orrs	r3, r2
    1918:	7603      	strb	r3, [r0, #24]
    191a:	e7f8      	b.n	190e <tc_register_callback+0x1a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    191c:	2320      	movs	r3, #32
    191e:	7e02      	ldrb	r2, [r0, #24]
    1920:	4313      	orrs	r3, r2
    1922:	7603      	strb	r3, [r0, #24]
    1924:	e7f3      	b.n	190e <tc_register_callback+0x1a>
    1926:	46c0      	nop			; (mov r8, r8)

00001928 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1928:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    192a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    192c:	4b15      	ldr	r3, [pc, #84]	; (1984 <TC0_Handler+0x5c>)
    192e:	681d      	ldr	r5, [r3, #0]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1930:	682b      	ldr	r3, [r5, #0]
    1932:	7e2c      	ldrb	r4, [r5, #24]
    1934:	7b9b      	ldrb	r3, [r3, #14]
    1936:	401c      	ands	r4, r3
    1938:	7e6b      	ldrb	r3, [r5, #25]
    193a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    193c:	4226      	tst	r6, r4
    193e:	d11a      	bne.n	1976 <TC0_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1940:	2602      	movs	r6, #2
    1942:	4226      	tst	r6, r4
    1944:	d111      	bne.n	196a <TC0_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1946:	2610      	movs	r6, #16
    1948:	4226      	tst	r6, r4
    194a:	d108      	bne.n	195e <TC0_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    194c:	2620      	movs	r6, #32
    194e:	4226      	tst	r6, r4
    1950:	d004      	beq.n	195c <TC0_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1952:	696b      	ldr	r3, [r5, #20]
    1954:	1c28      	adds	r0, r5, #0
    1956:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1958:	682b      	ldr	r3, [r5, #0]
    195a:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    195c:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    195e:	692b      	ldr	r3, [r5, #16]
    1960:	1c28      	adds	r0, r5, #0
    1962:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1964:	682b      	ldr	r3, [r5, #0]
    1966:	739e      	strb	r6, [r3, #14]
    1968:	e7f0      	b.n	194c <TC0_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    196a:	68eb      	ldr	r3, [r5, #12]
    196c:	1c28      	adds	r0, r5, #0
    196e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1970:	682b      	ldr	r3, [r5, #0]
    1972:	739e      	strb	r6, [r3, #14]
    1974:	e7e7      	b.n	1946 <TC0_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1976:	68ab      	ldr	r3, [r5, #8]
    1978:	1c28      	adds	r0, r5, #0
    197a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    197c:	682b      	ldr	r3, [r5, #0]
    197e:	739e      	strb	r6, [r3, #14]
    1980:	e7de      	b.n	1940 <TC0_Handler+0x18>
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	200002a0 	.word	0x200002a0

00001988 <TC1_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1988:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    198a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    198c:	4b15      	ldr	r3, [pc, #84]	; (19e4 <TC1_Handler+0x5c>)
    198e:	685d      	ldr	r5, [r3, #4]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1990:	682b      	ldr	r3, [r5, #0]
    1992:	7e2c      	ldrb	r4, [r5, #24]
    1994:	7b9b      	ldrb	r3, [r3, #14]
    1996:	401c      	ands	r4, r3
    1998:	7e6b      	ldrb	r3, [r5, #25]
    199a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    199c:	4226      	tst	r6, r4
    199e:	d11a      	bne.n	19d6 <TC1_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    19a0:	2602      	movs	r6, #2
    19a2:	4226      	tst	r6, r4
    19a4:	d111      	bne.n	19ca <TC1_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    19a6:	2610      	movs	r6, #16
    19a8:	4226      	tst	r6, r4
    19aa:	d108      	bne.n	19be <TC1_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    19ac:	2620      	movs	r6, #32
    19ae:	4226      	tst	r6, r4
    19b0:	d004      	beq.n	19bc <TC1_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    19b2:	696b      	ldr	r3, [r5, #20]
    19b4:	1c28      	adds	r0, r5, #0
    19b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    19b8:	682b      	ldr	r3, [r5, #0]
    19ba:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    19bc:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    19be:	692b      	ldr	r3, [r5, #16]
    19c0:	1c28      	adds	r0, r5, #0
    19c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    19c4:	682b      	ldr	r3, [r5, #0]
    19c6:	739e      	strb	r6, [r3, #14]
    19c8:	e7f0      	b.n	19ac <TC1_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    19ca:	68eb      	ldr	r3, [r5, #12]
    19cc:	1c28      	adds	r0, r5, #0
    19ce:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    19d0:	682b      	ldr	r3, [r5, #0]
    19d2:	739e      	strb	r6, [r3, #14]
    19d4:	e7e7      	b.n	19a6 <TC1_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    19d6:	68ab      	ldr	r3, [r5, #8]
    19d8:	1c28      	adds	r0, r5, #0
    19da:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    19dc:	682b      	ldr	r3, [r5, #0]
    19de:	739e      	strb	r6, [r3, #14]
    19e0:	e7de      	b.n	19a0 <TC1_Handler+0x18>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	200002a0 	.word	0x200002a0

000019e8 <TC2_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    19e8:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    19ea:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    19ec:	4b15      	ldr	r3, [pc, #84]	; (1a44 <TC2_Handler+0x5c>)
    19ee:	689d      	ldr	r5, [r3, #8]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    19f0:	682b      	ldr	r3, [r5, #0]
    19f2:	7e2c      	ldrb	r4, [r5, #24]
    19f4:	7b9b      	ldrb	r3, [r3, #14]
    19f6:	401c      	ands	r4, r3
    19f8:	7e6b      	ldrb	r3, [r5, #25]
    19fa:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    19fc:	4226      	tst	r6, r4
    19fe:	d11a      	bne.n	1a36 <TC2_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a00:	2602      	movs	r6, #2
    1a02:	4226      	tst	r6, r4
    1a04:	d111      	bne.n	1a2a <TC2_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a06:	2610      	movs	r6, #16
    1a08:	4226      	tst	r6, r4
    1a0a:	d108      	bne.n	1a1e <TC2_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a0c:	2620      	movs	r6, #32
    1a0e:	4226      	tst	r6, r4
    1a10:	d004      	beq.n	1a1c <TC2_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a12:	696b      	ldr	r3, [r5, #20]
    1a14:	1c28      	adds	r0, r5, #0
    1a16:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a18:	682b      	ldr	r3, [r5, #0]
    1a1a:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a1e:	692b      	ldr	r3, [r5, #16]
    1a20:	1c28      	adds	r0, r5, #0
    1a22:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a24:	682b      	ldr	r3, [r5, #0]
    1a26:	739e      	strb	r6, [r3, #14]
    1a28:	e7f0      	b.n	1a0c <TC2_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a2a:	68eb      	ldr	r3, [r5, #12]
    1a2c:	1c28      	adds	r0, r5, #0
    1a2e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a30:	682b      	ldr	r3, [r5, #0]
    1a32:	739e      	strb	r6, [r3, #14]
    1a34:	e7e7      	b.n	1a06 <TC2_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a36:	68ab      	ldr	r3, [r5, #8]
    1a38:	1c28      	adds	r0, r5, #0
    1a3a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a3c:	682b      	ldr	r3, [r5, #0]
    1a3e:	739e      	strb	r6, [r3, #14]
    1a40:	e7de      	b.n	1a00 <TC2_Handler+0x18>
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	200002a0 	.word	0x200002a0

00001a48 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1a48:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a4a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1a4c:	4b15      	ldr	r3, [pc, #84]	; (1aa4 <TC3_Handler+0x5c>)
    1a4e:	68dd      	ldr	r5, [r3, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1a50:	682b      	ldr	r3, [r5, #0]
    1a52:	7e2c      	ldrb	r4, [r5, #24]
    1a54:	7b9b      	ldrb	r3, [r3, #14]
    1a56:	401c      	ands	r4, r3
    1a58:	7e6b      	ldrb	r3, [r5, #25]
    1a5a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a5c:	4226      	tst	r6, r4
    1a5e:	d11a      	bne.n	1a96 <TC3_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a60:	2602      	movs	r6, #2
    1a62:	4226      	tst	r6, r4
    1a64:	d111      	bne.n	1a8a <TC3_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a66:	2610      	movs	r6, #16
    1a68:	4226      	tst	r6, r4
    1a6a:	d108      	bne.n	1a7e <TC3_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a6c:	2620      	movs	r6, #32
    1a6e:	4226      	tst	r6, r4
    1a70:	d004      	beq.n	1a7c <TC3_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a72:	696b      	ldr	r3, [r5, #20]
    1a74:	1c28      	adds	r0, r5, #0
    1a76:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a78:	682b      	ldr	r3, [r5, #0]
    1a7a:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1a7c:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a7e:	692b      	ldr	r3, [r5, #16]
    1a80:	1c28      	adds	r0, r5, #0
    1a82:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a84:	682b      	ldr	r3, [r5, #0]
    1a86:	739e      	strb	r6, [r3, #14]
    1a88:	e7f0      	b.n	1a6c <TC3_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a8a:	68eb      	ldr	r3, [r5, #12]
    1a8c:	1c28      	adds	r0, r5, #0
    1a8e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a90:	682b      	ldr	r3, [r5, #0]
    1a92:	739e      	strb	r6, [r3, #14]
    1a94:	e7e7      	b.n	1a66 <TC3_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a96:	68ab      	ldr	r3, [r5, #8]
    1a98:	1c28      	adds	r0, r5, #0
    1a9a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a9c:	682b      	ldr	r3, [r5, #0]
    1a9e:	739e      	strb	r6, [r3, #14]
    1aa0:	e7de      	b.n	1a60 <TC3_Handler+0x18>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	200002a0 	.word	0x200002a0

00001aa8 <TC4_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1aa8:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1aaa:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1aac:	4b15      	ldr	r3, [pc, #84]	; (1b04 <TC4_Handler+0x5c>)
    1aae:	691d      	ldr	r5, [r3, #16]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ab0:	682b      	ldr	r3, [r5, #0]
    1ab2:	7e2c      	ldrb	r4, [r5, #24]
    1ab4:	7b9b      	ldrb	r3, [r3, #14]
    1ab6:	401c      	ands	r4, r3
    1ab8:	7e6b      	ldrb	r3, [r5, #25]
    1aba:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1abc:	4226      	tst	r6, r4
    1abe:	d11a      	bne.n	1af6 <TC4_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1ac0:	2602      	movs	r6, #2
    1ac2:	4226      	tst	r6, r4
    1ac4:	d111      	bne.n	1aea <TC4_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1ac6:	2610      	movs	r6, #16
    1ac8:	4226      	tst	r6, r4
    1aca:	d108      	bne.n	1ade <TC4_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1acc:	2620      	movs	r6, #32
    1ace:	4226      	tst	r6, r4
    1ad0:	d004      	beq.n	1adc <TC4_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1ad2:	696b      	ldr	r3, [r5, #20]
    1ad4:	1c28      	adds	r0, r5, #0
    1ad6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1ad8:	682b      	ldr	r3, [r5, #0]
    1ada:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1adc:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1ade:	692b      	ldr	r3, [r5, #16]
    1ae0:	1c28      	adds	r0, r5, #0
    1ae2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ae4:	682b      	ldr	r3, [r5, #0]
    1ae6:	739e      	strb	r6, [r3, #14]
    1ae8:	e7f0      	b.n	1acc <TC4_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1aea:	68eb      	ldr	r3, [r5, #12]
    1aec:	1c28      	adds	r0, r5, #0
    1aee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1af0:	682b      	ldr	r3, [r5, #0]
    1af2:	739e      	strb	r6, [r3, #14]
    1af4:	e7e7      	b.n	1ac6 <TC4_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1af6:	68ab      	ldr	r3, [r5, #8]
    1af8:	1c28      	adds	r0, r5, #0
    1afa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1afc:	682b      	ldr	r3, [r5, #0]
    1afe:	739e      	strb	r6, [r3, #14]
    1b00:	e7de      	b.n	1ac0 <TC4_Handler+0x18>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	200002a0 	.word	0x200002a0

00001b08 <TC5_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b08:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1b0a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1b0c:	4b15      	ldr	r3, [pc, #84]	; (1b64 <TC5_Handler+0x5c>)
    1b0e:	695d      	ldr	r5, [r3, #20]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1b10:	682b      	ldr	r3, [r5, #0]
    1b12:	7e2c      	ldrb	r4, [r5, #24]
    1b14:	7b9b      	ldrb	r3, [r3, #14]
    1b16:	401c      	ands	r4, r3
    1b18:	7e6b      	ldrb	r3, [r5, #25]
    1b1a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1b1c:	4226      	tst	r6, r4
    1b1e:	d11a      	bne.n	1b56 <TC5_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1b20:	2602      	movs	r6, #2
    1b22:	4226      	tst	r6, r4
    1b24:	d111      	bne.n	1b4a <TC5_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1b26:	2610      	movs	r6, #16
    1b28:	4226      	tst	r6, r4
    1b2a:	d108      	bne.n	1b3e <TC5_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1b2c:	2620      	movs	r6, #32
    1b2e:	4226      	tst	r6, r4
    1b30:	d004      	beq.n	1b3c <TC5_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1b32:	696b      	ldr	r3, [r5, #20]
    1b34:	1c28      	adds	r0, r5, #0
    1b36:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1b38:	682b      	ldr	r3, [r5, #0]
    1b3a:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b3c:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1b3e:	692b      	ldr	r3, [r5, #16]
    1b40:	1c28      	adds	r0, r5, #0
    1b42:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1b44:	682b      	ldr	r3, [r5, #0]
    1b46:	739e      	strb	r6, [r3, #14]
    1b48:	e7f0      	b.n	1b2c <TC5_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1b4a:	68eb      	ldr	r3, [r5, #12]
    1b4c:	1c28      	adds	r0, r5, #0
    1b4e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1b50:	682b      	ldr	r3, [r5, #0]
    1b52:	739e      	strb	r6, [r3, #14]
    1b54:	e7e7      	b.n	1b26 <TC5_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1b56:	68ab      	ldr	r3, [r5, #8]
    1b58:	1c28      	adds	r0, r5, #0
    1b5a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1b5c:	682b      	ldr	r3, [r5, #0]
    1b5e:	739e      	strb	r6, [r3, #14]
    1b60:	e7de      	b.n	1b20 <TC5_Handler+0x18>
    1b62:	46c0      	nop			; (mov r8, r8)
    1b64:	200002a0 	.word	0x200002a0

00001b68 <TC6_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b68:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1b6a:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1b6c:	4b15      	ldr	r3, [pc, #84]	; (1bc4 <TC6_Handler+0x5c>)
    1b6e:	699d      	ldr	r5, [r3, #24]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1b70:	682b      	ldr	r3, [r5, #0]
    1b72:	7e2c      	ldrb	r4, [r5, #24]
    1b74:	7b9b      	ldrb	r3, [r3, #14]
    1b76:	401c      	ands	r4, r3
    1b78:	7e6b      	ldrb	r3, [r5, #25]
    1b7a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1b7c:	4226      	tst	r6, r4
    1b7e:	d11a      	bne.n	1bb6 <TC6_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1b80:	2602      	movs	r6, #2
    1b82:	4226      	tst	r6, r4
    1b84:	d111      	bne.n	1baa <TC6_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1b86:	2610      	movs	r6, #16
    1b88:	4226      	tst	r6, r4
    1b8a:	d108      	bne.n	1b9e <TC6_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1b8c:	2620      	movs	r6, #32
    1b8e:	4226      	tst	r6, r4
    1b90:	d004      	beq.n	1b9c <TC6_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1b92:	696b      	ldr	r3, [r5, #20]
    1b94:	1c28      	adds	r0, r5, #0
    1b96:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1b98:	682b      	ldr	r3, [r5, #0]
    1b9a:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1b9e:	692b      	ldr	r3, [r5, #16]
    1ba0:	1c28      	adds	r0, r5, #0
    1ba2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ba4:	682b      	ldr	r3, [r5, #0]
    1ba6:	739e      	strb	r6, [r3, #14]
    1ba8:	e7f0      	b.n	1b8c <TC6_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1baa:	68eb      	ldr	r3, [r5, #12]
    1bac:	1c28      	adds	r0, r5, #0
    1bae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1bb0:	682b      	ldr	r3, [r5, #0]
    1bb2:	739e      	strb	r6, [r3, #14]
    1bb4:	e7e7      	b.n	1b86 <TC6_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1bb6:	68ab      	ldr	r3, [r5, #8]
    1bb8:	1c28      	adds	r0, r5, #0
    1bba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1bbc:	682b      	ldr	r3, [r5, #0]
    1bbe:	739e      	strb	r6, [r3, #14]
    1bc0:	e7de      	b.n	1b80 <TC6_Handler+0x18>
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	200002a0 	.word	0x200002a0

00001bc8 <TC7_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1bc8:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1bca:	2601      	movs	r6, #1
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1bcc:	4b15      	ldr	r3, [pc, #84]	; (1c24 <TC7_Handler+0x5c>)
    1bce:	69dd      	ldr	r5, [r3, #28]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1bd0:	682b      	ldr	r3, [r5, #0]
    1bd2:	7e2c      	ldrb	r4, [r5, #24]
    1bd4:	7b9b      	ldrb	r3, [r3, #14]
    1bd6:	401c      	ands	r4, r3
    1bd8:	7e6b      	ldrb	r3, [r5, #25]
    1bda:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1bdc:	4226      	tst	r6, r4
    1bde:	d11a      	bne.n	1c16 <TC7_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1be0:	2602      	movs	r6, #2
    1be2:	4226      	tst	r6, r4
    1be4:	d111      	bne.n	1c0a <TC7_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1be6:	2610      	movs	r6, #16
    1be8:	4226      	tst	r6, r4
    1bea:	d108      	bne.n	1bfe <TC7_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1bec:	2620      	movs	r6, #32
    1bee:	4226      	tst	r6, r4
    1bf0:	d004      	beq.n	1bfc <TC7_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1bf2:	696b      	ldr	r3, [r5, #20]
    1bf4:	1c28      	adds	r0, r5, #0
    1bf6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1bf8:	682b      	ldr	r3, [r5, #0]
    1bfa:	739e      	strb	r6, [r3, #14]
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1bfc:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1bfe:	692b      	ldr	r3, [r5, #16]
    1c00:	1c28      	adds	r0, r5, #0
    1c02:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c04:	682b      	ldr	r3, [r5, #0]
    1c06:	739e      	strb	r6, [r3, #14]
    1c08:	e7f0      	b.n	1bec <TC7_Handler+0x24>
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c0a:	68eb      	ldr	r3, [r5, #12]
    1c0c:	1c28      	adds	r0, r5, #0
    1c0e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c10:	682b      	ldr	r3, [r5, #0]
    1c12:	739e      	strb	r6, [r3, #14]
    1c14:	e7e7      	b.n	1be6 <TC7_Handler+0x1e>
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c16:	68ab      	ldr	r3, [r5, #8]
    1c18:	1c28      	adds	r0, r5, #0
    1c1a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c1c:	682b      	ldr	r3, [r5, #0]
    1c1e:	739e      	strb	r6, [r3, #14]
    1c20:	e7de      	b.n	1be0 <TC7_Handler+0x18>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	200002a0 	.word	0x200002a0

00001c28 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	b088      	sub	sp, #32
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1c2c:	4669      	mov	r1, sp
    1c2e:	4b1d      	ldr	r3, [pc, #116]	; (1ca4 <_tc_get_inst_index+0x7c>)
    1c30:	cb70      	ldmia	r3!, {r4, r5, r6}
    1c32:	c170      	stmia	r1!, {r4, r5, r6}
    1c34:	cb70      	ldmia	r3!, {r4, r5, r6}
    1c36:	c170      	stmia	r1!, {r4, r5, r6}
    1c38:	cb30      	ldmia	r3!, {r4, r5}
    1c3a:	c130      	stmia	r1!, {r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1c3c:	9b00      	ldr	r3, [sp, #0]
    1c3e:	4283      	cmp	r3, r0
    1c40:	d018      	beq.n	1c74 <_tc_get_inst_index+0x4c>
    1c42:	9b01      	ldr	r3, [sp, #4]
    1c44:	4283      	cmp	r3, r0
    1c46:	d018      	beq.n	1c7a <_tc_get_inst_index+0x52>
    1c48:	9b02      	ldr	r3, [sp, #8]
    1c4a:	4283      	cmp	r3, r0
    1c4c:	d018      	beq.n	1c80 <_tc_get_inst_index+0x58>
    1c4e:	9b03      	ldr	r3, [sp, #12]
    1c50:	4283      	cmp	r3, r0
    1c52:	d018      	beq.n	1c86 <_tc_get_inst_index+0x5e>
    1c54:	9b04      	ldr	r3, [sp, #16]
    1c56:	4283      	cmp	r3, r0
    1c58:	d018      	beq.n	1c8c <_tc_get_inst_index+0x64>
    1c5a:	9b05      	ldr	r3, [sp, #20]
    1c5c:	4283      	cmp	r3, r0
    1c5e:	d018      	beq.n	1c92 <_tc_get_inst_index+0x6a>
    1c60:	9b06      	ldr	r3, [sp, #24]
    1c62:	4283      	cmp	r3, r0
    1c64:	d018      	beq.n	1c98 <_tc_get_inst_index+0x70>
    1c66:	9a07      	ldr	r2, [sp, #28]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1c68:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1c6a:	4282      	cmp	r2, r0
    1c6c:	d017      	beq.n	1c9e <_tc_get_inst_index+0x76>
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1c6e:	1c18      	adds	r0, r3, #0
    1c70:	b008      	add	sp, #32
    1c72:	bd70      	pop	{r4, r5, r6, pc}
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c74:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1c76:	b2db      	uxtb	r3, r3
    1c78:	e7f9      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c7a:	2301      	movs	r3, #1
		if (hw == tc_modules[i]) {
			return i;
    1c7c:	b2db      	uxtb	r3, r3
    1c7e:	e7f6      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c80:	2302      	movs	r3, #2
		if (hw == tc_modules[i]) {
			return i;
    1c82:	b2db      	uxtb	r3, r3
    1c84:	e7f3      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c86:	2303      	movs	r3, #3
		if (hw == tc_modules[i]) {
			return i;
    1c88:	b2db      	uxtb	r3, r3
    1c8a:	e7f0      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c8c:	2304      	movs	r3, #4
		if (hw == tc_modules[i]) {
			return i;
    1c8e:	b2db      	uxtb	r3, r3
    1c90:	e7ed      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c92:	2305      	movs	r3, #5
		if (hw == tc_modules[i]) {
			return i;
    1c94:	b2db      	uxtb	r3, r3
    1c96:	e7ea      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c98:	2306      	movs	r3, #6
		if (hw == tc_modules[i]) {
			return i;
    1c9a:	b2db      	uxtb	r3, r3
    1c9c:	e7e7      	b.n	1c6e <_tc_get_inst_index+0x46>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c9e:	3307      	adds	r3, #7
		if (hw == tc_modules[i]) {
			return i;
    1ca0:	b2db      	uxtb	r3, r3
    1ca2:	e7e4      	b.n	1c6e <_tc_get_inst_index+0x46>
    1ca4:	000038d4 	.word	0x000038d4

00001ca8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1caa:	465f      	mov	r7, fp
    1cac:	464d      	mov	r5, r9
    1cae:	4656      	mov	r6, sl
    1cb0:	4644      	mov	r4, r8
    1cb2:	b4f0      	push	{r4, r5, r6, r7}
    1cb4:	b08d      	sub	sp, #52	; 0x34
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cb6:	ac04      	add	r4, sp, #16
    1cb8:	1c23      	adds	r3, r4, #0
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1cba:	4691      	mov	r9, r2
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cbc:	4ab4      	ldr	r2, [pc, #720]	; (1f90 <tc_init+0x2e8>)
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1cbe:	1c06      	adds	r6, r0, #0
    1cc0:	1c0d      	adds	r5, r1, #0
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cc2:	ca83      	ldmia	r2!, {r0, r1, r7}
    1cc4:	c383      	stmia	r3!, {r0, r1, r7}
    1cc6:	ca83      	ldmia	r2!, {r0, r1, r7}
    1cc8:	c383      	stmia	r3!, {r0, r1, r7}
    1cca:	ca03      	ldmia	r2!, {r0, r1}
    1ccc:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1cce:	9b04      	ldr	r3, [sp, #16]
    1cd0:	429d      	cmp	r5, r3
    1cd2:	d100      	bne.n	1cd6 <tc_init+0x2e>
    1cd4:	e123      	b.n	1f1e <tc_init+0x276>
    1cd6:	6863      	ldr	r3, [r4, #4]
    1cd8:	429d      	cmp	r5, r3
    1cda:	d100      	bne.n	1cde <tc_init+0x36>
    1cdc:	e124      	b.n	1f28 <tc_init+0x280>
    1cde:	68a3      	ldr	r3, [r4, #8]
    1ce0:	429d      	cmp	r5, r3
    1ce2:	d100      	bne.n	1ce6 <tc_init+0x3e>
    1ce4:	e122      	b.n	1f2c <tc_init+0x284>
    1ce6:	68e3      	ldr	r3, [r4, #12]
    1ce8:	429d      	cmp	r5, r3
    1cea:	d100      	bne.n	1cee <tc_init+0x46>
    1cec:	e120      	b.n	1f30 <tc_init+0x288>
    1cee:	6923      	ldr	r3, [r4, #16]
    1cf0:	429d      	cmp	r5, r3
    1cf2:	d100      	bne.n	1cf6 <tc_init+0x4e>
    1cf4:	e11e      	b.n	1f34 <tc_init+0x28c>
    1cf6:	6963      	ldr	r3, [r4, #20]
    1cf8:	429d      	cmp	r5, r3
    1cfa:	d100      	bne.n	1cfe <tc_init+0x56>
    1cfc:	e11c      	b.n	1f38 <tc_init+0x290>
    1cfe:	69a3      	ldr	r3, [r4, #24]
    1d00:	429d      	cmp	r5, r3
    1d02:	d100      	bne.n	1d06 <tc_init+0x5e>
    1d04:	e11a      	b.n	1f3c <tc_init+0x294>
    1d06:	2300      	movs	r3, #0
    1d08:	469a      	mov	sl, r3
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d0a:	469b      	mov	fp, r3
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d0c:	69e3      	ldr	r3, [r4, #28]
    1d0e:	429d      	cmp	r5, r3
    1d10:	d100      	bne.n	1d14 <tc_init+0x6c>
    1d12:	e115      	b.n	1f40 <tc_init+0x298>
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1d14:	499e      	ldr	r1, [pc, #632]	; (1f90 <tc_init+0x2e8>)
    1d16:	4b9f      	ldr	r3, [pc, #636]	; (1f94 <tc_init+0x2ec>)
    1d18:	3120      	adds	r1, #32
    1d1a:	2208      	movs	r2, #8
    1d1c:	a802      	add	r0, sp, #8
    1d1e:	4698      	mov	r8, r3
    1d20:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1d22:	499b      	ldr	r1, [pc, #620]	; (1f90 <tc_init+0x2e8>)
    1d24:	2210      	movs	r2, #16
    1d26:	3128      	adds	r1, #40	; 0x28
    1d28:	1c20      	adds	r0, r4, #0
    1d2a:	47c0      	blx	r8
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d2c:	2300      	movs	r3, #0
    1d2e:	60b3      	str	r3, [r6, #8]
    1d30:	60f3      	str	r3, [r6, #12]
    1d32:	6133      	str	r3, [r6, #16]
    1d34:	6173      	str	r3, [r6, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d36:	7633      	strb	r3, [r6, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d38:	7673      	strb	r3, [r6, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d3a:	4653      	mov	r3, sl
    1d3c:	4a96      	ldr	r2, [pc, #600]	; (1f98 <tc_init+0x2f0>)
    1d3e:	009b      	lsls	r3, r3, #2
    1d40:	509e      	str	r6, [r3, r2]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d42:	464b      	mov	r3, r9
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d44:	6035      	str	r5, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d46:	789b      	ldrb	r3, [r3, #2]
    1d48:	2b08      	cmp	r3, #8
    1d4a:	d00c      	beq.n	1d66 <tc_init+0xbe>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d4c:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d4e:	882b      	ldrh	r3, [r5, #0]
    1d50:	2201      	movs	r2, #1
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d52:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d54:	07db      	lsls	r3, r3, #31
    1d56:	d50b      	bpl.n	1d70 <tc_init+0xc8>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1d58:	b00d      	add	sp, #52	; 0x34
    1d5a:	bc3c      	pop	{r2, r3, r4, r5}
    1d5c:	4690      	mov	r8, r2
    1d5e:	4699      	mov	r9, r3
    1d60:	46a2      	mov	sl, r4
    1d62:	46ab      	mov	fp, r5
    1d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d66:	465a      	mov	r2, fp
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d68:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d6a:	07d2      	lsls	r2, r2, #31
    1d6c:	d4f4      	bmi.n	1d58 <tc_init+0xb0>
    1d6e:	e7ed      	b.n	1d4c <tc_init+0xa4>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d70:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d72:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d74:	06db      	lsls	r3, r3, #27
    1d76:	d4ef      	bmi.n	1d58 <tc_init+0xb0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d78:	2102      	movs	r1, #2
    1d7a:	882b      	ldrh	r3, [r5, #0]
    1d7c:	400b      	ands	r3, r1
    1d7e:	d1eb      	bne.n	1d58 <tc_init+0xb0>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1d80:	4649      	mov	r1, r9
    1d82:	7c09      	ldrb	r1, [r1, #16]
    1d84:	2900      	cmp	r1, #0
    1d86:	d000      	beq.n	1d8a <tc_init+0xe2>
    1d88:	e0ee      	b.n	1f68 <tc_init+0x2c0>
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1d8a:	464b      	mov	r3, r9
    1d8c:	7f1b      	ldrb	r3, [r3, #28]
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d000      	beq.n	1d94 <tc_init+0xec>
    1d92:	e0da      	b.n	1f4a <tc_init+0x2a2>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1d94:	4651      	mov	r1, sl
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1d96:	4a81      	ldr	r2, [pc, #516]	; (1f9c <tc_init+0x2f4>)
    1d98:	0049      	lsls	r1, r1, #1
    1d9a:	6a13      	ldr	r3, [r2, #32]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d9c:	5a61      	ldrh	r1, [r4, r1]
    1d9e:	430b      	orrs	r3, r1
    1da0:	6213      	str	r3, [r2, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1da2:	464b      	mov	r3, r9
    1da4:	789b      	ldrb	r3, [r3, #2]
    1da6:	2b08      	cmp	r3, #8
    1da8:	d100      	bne.n	1dac <tc_init+0x104>
    1daa:	e0e9      	b.n	1f80 <tc_init+0x2d8>
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1dac:	464b      	mov	r3, r9
    1dae:	466a      	mov	r2, sp
    1db0:	781b      	ldrb	r3, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1db2:	2108      	movs	r1, #8
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1db4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1db6:	466b      	mov	r3, sp
    1db8:	4652      	mov	r2, sl
    1dba:	185b      	adds	r3, r3, r1
    1dbc:	5c9c      	ldrb	r4, [r3, r2]
    1dbe:	4669      	mov	r1, sp
    1dc0:	1c20      	adds	r0, r4, #0
    1dc2:	4b77      	ldr	r3, [pc, #476]	; (1fa0 <tc_init+0x2f8>)
    1dc4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1dc6:	1c20      	adds	r0, r4, #0
    1dc8:	4b76      	ldr	r3, [pc, #472]	; (1fa4 <tc_init+0x2fc>)
    1dca:	4798      	blx	r3
    1dcc:	464b      	mov	r3, r9

	/* Set ctrla register */
	ctrla_tmp =
    1dce:	464a      	mov	r2, r9
    1dd0:	8898      	ldrh	r0, [r3, #4]
    1dd2:	891b      	ldrh	r3, [r3, #8]
    1dd4:	4303      	orrs	r3, r0
    1dd6:	7990      	ldrb	r0, [r2, #6]
    1dd8:	7892      	ldrb	r2, [r2, #2]
    1dda:	4310      	orrs	r0, r2
    1ddc:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1dde:	464b      	mov	r3, r9
    1de0:	785b      	ldrb	r3, [r3, #1]
    1de2:	2b00      	cmp	r3, #0
    1de4:	d002      	beq.n	1dec <tc_init+0x144>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1de6:	2380      	movs	r3, #128	; 0x80
    1de8:	011b      	lsls	r3, r3, #4
    1dea:	4318      	orrs	r0, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dec:	227f      	movs	r2, #127	; 0x7f
    1dee:	6831      	ldr	r1, [r6, #0]
    1df0:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1df2:	4393      	bics	r3, r2
    1df4:	d1fc      	bne.n	1df0 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;

	/* Set ctrlb register */
	if (config->oneshot) {
    1df6:	464b      	mov	r3, r9

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1df8:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1dfa:	7b5b      	ldrb	r3, [r3, #13]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d100      	bne.n	1e02 <tc_init+0x15a>
    1e00:	e0a0      	b.n	1f44 <tc_init+0x29c>
    1e02:	2005      	movs	r0, #5
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e04:	2204      	movs	r2, #4
	}

	if (config->count_direction) {
    1e06:	464b      	mov	r3, r9
    1e08:	7b9b      	ldrb	r3, [r3, #14]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d100      	bne.n	1e10 <tc_init+0x168>
    1e0e:	1c10      	adds	r0, r2, #0
    1e10:	227f      	movs	r2, #127	; 0x7f
    1e12:	6831      	ldr	r1, [r6, #0]
    1e14:	7bcb      	ldrb	r3, [r1, #15]
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1e16:	4393      	bics	r3, r2
    1e18:	d1fc      	bne.n	1e14 <tc_init+0x16c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e1a:	33ff      	adds	r3, #255	; 0xff
    1e1c:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1e1e:	2800      	cmp	r0, #0
    1e20:	d005      	beq.n	1e2e <tc_init+0x186>
    1e22:	227f      	movs	r2, #127	; 0x7f
    1e24:	6831      	ldr	r1, [r6, #0]
    1e26:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1e28:	4393      	bics	r3, r2
    1e2a:	d1fc      	bne.n	1e26 <tc_init+0x17e>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e2c:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1e2e:	464b      	mov	r3, r9
    1e30:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e32:	7adb      	ldrb	r3, [r3, #11]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d001      	beq.n	1e3c <tc_init+0x194>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e38:	2310      	movs	r3, #16
    1e3a:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e3c:	464b      	mov	r3, r9
    1e3e:	7b1b      	ldrb	r3, [r3, #12]
    1e40:	2b00      	cmp	r3, #0
    1e42:	d001      	beq.n	1e48 <tc_init+0x1a0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e44:	2320      	movs	r3, #32
    1e46:	4318      	orrs	r0, r3
    1e48:	227f      	movs	r2, #127	; 0x7f
    1e4a:	6831      	ldr	r1, [r6, #0]
    1e4c:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e4e:	4393      	bics	r3, r2
    1e50:	d1fc      	bne.n	1e4c <tc_init+0x1a4>
    1e52:	217f      	movs	r1, #127	; 0x7f
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e54:	71a8      	strb	r0, [r5, #6]
    1e56:	6832      	ldr	r2, [r6, #0]
    1e58:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e5a:	438b      	bics	r3, r1
    1e5c:	d1fc      	bne.n	1e58 <tc_init+0x1b0>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1e5e:	7933      	ldrb	r3, [r6, #4]
    1e60:	217f      	movs	r1, #127	; 0x7f
    1e62:	2b04      	cmp	r3, #4
    1e64:	d007      	beq.n	1e76 <tc_init+0x1ce>
    1e66:	217f      	movs	r1, #127	; 0x7f
    1e68:	2b08      	cmp	r3, #8
    1e6a:	d040      	beq.n	1eee <tc_init+0x246>
    1e6c:	217f      	movs	r1, #127	; 0x7f
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d025      	beq.n	1ebe <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e72:	2017      	movs	r0, #23
    1e74:	e770      	b.n	1d58 <tc_init+0xb0>
    1e76:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1e78:	438b      	bics	r3, r1
    1e7a:	d1fc      	bne.n	1e76 <tc_init+0x1ce>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1e7c:	464a      	mov	r2, r9
    1e7e:	3328      	adds	r3, #40	; 0x28
    1e80:	5cd3      	ldrb	r3, [r2, r3]
    1e82:	227f      	movs	r2, #127	; 0x7f
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1e84:	742b      	strb	r3, [r5, #16]
    1e86:	6831      	ldr	r1, [r6, #0]
    1e88:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1e8a:	4393      	bics	r3, r2
    1e8c:	d1fc      	bne.n	1e88 <tc_init+0x1e0>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1e8e:	464a      	mov	r2, r9
    1e90:	3329      	adds	r3, #41	; 0x29
    1e92:	5cd3      	ldrb	r3, [r2, r3]
    1e94:	227f      	movs	r2, #127	; 0x7f

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1e96:	752b      	strb	r3, [r5, #20]
    1e98:	6831      	ldr	r1, [r6, #0]
    1e9a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1e9c:	4393      	bics	r3, r2
    1e9e:	d1fc      	bne.n	1e9a <tc_init+0x1f2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1ea0:	464a      	mov	r2, r9
    1ea2:	332a      	adds	r3, #42	; 0x2a
    1ea4:	5cd3      	ldrb	r3, [r2, r3]
    1ea6:	227f      	movs	r2, #127	; 0x7f

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1ea8:	762b      	strb	r3, [r5, #24]
    1eaa:	6831      	ldr	r1, [r6, #0]
    1eac:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1eae:	4393      	bics	r3, r2
    1eb0:	d1fc      	bne.n	1eac <tc_init+0x204>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1eb2:	464a      	mov	r2, r9
    1eb4:	332b      	adds	r3, #43	; 0x2b
    1eb6:	5cd3      	ldrb	r3, [r2, r3]

			return STATUS_OK;
    1eb8:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1eba:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1ebc:	e74c      	b.n	1d58 <tc_init+0xb0>
    1ebe:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1ec0:	438b      	bics	r3, r1
    1ec2:	d1fc      	bne.n	1ebe <tc_init+0x216>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1ec4:	464b      	mov	r3, r9
    1ec6:	227f      	movs	r2, #127	; 0x7f
    1ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1eca:	822b      	strh	r3, [r5, #16]
    1ecc:	6831      	ldr	r1, [r6, #0]
    1ece:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1ed0:	4393      	bics	r3, r2
    1ed2:	d1fc      	bne.n	1ece <tc_init+0x226>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1ed4:	464b      	mov	r3, r9
    1ed6:	227f      	movs	r2, #127	; 0x7f
    1ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1eda:	832b      	strh	r3, [r5, #24]
    1edc:	6831      	ldr	r1, [r6, #0]
    1ede:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1ee0:	4393      	bics	r3, r2
    1ee2:	d1fc      	bne.n	1ede <tc_init+0x236>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1ee4:	464b      	mov	r3, r9
    1ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			return STATUS_OK;
    1ee8:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1eea:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1eec:	e734      	b.n	1d58 <tc_init+0xb0>
    1eee:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1ef0:	438b      	bics	r3, r1
    1ef2:	d1fc      	bne.n	1eee <tc_init+0x246>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1ef4:	464b      	mov	r3, r9
    1ef6:	227f      	movs	r2, #127	; 0x7f
    1ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1efa:	612b      	str	r3, [r5, #16]
    1efc:	6831      	ldr	r1, [r6, #0]
    1efe:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1f00:	4393      	bics	r3, r2
    1f02:	d1fc      	bne.n	1efe <tc_init+0x256>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1f04:	464b      	mov	r3, r9
    1f06:	227f      	movs	r2, #127	; 0x7f
    1f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f0a:	61ab      	str	r3, [r5, #24]
    1f0c:	6831      	ldr	r1, [r6, #0]
    1f0e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1f10:	4393      	bics	r3, r2
    1f12:	d1fc      	bne.n	1f0e <tc_init+0x266>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1f14:	464b      	mov	r3, r9
    1f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			return STATUS_OK;
    1f18:	2000      	movs	r0, #0

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1f1a:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1f1c:	e71c      	b.n	1d58 <tc_init+0xb0>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1f1e:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1f20:	b2da      	uxtb	r2, r3
    1f22:	4693      	mov	fp, r2
    1f24:	469a      	mov	sl, r3
    1f26:	e6f5      	b.n	1d14 <tc_init+0x6c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1f28:	2301      	movs	r3, #1
    1f2a:	e7f9      	b.n	1f20 <tc_init+0x278>
    1f2c:	2302      	movs	r3, #2
    1f2e:	e7f7      	b.n	1f20 <tc_init+0x278>
    1f30:	2303      	movs	r3, #3
    1f32:	e7f5      	b.n	1f20 <tc_init+0x278>
    1f34:	2304      	movs	r3, #4
    1f36:	e7f3      	b.n	1f20 <tc_init+0x278>
    1f38:	2305      	movs	r3, #5
    1f3a:	e7f1      	b.n	1f20 <tc_init+0x278>
    1f3c:	2306      	movs	r3, #6
    1f3e:	e7ef      	b.n	1f20 <tc_init+0x278>
    1f40:	2307      	movs	r3, #7
    1f42:	e7ed      	b.n	1f20 <tc_init+0x278>
    1f44:	2001      	movs	r0, #1
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1f46:	2200      	movs	r2, #0
    1f48:	e75d      	b.n	1e06 <tc_init+0x15e>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f4a:	2301      	movs	r3, #1
	config->powersave    = false;
    1f4c:	2200      	movs	r2, #0
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f4e:	a901      	add	r1, sp, #4
    1f50:	708b      	strb	r3, [r1, #2]

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f52:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1f54:	464b      	mov	r3, r9
	config->powersave    = false;
    1f56:	70ca      	strb	r2, [r1, #3]
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1f58:	464a      	mov	r2, r9
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1f5a:	6a1b      	ldr	r3, [r3, #32]
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1f5e:	b2d8      	uxtb	r0, r3
    1f60:	4b11      	ldr	r3, [pc, #68]	; (1fa8 <tc_init+0x300>)
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1f62:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1f64:	4798      	blx	r3
    1f66:	e715      	b.n	1d94 <tc_init+0xec>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f68:	a901      	add	r1, sp, #4
	config->powersave    = false;
    1f6a:	70cb      	strb	r3, [r1, #3]
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1f6c:	464b      	mov	r3, r9
    1f6e:	7e1b      	ldrb	r3, [r3, #24]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f70:	708a      	strb	r2, [r1, #2]
    1f72:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1f74:	464b      	mov	r3, r9
    1f76:	7d18      	ldrb	r0, [r3, #20]
    1f78:	4b0b      	ldr	r3, [pc, #44]	; (1fa8 <tc_init+0x300>)

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f7a:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1f7c:	4798      	blx	r3
    1f7e:	e704      	b.n	1d8a <tc_init+0xe2>
	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1f80:	4651      	mov	r1, sl
    1f82:	3101      	adds	r1, #1
    1f84:	0049      	lsls	r1, r1, #1
    1f86:	6a13      	ldr	r3, [r2, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1f88:	5a61      	ldrh	r1, [r4, r1]
    1f8a:	430b      	orrs	r3, r1
    1f8c:	6213      	str	r3, [r2, #32]
    1f8e:	e70d      	b.n	1dac <tc_init+0x104>
    1f90:	000038d4 	.word	0x000038d4
    1f94:	0000384d 	.word	0x0000384d
    1f98:	200002a0 	.word	0x200002a0
    1f9c:	40000400 	.word	0x40000400
    1fa0:	00003125 	.word	0x00003125
    1fa4:	00003189 	.word	0x00003189
    1fa8:	0000328d 	.word	0x0000328d

00001fac <gpio_init>:
	}
}


void gpio_init(void)
{
    1fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fae:	4656      	mov	r6, sl
    1fb0:	464d      	mov	r5, r9
    1fb2:	4644      	mov	r4, r8
    1fb4:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1fb6:	2300      	movs	r3, #0
    1fb8:	b4f0      	push	{r4, r5, r6, r7}
	config->input_pull = PORT_PIN_PULL_UP;
    1fba:	2601      	movs	r6, #1
    1fbc:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1fbe:	ac01      	add	r4, sp, #4
	
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	
	port_pin_set_config(MDL_ID0,&config_port_pin);
    1fc0:	2004      	movs	r0, #4
    1fc2:	1c21      	adds	r1, r4, #0
    1fc4:	4d75      	ldr	r5, [pc, #468]	; (219c <STACK_SIZE+0x19c>)
    1fc6:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    1fc8:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1fca:	7066      	strb	r6, [r4, #1]
    1fcc:	47a8      	blx	r5
	port_pin_set_config(MDL_ID1,&config_port_pin);
    1fce:	2025      	movs	r0, #37	; 0x25
    1fd0:	1c21      	adds	r1, r4, #0
    1fd2:	47a8      	blx	r5
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1fd4:	4a72      	ldr	r2, [pc, #456]	; (21a0 <STACK_SIZE+0x1a0>)
    1fd6:	6a13      	ldr	r3, [r2, #32]
    1fd8:	6a12      	ldr	r2, [r2, #32]
    1fda:	095b      	lsrs	r3, r3, #5
    1fdc:	4033      	ands	r3, r6
	
	id0 = port_pin_get_input_level(MDL_ID1);
	id1 = port_pin_get_input_level(MDL_ID1);
	
	if((!id1) && (!id0)) //b'00, p2p
    1fde:	0692      	lsls	r2, r2, #26
    1fe0:	d400      	bmi.n	1fe4 <gpio_init+0x38>
    1fe2:	e0a0      	b.n	2126 <STACK_SIZE+0x126>
	}
	else if((!id1) && (id0)) // b'01, p2u
	{
		module_form_factor = p2u;
	}
	else if((id1) && (!id0)) // b'10, u2u
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d100      	bne.n	1fea <gpio_init+0x3e>
    1fe8:	e0aa      	b.n	2140 <STACK_SIZE+0x140>
	id0 = port_pin_get_input_level(MDL_ID1);
	id1 = port_pin_get_input_level(MDL_ID1);
	
	if((!id1) && (!id0)) //b'00, p2p
	{
		module_form_factor = p2p;
    1fea:	4b6e      	ldr	r3, [pc, #440]	; (21a4 <STACK_SIZE+0x1a4>)
    1fec:	4698      	mov	r8, r3
    1fee:	2300      	movs	r3, #0
    1ff0:	4642      	mov	r2, r8
    1ff2:	7013      	strb	r3, [r2, #0]
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    1ff4:	2200      	movs	r2, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1ff6:	2301      	movs	r3, #1
	get_module_form_factor();
	
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	
	port_pin_set_config(MCU_LED1,&config_port_pin);
    1ff8:	2002      	movs	r0, #2
    1ffa:	1c21      	adds	r1, r4, #0
	config->powersave  = false;
    1ffc:	70a2      	strb	r2, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1ffe:	7063      	strb	r3, [r4, #1]
	struct port_config config_port_pin;
	
	get_module_form_factor();
	
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2000:	7023      	strb	r3, [r4, #0]
	
	port_pin_set_config(MCU_LED1,&config_port_pin);
    2002:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2004:	2304      	movs	r3, #4
    2006:	4e68      	ldr	r6, [pc, #416]	; (21a8 <STACK_SIZE+0x1a8>)
	port_pin_set_output_level(MCU_LED1,true);
	port_pin_set_config(MCU_RELAY_1,&config_port_pin);
    2008:	2014      	movs	r0, #20
    200a:	61b3      	str	r3, [r6, #24]
    200c:	1c21      	adds	r1, r4, #0
    200e:	47a8      	blx	r5
    2010:	2380      	movs	r3, #128	; 0x80
    2012:	035b      	lsls	r3, r3, #13
    2014:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(MCU_RELAY_1,true);
	port_pin_set_config(MCU_RELAY_2,&config_port_pin);
    2016:	2015      	movs	r0, #21
    2018:	1c21      	adds	r1, r4, #0
    201a:	47a8      	blx	r5
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	039b      	lsls	r3, r3, #14
    2020:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(MCU_RELAY_2,true);
	port_pin_set_config(MCU_RELAY_3,&config_port_pin);
    2022:	200f      	movs	r0, #15
    2024:	1c21      	adds	r1, r4, #0
    2026:	47a8      	blx	r5
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	021b      	lsls	r3, r3, #8
    202c:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(MCU_RELAY_3,true);
	
	port_pin_set_config(PE_PWR_SLT,&config_port_pin);
    202e:	200d      	movs	r0, #13
    2030:	1c21      	adds	r1, r4, #0
    2032:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2034:	2380      	movs	r3, #128	; 0x80
    2036:	019b      	lsls	r3, r3, #6
    2038:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(PE_PWR_SLT,false);
	port_pin_set_config(PE_SMBS_SLT,&config_port_pin);
    203a:	200e      	movs	r0, #14
    203c:	1c21      	adds	r1, r4, #0
    203e:	4699      	mov	r9, r3
    2040:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2042:	2380      	movs	r3, #128	; 0x80
    2044:	01db      	lsls	r3, r3, #7
    2046:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(PE_SMBS_SLT,true);
	port_pin_set_config(PE_12V_SW,&config_port_pin);
    2048:	202d      	movs	r0, #45	; 0x2d
    204a:	1c21      	adds	r1, r4, #0
    204c:	47a8      	blx	r5
    204e:	464b      	mov	r3, r9
    2050:	4f53      	ldr	r7, [pc, #332]	; (21a0 <STACK_SIZE+0x1a0>)
	port_pin_set_output_level(PE_12V_SW,true);
	port_pin_set_config(PE_3V3_SW,&config_port_pin);
    2052:	200c      	movs	r0, #12
    2054:	61bb      	str	r3, [r7, #24]
    2056:	1c21      	adds	r1, r4, #0
    2058:	47a8      	blx	r5
    205a:	2380      	movs	r3, #128	; 0x80
    205c:	015b      	lsls	r3, r3, #5
    205e:	4699      	mov	r9, r3
    2060:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(PE_3V3_SW,true);
	port_pin_set_config(PE_AUX3V3_SW,&config_port_pin);
    2062:	202c      	movs	r0, #44	; 0x2c
    2064:	1c21      	adds	r1, r4, #0
    2066:	47a8      	blx	r5
    2068:	464b      	mov	r3, r9
	port_pin_set_output_level(PE_AUX3V3_SW,true);
	port_pin_set_config(PE_SMBS_SW,&config_port_pin);
    206a:	202b      	movs	r0, #43	; 0x2b
    206c:	61bb      	str	r3, [r7, #24]
    206e:	1c21      	adds	r1, r4, #0
    2070:	47a8      	blx	r5
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	011b      	lsls	r3, r3, #4
    2076:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PE_SMBS_SW,true);
	port_pin_set_config(PE_CLK0_SW,&config_port_pin);
    2078:	202a      	movs	r0, #42	; 0x2a
    207a:	1c21      	adds	r1, r4, #0
    207c:	469b      	mov	fp, r3
    207e:	47a8      	blx	r5
    2080:	2380      	movs	r3, #128	; 0x80
    2082:	00db      	lsls	r3, r3, #3
    2084:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PE_CLK0_SW,true);
	port_pin_set_config(PE_RST0_SW,&config_port_pin);
    2086:	2026      	movs	r0, #38	; 0x26
    2088:	1c21      	adds	r1, r4, #0
    208a:	469a      	mov	sl, r3
    208c:	47a8      	blx	r5
    208e:	2340      	movs	r3, #64	; 0x40
	port_pin_set_output_level(PE_RST0_SW,true);
	port_pin_set_config(PE_LANE_ONE_SW,&config_port_pin);
    2090:	200b      	movs	r0, #11
    2092:	61bb      	str	r3, [r7, #24]
    2094:	1c21      	adds	r1, r4, #0
    2096:	4699      	mov	r9, r3
    2098:	47a8      	blx	r5
    209a:	465b      	mov	r3, fp
	port_pin_set_output_level(PE_LANE_ONE_SW,true);
	port_pin_set_config(PE_PRSNT_SW,&config_port_pin);
    209c:	200a      	movs	r0, #10
    209e:	61b3      	str	r3, [r6, #24]
    20a0:	1c21      	adds	r1, r4, #0
    20a2:	47a8      	blx	r5
    20a4:	4653      	mov	r3, sl
	port_pin_set_output_level(PE_PRSNT_SW,true);
	port_pin_set_config(RLY0_SW,&config_port_pin);
    20a6:	2005      	movs	r0, #5
    20a8:	61b3      	str	r3, [r6, #24]
    20aa:	1c21      	adds	r1, r4, #0
    20ac:	47a8      	blx	r5
    20ae:	2320      	movs	r3, #32
	port_pin_set_output_level(RLY0_SW,true);
	port_pin_set_config(RLY1_SW,&config_port_pin);
    20b0:	2007      	movs	r0, #7
    20b2:	61b3      	str	r3, [r6, #24]
    20b4:	1c21      	adds	r1, r4, #0
    20b6:	47a8      	blx	r5
    20b8:	2380      	movs	r3, #128	; 0x80
	port_pin_set_output_level(RLY1_SW,true);
	port_pin_set_config(FAN_SW,&config_port_pin);
    20ba:	2006      	movs	r0, #6
    20bc:	61b3      	str	r3, [r6, #24]
    20be:	1c21      	adds	r1, r4, #0
    20c0:	47a8      	blx	r5
    20c2:	464b      	mov	r3, r9
	port_pin_set_output_level(FAN_SW,true);
	port_pin_set_config(VCC3_3_OUT_EN,&config_port_pin);
    20c4:	2001      	movs	r0, #1
    20c6:	61b3      	str	r3, [r6, #24]
    20c8:	1c21      	adds	r1, r4, #0
    20ca:	47a8      	blx	r5
    20cc:	2302      	movs	r3, #2
    20ce:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(VCC3_3_OUT_EN,true);
	
	if(module_form_factor == u2u)	// then set the signals to output
    20d0:	4643      	mov	r3, r8
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	2b02      	cmp	r3, #2
    20d6:	d03d      	beq.n	2154 <STACK_SIZE+0x154>
		port_pin_set_output_level(PE_DP_SW,true);
	}
	else 
	{
		
		if(module_form_factor == p2p)	// then set the signals to input except for lane_2_sw
    20d8:	2b00      	cmp	r3, #0
    20da:	d02b      	beq.n	2134 <STACK_SIZE+0x134>
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
			port_pin_set_output_level(PE_LANE_TWO_SW,true);
		}
		config_port_pin.direction = PORT_PIN_DIR_INPUT;
    20dc:	2300      	movs	r3, #0
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
		port_pin_set_config(PE_CLK1_SW,&config_port_pin);
    20de:	202e      	movs	r0, #46	; 0x2e
		if(module_form_factor == p2p)	// then set the signals to input except for lane_2_sw
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
			port_pin_set_output_level(PE_LANE_TWO_SW,true);
		}
		config_port_pin.direction = PORT_PIN_DIR_INPUT;
    20e0:	7023      	strb	r3, [r4, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
		port_pin_set_config(PE_CLK1_SW,&config_port_pin);
    20e2:	1c21      	adds	r1, r4, #0
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
			port_pin_set_output_level(PE_LANE_TWO_SW,true);
		}
		config_port_pin.direction = PORT_PIN_DIR_INPUT;
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    20e4:	3302      	adds	r3, #2
    20e6:	7063      	strb	r3, [r4, #1]
		port_pin_set_config(PE_CLK1_SW,&config_port_pin);
    20e8:	47a8      	blx	r5
		port_pin_set_config(PE_RST1_SW,&config_port_pin);
    20ea:	202f      	movs	r0, #47	; 0x2f
    20ec:	1c21      	adds	r1, r4, #0
    20ee:	47a8      	blx	r5
		port_pin_set_config(PE_IF_DET_SW,&config_port_pin);
    20f0:	2028      	movs	r0, #40	; 0x28
    20f2:	1c21      	adds	r1, r4, #0
    20f4:	47a8      	blx	r5
		port_pin_set_config(PE_12V_PRE_SW,&config_port_pin);
    20f6:	2029      	movs	r0, #41	; 0x29
    20f8:	1c21      	adds	r1, r4, #0
    20fa:	47a8      	blx	r5
		port_pin_set_config(PE_DP_SW,&config_port_pin);
    20fc:	2024      	movs	r0, #36	; 0x24
    20fe:	1c21      	adds	r1, r4, #0
    2100:	47a8      	blx	r5
		if(module_form_factor == p2u)	// then set the signals to input with pull down
    2102:	4643      	mov	r3, r8
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2b01      	cmp	r3, #1
    2108:	d020      	beq.n	214c <STACK_SIZE+0x14c>
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
		}
	}
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    210a:	2300      	movs	r3, #0
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(VCC3_3_OUT_FLT_N,&config_port_pin);
    210c:	2000      	movs	r0, #0
		if(module_form_factor == p2u)	// then set the signals to input with pull down
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
		}
	}
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    210e:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(VCC3_3_OUT_FLT_N,&config_port_pin);
    2110:	1c21      	adds	r1, r4, #0
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
		}
	}
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2112:	3301      	adds	r3, #1
    2114:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(VCC3_3_OUT_FLT_N,&config_port_pin);
    2116:	47a8      	blx	r5
}
    2118:	b003      	add	sp, #12
    211a:	bc3c      	pop	{r2, r3, r4, r5}
    211c:	4690      	mov	r8, r2
    211e:	4699      	mov	r9, r3
    2120:	46a2      	mov	sl, r4
    2122:	46ab      	mov	fp, r5
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	port_pin_set_config(MDL_ID1,&config_port_pin);
	
	id0 = port_pin_get_input_level(MDL_ID1);
	id1 = port_pin_get_input_level(MDL_ID1);
	
	if((!id1) && (!id0)) //b'00, p2p
    2126:	2b00      	cmp	r3, #0
    2128:	d100      	bne.n	212c <STACK_SIZE+0x12c>
    212a:	e75e      	b.n	1fea <gpio_init+0x3e>
	{
		module_form_factor = p2p;
	}
	else if((!id1) && (id0)) // b'01, p2u
	{
		module_form_factor = p2u;
    212c:	4b1d      	ldr	r3, [pc, #116]	; (21a4 <STACK_SIZE+0x1a4>)
    212e:	4698      	mov	r8, r3
    2130:	701e      	strb	r6, [r3, #0]
    2132:	e75f      	b.n	1ff4 <gpio_init+0x48>
	else 
	{
		
		if(module_form_factor == p2p)	// then set the signals to input except for lane_2_sw
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
    2134:	2027      	movs	r0, #39	; 0x27
    2136:	1c21      	adds	r1, r4, #0
    2138:	47a8      	blx	r5
    213a:	2380      	movs	r3, #128	; 0x80
    213c:	61bb      	str	r3, [r7, #24]
    213e:	e7cd      	b.n	20dc <STACK_SIZE+0xdc>
	{
		module_form_factor = p2u;
	}
	else if((id1) && (!id0)) // b'10, u2u
	{
		module_form_factor = u2u;
    2140:	4b18      	ldr	r3, [pc, #96]	; (21a4 <STACK_SIZE+0x1a4>)
    2142:	4698      	mov	r8, r3
    2144:	2302      	movs	r3, #2
    2146:	4642      	mov	r2, r8
    2148:	7013      	strb	r3, [r2, #0]
    214a:	e753      	b.n	1ff4 <gpio_init+0x48>
		port_pin_set_config(PE_IF_DET_SW,&config_port_pin);
		port_pin_set_config(PE_12V_PRE_SW,&config_port_pin);
		port_pin_set_config(PE_DP_SW,&config_port_pin);
		if(module_form_factor == p2u)	// then set the signals to input with pull down
		{
			port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
    214c:	2027      	movs	r0, #39	; 0x27
    214e:	1c21      	adds	r1, r4, #0
    2150:	47a8      	blx	r5
    2152:	e7da      	b.n	210a <STACK_SIZE+0x10a>
	port_pin_set_config(VCC3_3_OUT_EN,&config_port_pin);
	port_pin_set_output_level(VCC3_3_OUT_EN,true);
	
	if(module_form_factor == u2u)	// then set the signals to output
	{
		port_pin_set_config(PE_CLK1_SW,&config_port_pin);
    2154:	202e      	movs	r0, #46	; 0x2e
    2156:	1c21      	adds	r1, r4, #0
    2158:	47a8      	blx	r5
    215a:	2380      	movs	r3, #128	; 0x80
    215c:	01db      	lsls	r3, r3, #7
    215e:	61bb      	str	r3, [r7, #24]
		port_pin_set_output_level(PE_CLK1_SW,true);
		port_pin_set_config(PE_RST1_SW,&config_port_pin);
    2160:	202f      	movs	r0, #47	; 0x2f
    2162:	1c21      	adds	r1, r4, #0
    2164:	47a8      	blx	r5
    2166:	2380      	movs	r3, #128	; 0x80
    2168:	021b      	lsls	r3, r3, #8
    216a:	61bb      	str	r3, [r7, #24]
		port_pin_set_output_level(PE_RST1_SW,true);
		port_pin_set_config(PE_LANE_TWO_SW,&config_port_pin);
    216c:	2027      	movs	r0, #39	; 0x27
    216e:	1c21      	adds	r1, r4, #0
    2170:	47a8      	blx	r5
    2172:	2380      	movs	r3, #128	; 0x80
		port_pin_set_output_level(PE_LANE_TWO_SW,true);
		port_pin_set_config(PE_IF_DET_SW,&config_port_pin);
    2174:	2028      	movs	r0, #40	; 0x28
    2176:	61bb      	str	r3, [r7, #24]
    2178:	1c21      	adds	r1, r4, #0
    217a:	47a8      	blx	r5
    217c:	2380      	movs	r3, #128	; 0x80
    217e:	005b      	lsls	r3, r3, #1
    2180:	61bb      	str	r3, [r7, #24]
		port_pin_set_output_level(PE_IF_DET_SW,true);
		port_pin_set_config(PE_12V_PRE_SW,&config_port_pin);
    2182:	2029      	movs	r0, #41	; 0x29
    2184:	1c21      	adds	r1, r4, #0
    2186:	47a8      	blx	r5
    2188:	2380      	movs	r3, #128	; 0x80
    218a:	009b      	lsls	r3, r3, #2
    218c:	61bb      	str	r3, [r7, #24]
		port_pin_set_output_level(PE_12V_PRE_SW,true);
		port_pin_set_config(PE_DP_SW,&config_port_pin);
    218e:	2024      	movs	r0, #36	; 0x24
    2190:	1c21      	adds	r1, r4, #0
    2192:	47a8      	blx	r5
    2194:	2310      	movs	r3, #16
    2196:	61bb      	str	r3, [r7, #24]
    2198:	e7b7      	b.n	210a <STACK_SIZE+0x10a>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	00002485 	.word	0x00002485
    21a0:	41004480 	.word	0x41004480
    21a4:	20000234 	.word	0x20000234
    21a8:	41004400 	.word	0x41004400

000021ac <tc_callback_0_5ms>:
 *	Brief: callback function of 0.5ms
 *	
 *	fun1: led is blinking every 1 second
 */
static void tc_callback_0_5ms(struct tc_module *const module_inst)
{
    21ac:	b538      	push	{r3, r4, r5, lr}
	static uint16_t timer_counter = 0;
	static uint8_t timer_counter_usart = 0;
	static uint8_t  led_blink_times = 0;
	static uint16_t first = 0;
	
	if(timer_counter_usart == 3)
    21ae:	4a28      	ldr	r2, [pc, #160]	; (2250 <tc_callback_0_5ms+0xa4>)
    21b0:	7813      	ldrb	r3, [r2, #0]
    21b2:	2b03      	cmp	r3, #3
    21b4:	d041      	beq.n	223a <tc_callback_0_5ms+0x8e>
		timer_counter_usart = 0;
		
	}
	else
	{
		timer_counter_usart++;
    21b6:	3301      	adds	r3, #1
    21b8:	b2db      	uxtb	r3, r3
    21ba:	7013      	strb	r3, [r2, #0]
	}
	
	usart_read_data();
    21bc:	4b25      	ldr	r3, [pc, #148]	; (2254 <tc_callback_0_5ms+0xa8>)
    21be:	4798      	blx	r3
	
	
	if(delay_time)
    21c0:	4b25      	ldr	r3, [pc, #148]	; (2258 <tc_callback_0_5ms+0xac>)
    21c2:	881a      	ldrh	r2, [r3, #0]
    21c4:	2a00      	cmp	r2, #0
    21c6:	d003      	beq.n	21d0 <tc_callback_0_5ms+0x24>
	{
		delay_time--;
    21c8:	881a      	ldrh	r2, [r3, #0]
    21ca:	3a01      	subs	r2, #1
    21cc:	b292      	uxth	r2, r2
    21ce:	801a      	strh	r2, [r3, #0]
	}
	
	if(timer_counter == 999)
    21d0:	4b22      	ldr	r3, [pc, #136]	; (225c <tc_callback_0_5ms+0xb0>)
    21d2:	4a23      	ldr	r2, [pc, #140]	; (2260 <tc_callback_0_5ms+0xb4>)
    21d4:	8818      	ldrh	r0, [r3, #0]
    21d6:	4290      	cmp	r0, r2
    21d8:	d02d      	beq.n	2236 <tc_callback_0_5ms+0x8a>
	{
		timer_counter = 0;
	}
	else
	{
		timer_counter++;
    21da:	3001      	adds	r0, #1
    21dc:	b280      	uxth	r0, r0
	}
	
	if(first < 3000)
    21de:	4a21      	ldr	r2, [pc, #132]	; (2264 <tc_callback_0_5ms+0xb8>)
    21e0:	8018      	strh	r0, [r3, #0]
    21e2:	4921      	ldr	r1, [pc, #132]	; (2268 <tc_callback_0_5ms+0xbc>)
    21e4:	8813      	ldrh	r3, [r2, #0]
    21e6:	428b      	cmp	r3, r1
    21e8:	d80b      	bhi.n	2202 <tc_callback_0_5ms+0x56>
	{
		first++;
    21ea:	3301      	adds	r3, #1
    21ec:	8013      	strh	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21ee:	2204      	movs	r2, #4
    21f0:	4b1e      	ldr	r3, [pc, #120]	; (226c <tc_callback_0_5ms+0xc0>)
    21f2:	615a      	str	r2, [r3, #20]
				}
			}
		}
	}
	
	if(timer_usart_i2c_timeout)
    21f4:	4a1e      	ldr	r2, [pc, #120]	; (2270 <tc_callback_0_5ms+0xc4>)
    21f6:	7813      	ldrb	r3, [r2, #0]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d001      	beq.n	2200 <tc_callback_0_5ms+0x54>
	{
		timer_usart_i2c_timeout--;
    21fc:	3b01      	subs	r3, #1
    21fe:	7013      	strb	r3, [r2, #0]
	}
}
    2200:	bd38      	pop	{r3, r4, r5, pc}
		first++;
		port_pin_set_output_level(MCU_LED1,false);
	}
	else
	{
		if(!led_blink_en)
    2202:	4d1c      	ldr	r5, [pc, #112]	; (2274 <tc_callback_0_5ms+0xc8>)
    2204:	782c      	ldrb	r4, [r5, #0]
    2206:	2c00      	cmp	r4, #0
    2208:	d105      	bne.n	2216 <tc_callback_0_5ms+0x6a>
		{
			if(timer_counter == 0)
    220a:	2800      	cmp	r0, #0
    220c:	d1f2      	bne.n	21f4 <tc_callback_0_5ms+0x48>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    220e:	2204      	movs	r2, #4
    2210:	4b16      	ldr	r3, [pc, #88]	; (226c <tc_callback_0_5ms+0xc0>)
    2212:	61da      	str	r2, [r3, #28]
    2214:	e7ee      	b.n	21f4 <tc_callback_0_5ms+0x48>
				port_pin_toggle_output_level(MCU_LED1);
			}
		}
		else
		{
			if((timer_counter+1) % 250 == 0)
    2216:	3001      	adds	r0, #1
    2218:	21fa      	movs	r1, #250	; 0xfa
    221a:	4b17      	ldr	r3, [pc, #92]	; (2278 <tc_callback_0_5ms+0xcc>)
    221c:	4798      	blx	r3
    221e:	2900      	cmp	r1, #0
    2220:	d00d      	beq.n	223e <tc_callback_0_5ms+0x92>
    2222:	4a16      	ldr	r2, [pc, #88]	; (227c <tc_callback_0_5ms+0xd0>)
    2224:	7813      	ldrb	r3, [r2, #0]
			{
				port_pin_toggle_output_level(MCU_LED1);
				led_blink_times++;
			}
			if(led_blink_times >= 8)
    2226:	2b07      	cmp	r3, #7
    2228:	d9e4      	bls.n	21f4 <tc_callback_0_5ms+0x48>
			{
				if(led_blink_en == 2)
    222a:	2c02      	cmp	r4, #2
    222c:	d1e2      	bne.n	21f4 <tc_callback_0_5ms+0x48>
				{
					led_blink_en = 0;
    222e:	2300      	movs	r3, #0
    2230:	702b      	strb	r3, [r5, #0]
					led_blink_times = 0;
    2232:	7013      	strb	r3, [r2, #0]
    2234:	e7de      	b.n	21f4 <tc_callback_0_5ms+0x48>
		delay_time--;
	}
	
	if(timer_counter == 999)
	{
		timer_counter = 0;
    2236:	2000      	movs	r0, #0
    2238:	e7d1      	b.n	21de <tc_callback_0_5ms+0x32>
	static uint8_t  led_blink_times = 0;
	static uint16_t first = 0;
	
	if(timer_counter_usart == 3)
	{
		timer_counter_usart = 0;
    223a:	2300      	movs	r3, #0
    223c:	e7bd      	b.n	21ba <tc_callback_0_5ms+0xe>
    223e:	2204      	movs	r2, #4
    2240:	4b0a      	ldr	r3, [pc, #40]	; (226c <tc_callback_0_5ms+0xc0>)
    2242:	61da      	str	r2, [r3, #28]
		else
		{
			if((timer_counter+1) % 250 == 0)
			{
				port_pin_toggle_output_level(MCU_LED1);
				led_blink_times++;
    2244:	4a0d      	ldr	r2, [pc, #52]	; (227c <tc_callback_0_5ms+0xd0>)
    2246:	7813      	ldrb	r3, [r2, #0]
    2248:	3301      	adds	r3, #1
    224a:	b2db      	uxtb	r3, r3
    224c:	7013      	strb	r3, [r2, #0]
    224e:	e7ea      	b.n	2226 <tc_callback_0_5ms+0x7a>
    2250:	200001fb 	.word	0x200001fb
    2254:	00001839 	.word	0x00001839
    2258:	200001f4 	.word	0x200001f4
    225c:	200001f8 	.word	0x200001f8
    2260:	000003e7 	.word	0x000003e7
    2264:	200001f2 	.word	0x200001f2
    2268:	00000bb7 	.word	0x00000bb7
    226c:	41004400 	.word	0x41004400
    2270:	200001fa 	.word	0x200001fa
    2274:	200001f7 	.word	0x200001f7
    2278:	00003795 	.word	0x00003795
    227c:	200001f6 	.word	0x200001f6

00002280 <timer_delay_ms>:
volatile uint16_t delay_time = 0;


uint16_t timer_delay_ms(uint16_t ms)
{
	if(!ms)
    2280:	2800      	cmp	r0, #0
    2282:	d004      	beq.n	228e <timer_delay_ms+0xe>
	{
		return delay_time>>1;
	}
	delay_time = ms<<1;
    2284:	0043      	lsls	r3, r0, #1
    2286:	4a04      	ldr	r2, [pc, #16]	; (2298 <timer_delay_ms+0x18>)
    2288:	b29b      	uxth	r3, r3
    228a:	8013      	strh	r3, [r2, #0]
	return ms;
}
    228c:	4770      	bx	lr

uint16_t timer_delay_ms(uint16_t ms)
{
	if(!ms)
	{
		return delay_time>>1;
    228e:	4b02      	ldr	r3, [pc, #8]	; (2298 <timer_delay_ms+0x18>)
    2290:	8818      	ldrh	r0, [r3, #0]
    2292:	0840      	lsrs	r0, r0, #1
    2294:	e7fa      	b.n	228c <timer_delay_ms+0xc>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	200001f4 	.word	0x200001f4

0000229c <timer_init>:

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    229c:	2300      	movs	r3, #0
	tc_enable_callback(&tc_instance,TC_CALLBACK_OVERFLOW);
}


void timer_init(void)
{
    229e:	b570      	push	{r4, r5, r6, lr}
    22a0:	b08e      	sub	sp, #56	; 0x38
    22a2:	aa01      	add	r2, sp, #4

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    22a4:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    22a6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    22a8:	8113      	strh	r3, [r2, #8]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
	config->oneshot                    = false;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    22aa:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    22ac:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    22ae:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    22b0:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    22b2:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    22b4:	8593      	strh	r3, [r2, #44]	; 0x2c
static void configure_tc(void)
{
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	
	config_tc.counter_size		= TC_COUNTER_SIZE_8BIT;
    22b6:	3304      	adds	r3, #4
    22b8:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source		= GCLK_GENERATOR_2;
    22ba:	3b02      	subs	r3, #2
    22bc:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV16;
    22be:	2380      	movs	r3, #128	; 0x80
	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    22c0:	2100      	movs	r1, #0
    22c2:	00db      	lsls	r3, r3, #3
	config->run_in_standby             = false;
    22c4:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    22c6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    22c8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    22ca:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    22cc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    22ce:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    22d0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    22d2:	7711      	strb	r1, [r2, #28]
    22d4:	8093      	strh	r3, [r2, #4]
	config_tc.reload_action		= TC_RELOAD_ACTION_GCLK;
	config_tc.oneshot			= false;
	config_tc.counter_8_bit.period = 250;
    22d6:	21fa      	movs	r1, #250	; 0xfa
    22d8:	2329      	movs	r3, #41	; 0x29
	
	tc_init(&tc_instance,TIMER_MODULE,&config_tc);
    22da:	4c19      	ldr	r4, [pc, #100]	; (2340 <timer_init+0xa4>)
	config_tc.counter_size		= TC_COUNTER_SIZE_8BIT;
	config_tc.clock_source		= GCLK_GENERATOR_2;
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV16;
	config_tc.reload_action		= TC_RELOAD_ACTION_GCLK;
	config_tc.oneshot			= false;
	config_tc.counter_8_bit.period = 250;
    22dc:	54d1      	strb	r1, [r2, r3]
	
	tc_init(&tc_instance,TIMER_MODULE,&config_tc);
    22de:	1c20      	adds	r0, r4, #0
    22e0:	4918      	ldr	r1, [pc, #96]	; (2344 <timer_init+0xa8>)
    22e2:	4b19      	ldr	r3, [pc, #100]	; (2348 <timer_init+0xac>)
    22e4:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22e6:	217f      	movs	r1, #127	; 0x7f
    22e8:	6822      	ldr	r2, [r4, #0]
    22ea:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    22ec:	438b      	bics	r3, r1
    22ee:	d1fc      	bne.n	22ea <timer_init+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    22f0:	8811      	ldrh	r1, [r2, #0]
	}
}

static void configure_tc_callback(void)
{
	tc_register_callback(&tc_instance,tc_callback_0_5ms,(TC_CALLBACK_OVERFLOW));
    22f2:	4e16      	ldr	r6, [pc, #88]	; (234c <timer_init+0xb0>)
    22f4:	3302      	adds	r3, #2
    22f6:	430b      	orrs	r3, r1
    22f8:	8013      	strh	r3, [r2, #0]
    22fa:	4d15      	ldr	r5, [pc, #84]	; (2350 <timer_init+0xb4>)
    22fc:	1c31      	adds	r1, r6, #0
    22fe:	1c20      	adds	r0, r4, #0
    2300:	2200      	movs	r2, #0
    2302:	47a8      	blx	r5
	tc_register_callback(&tc_instance,tc_callback_0_5ms,(TC_CALLBACK_CC_CHANNEL0));
    2304:	1c31      	adds	r1, r6, #0
    2306:	1c20      	adds	r0, r4, #0
    2308:	2202      	movs	r2, #2
    230a:	47a8      	blx	r5
	tc_register_callback(&tc_instance,tc_callback_0_5ms,(TC_CALLBACK_CC_CHANNEL1));
    230c:	1c31      	adds	r1, r6, #0
    230e:	2203      	movs	r2, #3
    2310:	1c20      	adds	r0, r4, #0
    2312:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2314:	6820      	ldr	r0, [r4, #0]
    2316:	4b0f      	ldr	r3, [pc, #60]	; (2354 <timer_init+0xb8>)
    2318:	4798      	blx	r3
    231a:	221f      	movs	r2, #31
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    231c:	4b0e      	ldr	r3, [pc, #56]	; (2358 <timer_init+0xbc>)
    231e:	5c1b      	ldrb	r3, [r3, r0]
    2320:	4013      	ands	r3, r2
    2322:	3a1e      	subs	r2, #30
    2324:	1c11      	adds	r1, r2, #0
    2326:	4099      	lsls	r1, r3
    2328:	1c0b      	adds	r3, r1, #0
    232a:	490c      	ldr	r1, [pc, #48]	; (235c <timer_init+0xc0>)
    232c:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    232e:	2301      	movs	r3, #1
    2330:	7e61      	ldrb	r1, [r4, #25]
    2332:	430b      	orrs	r3, r1
    2334:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2336:	6823      	ldr	r3, [r4, #0]
    2338:	735a      	strb	r2, [r3, #13]

void timer_init(void)
{
	configure_tc();
	configure_tc_callback();
    233a:	b00e      	add	sp, #56	; 0x38
    233c:	bd70      	pop	{r4, r5, r6, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	200002c0 	.word	0x200002c0
    2344:	42002000 	.word	0x42002000
    2348:	00001ca9 	.word	0x00001ca9
    234c:	000021ad 	.word	0x000021ad
    2350:	000018f5 	.word	0x000018f5
    2354:	00001c29 	.word	0x00001c29
    2358:	0000390c 	.word	0x0000390c
    235c:	e000e100 	.word	0xe000e100

00002360 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2362:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2364:	2601      	movs	r6, #1
    2366:	4c0b      	ldr	r4, [pc, #44]	; (2394 <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    2368:	4d0b      	ldr	r5, [pc, #44]	; (2398 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    236a:	4f0c      	ldr	r7, [pc, #48]	; (239c <EIC_Handler+0x3c>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    236c:	7023      	strb	r3, [r4, #0]
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    236e:	1c32      	adds	r2, r6, #0
    2370:	409a      	lsls	r2, r3

	return (eic_module->INTFLAG.reg & eic_mask);
    2372:	6929      	ldr	r1, [r5, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2374:	4211      	tst	r1, r2
    2376:	d006      	beq.n	2386 <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2378:	612a      	str	r2, [r5, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    237a:	009b      	lsls	r3, r3, #2
    237c:	59db      	ldr	r3, [r3, r7]
    237e:	2b00      	cmp	r3, #0
    2380:	d000      	beq.n	2384 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2382:	4798      	blx	r3
    2384:	7823      	ldrb	r3, [r4, #0]

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2386:	3301      	adds	r3, #1
    2388:	b2db      	uxtb	r3, r3
    238a:	7023      	strb	r3, [r4, #0]
    238c:	2b0f      	cmp	r3, #15
    238e:	d9ee      	bls.n	236e <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    2390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	200002dc 	.word	0x200002dc
    2398:	40001800 	.word	0x40001800
    239c:	200002e0 	.word	0x200002e0

000023a0 <_system_extint_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    23a0:	2340      	movs	r3, #64	; 0x40
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    23a2:	b510      	push	{r4, lr}
    23a4:	4a14      	ldr	r2, [pc, #80]	; (23f8 <_system_extint_init+0x58>)
    23a6:	b082      	sub	sp, #8
    23a8:	6991      	ldr	r1, [r2, #24]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    23aa:	2003      	movs	r0, #3
    23ac:	430b      	orrs	r3, r1
    23ae:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    23b0:	2300      	movs	r3, #0
    23b2:	a901      	add	r1, sp, #4
    23b4:	700b      	strb	r3, [r1, #0]
    23b6:	4b11      	ldr	r3, [pc, #68]	; (23fc <_system_extint_init+0x5c>)
    23b8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    23ba:	4b11      	ldr	r3, [pc, #68]	; (2400 <_system_extint_init+0x60>)
    23bc:	2003      	movs	r0, #3
    23be:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    23c0:	2301      	movs	r3, #1
    23c2:	4a10      	ldr	r2, [pc, #64]	; (2404 <_system_extint_init+0x64>)
    23c4:	7811      	ldrb	r1, [r2, #0]
    23c6:	430b      	orrs	r3, r1
    23c8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    23ca:	7853      	ldrb	r3, [r2, #1]
    23cc:	4c0d      	ldr	r4, [pc, #52]	; (2404 <_system_extint_init+0x64>)
    23ce:	b25b      	sxtb	r3, r3
    23d0:	2b00      	cmp	r3, #0
    23d2:	dbfa      	blt.n	23ca <_system_extint_init+0x2a>
    23d4:	2240      	movs	r2, #64	; 0x40
    23d6:	4b0c      	ldr	r3, [pc, #48]	; (2408 <_system_extint_init+0x68>)
    23d8:	480c      	ldr	r0, [pc, #48]	; (240c <_system_extint_init+0x6c>)
    23da:	2100      	movs	r1, #0
    23dc:	4798      	blx	r3
    23de:	2210      	movs	r2, #16
    23e0:	4b0b      	ldr	r3, [pc, #44]	; (2410 <_system_extint_init+0x70>)
    23e2:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    23e4:	2302      	movs	r3, #2
    23e6:	7822      	ldrb	r2, [r4, #0]
    23e8:	4313      	orrs	r3, r2
    23ea:	7023      	strb	r3, [r4, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    23ec:	7863      	ldrb	r3, [r4, #1]
    23ee:	b25b      	sxtb	r3, r3
    23f0:	2b00      	cmp	r3, #0
    23f2:	dbfb      	blt.n	23ec <_system_extint_init+0x4c>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    23f4:	b002      	add	sp, #8
    23f6:	bd10      	pop	{r4, pc}
    23f8:	40000400 	.word	0x40000400
    23fc:	00003125 	.word	0x00003125
    2400:	00003189 	.word	0x00003189
    2404:	40001800 	.word	0x40001800
    2408:	0000385f 	.word	0x0000385f
    240c:	200002e0 	.word	0x200002e0
    2410:	e000e100 	.word	0xe000e100

00002414 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2414:	4770      	bx	lr
    2416:	46c0      	nop			; (mov r8, r8)

00002418 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2418:	4b0b      	ldr	r3, [pc, #44]	; (2448 <cpu_irq_enter_critical+0x30>)
    241a:	681a      	ldr	r2, [r3, #0]
    241c:	2a00      	cmp	r2, #0
    241e:	d105      	bne.n	242c <cpu_irq_enter_critical+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2420:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    2424:	2900      	cmp	r1, #0
    2426:	d005      	beq.n	2434 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2428:	4908      	ldr	r1, [pc, #32]	; (244c <cpu_irq_enter_critical+0x34>)
    242a:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    242c:	681a      	ldr	r2, [r3, #0]
    242e:	3201      	adds	r2, #1
    2430:	601a      	str	r2, [r3, #0]
}
    2432:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2434:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2436:	f3bf 8f5f 	dmb	sy

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
    243a:	4a05      	ldr	r2, [pc, #20]	; (2450 <cpu_irq_enter_critical+0x38>)
    243c:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    243e:	4a03      	ldr	r2, [pc, #12]	; (244c <cpu_irq_enter_critical+0x34>)
    2440:	3101      	adds	r1, #1
    2442:	7011      	strb	r1, [r2, #0]
    2444:	e7f2      	b.n	242c <cpu_irq_enter_critical+0x14>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	200001fc 	.word	0x200001fc
    244c:	20000200 	.word	0x20000200
    2450:	20000014 	.word	0x20000014

00002454 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2454:	4b08      	ldr	r3, [pc, #32]	; (2478 <cpu_irq_leave_critical+0x24>)
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	3a01      	subs	r2, #1
    245a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d109      	bne.n	2476 <cpu_irq_leave_critical+0x22>
    2462:	4b06      	ldr	r3, [pc, #24]	; (247c <cpu_irq_leave_critical+0x28>)
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d005      	beq.n	2476 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    246a:	2201      	movs	r2, #1
    246c:	4b04      	ldr	r3, [pc, #16]	; (2480 <cpu_irq_leave_critical+0x2c>)
    246e:	701a      	strb	r2, [r3, #0]
    2470:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2474:	b662      	cpsie	i
	}
}
    2476:	4770      	bx	lr
    2478:	200001fc 	.word	0x200001fc
    247c:	20000200 	.word	0x20000200
    2480:	20000014 	.word	0x20000014

00002484 <port_pin_set_config>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2484:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2486:	b500      	push	{lr}
    2488:	b083      	sub	sp, #12
    248a:	ab01      	add	r3, sp, #4
    248c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    248e:	780a      	ldrb	r2, [r1, #0]
    2490:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2492:	784a      	ldrb	r2, [r1, #1]
    2494:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2496:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2498:	1c19      	adds	r1, r3, #0
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
	pinmux_config.powersave    = config->powersave;
    249a:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    249c:	4b01      	ldr	r3, [pc, #4]	; (24a4 <port_pin_set_config+0x20>)
    249e:	4798      	blx	r3
}
    24a0:	b003      	add	sp, #12
    24a2:	bd00      	pop	{pc}
    24a4:	0000328d 	.word	0x0000328d

000024a8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    24a8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    24aa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    24ac:	2340      	movs	r3, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    24ae:	2400      	movs	r4, #0
    24b0:	4281      	cmp	r1, r0
    24b2:	d202      	bcs.n	24ba <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    24b4:	1c18      	adds	r0, r3, #0
    24b6:	bd10      	pop	{r4, pc}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    24b8:	1c1c      	adds	r4, r3, #0
    24ba:	1c63      	adds	r3, r4, #1
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    24bc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    24be:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    24c0:	4288      	cmp	r0, r1
    24c2:	d9f9      	bls.n	24b8 <_sercom_get_sync_baud_val+0x10>


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    24c4:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    24c6:	2cff      	cmp	r4, #255	; 0xff
    24c8:	d8f4      	bhi.n	24b4 <_sercom_get_sync_baud_val+0xc>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    24ca:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    24cc:	2300      	movs	r3, #0
    24ce:	e7f1      	b.n	24b4 <_sercom_get_sync_baud_val+0xc>

000024d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    24d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d2:	4656      	mov	r6, sl
    24d4:	464d      	mov	r5, r9
    24d6:	4644      	mov	r4, r8
    24d8:	465f      	mov	r7, fp
    24da:	b4f0      	push	{r4, r5, r6, r7}
    24dc:	1c04      	adds	r4, r0, #0
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    24de:	1c25      	adds	r5, r4, #0
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    24e0:	b089      	sub	sp, #36	; 0x24
    24e2:	a812      	add	r0, sp, #72	; 0x48
    24e4:	7806      	ldrb	r6, [r0, #0]
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    24e6:	2040      	movs	r0, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    24e8:	4375      	muls	r5, r6
    24ea:	428d      	cmp	r5, r1
    24ec:	d906      	bls.n	24fc <_sercom_get_async_baud_val+0x2c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    24ee:	b009      	add	sp, #36	; 0x24
    24f0:	bc3c      	pop	{r2, r3, r4, r5}
    24f2:	4690      	mov	r8, r2
    24f4:	4699      	mov	r9, r3
    24f6:	46a2      	mov	sl, r4
    24f8:	46ab      	mov	fp, r5
    24fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24fc:	9206      	str	r2, [sp, #24]
    24fe:	1c0d      	adds	r5, r1, #0
    2500:	1c22      	adds	r2, r4, #0
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2502:	2b00      	cmp	r3, #0
    2504:	d14f      	bne.n	25a6 <_sercom_get_async_baud_val+0xd6>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2506:	1c30      	adds	r0, r6, #0
    2508:	4c6a      	ldr	r4, [pc, #424]	; (26b4 <_sercom_get_async_baud_val+0x1e4>)
    250a:	2100      	movs	r1, #0
    250c:	47a0      	blx	r4
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    250e:	2200      	movs	r2, #0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2510:	4681      	mov	r9, r0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2512:	4690      	mov	r8, r2
    2514:	2000      	movs	r0, #0
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2516:	2300      	movs	r3, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2518:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    251a:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    251c:	3220      	adds	r2, #32
    251e:	4692      	mov	sl, r2
    2520:	3a1f      	subs	r2, #31
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2522:	9502      	str	r5, [sp, #8]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2524:	1c04      	adds	r4, r0, #0
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2526:	9303      	str	r3, [sp, #12]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2528:	4640      	mov	r0, r8
    252a:	4694      	mov	ip, r2
    252c:	46c8      	mov	r8, r9
    252e:	1c0d      	adds	r5, r1, #0
    2530:	46b1      	mov	r9, r6
    2532:	e005      	b.n	2540 <_sercom_get_async_baud_val+0x70>
    2534:	428a      	cmp	r2, r1
    2536:	d04b      	beq.n	25d0 <_sercom_get_async_baud_val+0x100>
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2538:	464a      	mov	r2, r9
    253a:	1e51      	subs	r1, r2, #1
    253c:	4689      	mov	r9, r1
    253e:	d32f      	bcc.n	25a0 <_sercom_get_async_baud_val+0xd0>
		bit_shift = (uint64_t)1 << i;
    2540:	2120      	movs	r1, #32
    2542:	464a      	mov	r2, r9
    2544:	4249      	negs	r1, r1
    2546:	1852      	adds	r2, r2, r1
    2548:	d43b      	bmi.n	25c2 <_sercom_get_async_baud_val+0xf2>
    254a:	4661      	mov	r1, ip
    254c:	4091      	lsls	r1, r2
    254e:	1c0a      	adds	r2, r1, #0
    2550:	464e      	mov	r6, r9
    2552:	4661      	mov	r1, ip

		r = r << 1;
    2554:	1924      	adds	r4, r4, r4
    2556:	416d      	adcs	r5, r5
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2558:	40b1      	lsls	r1, r6
    255a:	4647      	mov	r7, r8

		r = r << 1;

		if (n & bit_shift) {
			r |= 0x01;
    255c:	4666      	mov	r6, ip
    255e:	4326      	orrs	r6, r4
    2560:	4217      	tst	r7, r2
    2562:	d000      	beq.n	2566 <_sercom_get_async_baud_val+0x96>
    2564:	1c34      	adds	r4, r6, #0
		}

		if (r >= d) {
			r = r - d;
    2566:	9e02      	ldr	r6, [sp, #8]
    2568:	9f03      	ldr	r7, [sp, #12]
    256a:	9501      	str	r5, [sp, #4]
    256c:	9400      	str	r4, [sp, #0]
    256e:	9c00      	ldr	r4, [sp, #0]
    2570:	9d01      	ldr	r5, [sp, #4]
    2572:	1ba4      	subs	r4, r4, r6
    2574:	41bd      	sbcs	r5, r7
    2576:	1c3e      	adds	r6, r7, #0
    2578:	9f01      	ldr	r7, [sp, #4]
			q |= bit_shift;
    257a:	4319      	orrs	r1, r3
    257c:	4302      	orrs	r2, r0
    257e:	42be      	cmp	r6, r7
    2580:	d81c      	bhi.n	25bc <_sercom_get_async_baud_val+0xec>
    2582:	9e03      	ldr	r6, [sp, #12]
    2584:	42be      	cmp	r6, r7
    2586:	d015      	beq.n	25b4 <_sercom_get_async_baud_val+0xe4>
    2588:	1c0b      	adds	r3, r1, #0
    258a:	1c10      	adds	r0, r2, #0
    258c:	9901      	ldr	r1, [sp, #4]
    258e:	9a03      	ldr	r2, [sp, #12]
    2590:	428a      	cmp	r2, r1
    2592:	d9cf      	bls.n	2534 <_sercom_get_async_baud_val+0x64>
    2594:	9c00      	ldr	r4, [sp, #0]
    2596:	9d01      	ldr	r5, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2598:	464a      	mov	r2, r9
    259a:	1e51      	subs	r1, r2, #1
    259c:	4689      	mov	r9, r1
    259e:	d2cf      	bcs.n	2540 <_sercom_get_async_baud_val+0x70>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    25a0:	425c      	negs	r4, r3
    25a2:	0c24      	lsrs	r4, r4, #16
    25a4:	e002      	b.n	25ac <_sercom_get_async_baud_val+0xdc>
    25a6:	2400      	movs	r4, #0
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    25a8:	2b01      	cmp	r3, #1
    25aa:	d018      	beq.n	25de <_sercom_get_async_baud_val+0x10e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    25ac:	9b06      	ldr	r3, [sp, #24]
	return STATUS_OK;
    25ae:	2000      	movs	r0, #0
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    25b0:	801c      	strh	r4, [r3, #0]
	return STATUS_OK;
    25b2:	e79c      	b.n	24ee <_sercom_get_async_baud_val+0x1e>
    25b4:	9e02      	ldr	r6, [sp, #8]
    25b6:	9f00      	ldr	r7, [sp, #0]
    25b8:	42be      	cmp	r6, r7
    25ba:	d9e5      	bls.n	2588 <_sercom_get_async_baud_val+0xb8>
    25bc:	1c19      	adds	r1, r3, #0
    25be:	1c02      	adds	r2, r0, #0
    25c0:	e7e2      	b.n	2588 <_sercom_get_async_baud_val+0xb8>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    25c2:	4649      	mov	r1, r9
    25c4:	4652      	mov	r2, sl
    25c6:	1a52      	subs	r2, r2, r1
    25c8:	4661      	mov	r1, ip
    25ca:	40d1      	lsrs	r1, r2
    25cc:	1c0a      	adds	r2, r1, #0
    25ce:	e7bf      	b.n	2550 <_sercom_get_async_baud_val+0x80>
    25d0:	9a02      	ldr	r2, [sp, #8]
    25d2:	9900      	ldr	r1, [sp, #0]
    25d4:	428a      	cmp	r2, r1
    25d6:	d9af      	bls.n	2538 <_sercom_get_async_baud_val+0x68>
    25d8:	9c00      	ldr	r4, [sp, #0]
    25da:	9d01      	ldr	r5, [sp, #4]
    25dc:	e7dc      	b.n	2598 <_sercom_get_async_baud_val+0xc8>
    25de:	0f4b      	lsrs	r3, r1, #29
    25e0:	4698      	mov	r8, r3
    25e2:	00cb      	lsls	r3, r1, #3
    25e4:	469a      	mov	sl, r3
    25e6:	1c30      	adds	r0, r6, #0
    25e8:	2300      	movs	r3, #0
    25ea:	2100      	movs	r1, #0
    25ec:	4c31      	ldr	r4, [pc, #196]	; (26b4 <_sercom_get_async_baud_val+0x1e4>)
    25ee:	47a0      	blx	r4
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    25f0:	2300      	movs	r3, #0
    25f2:	9305      	str	r3, [sp, #20]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    25f4:	3301      	adds	r3, #1
    25f6:	469c      	mov	ip, r3
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    25f8:	46c1      	mov	r9, r8
    25fa:	466b      	mov	r3, sp
    25fc:	7d1b      	ldrb	r3, [r3, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    25fe:	2200      	movs	r2, #0
    2600:	9307      	str	r3, [sp, #28]
    2602:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2604:	273f      	movs	r7, #63	; 0x3f
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2606:	4698      	mov	r8, r3
    2608:	2300      	movs	r3, #0
    260a:	e018      	b.n	263e <_sercom_get_async_baud_val+0x16e>
    260c:	465c      	mov	r4, fp
    260e:	1c1d      	adds	r5, r3, #0
    2610:	1c22      	adds	r2, r4, #0
    2612:	1c2b      	adds	r3, r5, #0
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    2614:	1a24      	subs	r4, r4, r0
    2616:	418d      	sbcs	r5, r1
			q |= bit_shift;
    2618:	4646      	mov	r6, r8
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    261a:	9402      	str	r4, [sp, #8]
    261c:	9503      	str	r5, [sp, #12]
			q |= bit_shift;
    261e:	9c00      	ldr	r4, [sp, #0]
    2620:	4334      	orrs	r4, r6
    2622:	1c26      	adds	r6, r4, #0
    2624:	4299      	cmp	r1, r3
    2626:	d838      	bhi.n	269a <_sercom_get_async_baud_val+0x1ca>
    2628:	d035      	beq.n	2696 <_sercom_get_async_baud_val+0x1c6>
    262a:	46b0      	mov	r8, r6
    262c:	4299      	cmp	r1, r3
    262e:	d820      	bhi.n	2672 <_sercom_get_async_baud_val+0x1a2>
    2630:	d01d      	beq.n	266e <_sercom_get_async_baud_val+0x19e>
    2632:	9c02      	ldr	r4, [sp, #8]
    2634:	9d03      	ldr	r5, [sp, #12]
    2636:	1c22      	adds	r2, r4, #0
    2638:	1c2b      	adds	r3, r5, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    263a:	3f01      	subs	r7, #1
    263c:	d31f      	bcc.n	267e <_sercom_get_async_baud_val+0x1ae>
		bit_shift = (uint64_t)1 << i;
    263e:	2420      	movs	r4, #32
    2640:	4264      	negs	r4, r4
    2642:	193d      	adds	r5, r7, r4
    2644:	d42b      	bmi.n	269e <_sercom_get_async_baud_val+0x1ce>
    2646:	4664      	mov	r4, ip
    2648:	40ac      	lsls	r4, r5
    264a:	1c25      	adds	r5, r4, #0

		r = r << 1;
    264c:	1892      	adds	r2, r2, r2
    264e:	415b      	adcs	r3, r3

		if (n & bit_shift) {
			r |= 0x01;
    2650:	4664      	mov	r4, ip
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2652:	4666      	mov	r6, ip

		r = r << 1;

		if (n & bit_shift) {
			r |= 0x01;
    2654:	4314      	orrs	r4, r2
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    2656:	40be      	lsls	r6, r7

		r = r << 1;

		if (n & bit_shift) {
			r |= 0x01;
    2658:	46a3      	mov	fp, r4
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;

		r = r << 1;

		if (n & bit_shift) {
    265a:	4654      	mov	r4, sl
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    265c:	9600      	str	r6, [sp, #0]

		r = r << 1;

		if (n & bit_shift) {
    265e:	4034      	ands	r4, r6
    2660:	464e      	mov	r6, r9
    2662:	4035      	ands	r5, r6
    2664:	432c      	orrs	r4, r5
    2666:	d1d1      	bne.n	260c <_sercom_get_async_baud_val+0x13c>
    2668:	1c14      	adds	r4, r2, #0
    266a:	1c1d      	adds	r5, r3, #0
    266c:	e7d0      	b.n	2610 <_sercom_get_async_baud_val+0x140>
    266e:	4290      	cmp	r0, r2
    2670:	d9df      	bls.n	2632 <_sercom_get_async_baud_val+0x162>
    2672:	1c14      	adds	r4, r2, #0
    2674:	1c1d      	adds	r5, r3, #0
    2676:	1c22      	adds	r2, r4, #0
    2678:	1c2b      	adds	r3, r5, #0
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    267a:	3f01      	subs	r7, #1
    267c:	d2df      	bcs.n	263e <_sercom_get_async_baud_val+0x16e>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    267e:	9b05      	ldr	r3, [sp, #20]
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    2680:	4a0d      	ldr	r2, [pc, #52]	; (26b8 <_sercom_get_async_baud_val+0x1e8>)
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    2682:	1af6      	subs	r6, r6, r3
			baud_int = baud_int / BAUD_FP_MAX;
    2684:	08f6      	lsrs	r6, r6, #3
			if(baud_int < BAUD_INT_MAX) {
    2686:	4296      	cmp	r6, r2
    2688:	d90f      	bls.n	26aa <_sercom_get_async_baud_val+0x1da>
    268a:	3301      	adds	r3, #1
    268c:	9305      	str	r3, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    268e:	2b08      	cmp	r3, #8
    2690:	d1b3      	bne.n	25fa <_sercom_get_async_baud_val+0x12a>
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2692:	2040      	movs	r0, #64	; 0x40
    2694:	e72b      	b.n	24ee <_sercom_get_async_baud_val+0x1e>
    2696:	4290      	cmp	r0, r2
    2698:	d9c7      	bls.n	262a <_sercom_get_async_baud_val+0x15a>
    269a:	4646      	mov	r6, r8
    269c:	e7c5      	b.n	262a <_sercom_get_async_baud_val+0x15a>
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    269e:	2420      	movs	r4, #32
    26a0:	1be5      	subs	r5, r4, r7
    26a2:	4664      	mov	r4, ip
    26a4:	40ec      	lsrs	r4, r5
    26a6:	1c25      	adds	r5, r4, #0
    26a8:	e7d0      	b.n	264c <_sercom_get_async_baud_val+0x17c>
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    26aa:	9b07      	ldr	r3, [sp, #28]
    26ac:	035c      	lsls	r4, r3, #13
    26ae:	4334      	orrs	r4, r6
    26b0:	b2a4      	uxth	r4, r4
    26b2:	e77b      	b.n	25ac <_sercom_get_async_baud_val+0xdc>
    26b4:	000037ad 	.word	0x000037ad
    26b8:	00001fff 	.word	0x00001fff

000026bc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    26bc:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    26be:	4c0e      	ldr	r4, [pc, #56]	; (26f8 <sercom_set_gclk_generator+0x3c>)
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    26c0:	b083      	sub	sp, #12
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    26c2:	7823      	ldrb	r3, [r4, #0]
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    26c4:	1c05      	adds	r5, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    26c6:	2b00      	cmp	r3, #0
    26c8:	d006      	beq.n	26d8 <sercom_set_gclk_generator+0x1c>
    26ca:	2900      	cmp	r1, #0
    26cc:	d104      	bne.n	26d8 <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    26ce:	7863      	ldrb	r3, [r4, #1]
    26d0:	4283      	cmp	r3, r0
    26d2:	d00f      	beq.n	26f4 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    26d4:	201d      	movs	r0, #29
    26d6:	e00b      	b.n	26f0 <sercom_set_gclk_generator+0x34>
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    26d8:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    26da:	200c      	movs	r0, #12
    26dc:	4b07      	ldr	r3, [pc, #28]	; (26fc <sercom_set_gclk_generator+0x40>)
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    26de:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    26e0:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    26e2:	200c      	movs	r0, #12
    26e4:	4b06      	ldr	r3, [pc, #24]	; (2700 <sercom_set_gclk_generator+0x44>)
    26e6:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    26e8:	2301      	movs	r3, #1

		return STATUS_OK;
    26ea:	2000      	movs	r0, #0
		gclk_chan_conf.source_generator = generator_source;
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(SERCOM_GCLK_ID);

		/* Save config */
		_sercom_config.generator_source = generator_source;
    26ec:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    26ee:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    26f0:	b003      	add	sp, #12
    26f2:	bd30      	pop	{r4, r5, pc}
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    26f4:	2000      	movs	r0, #0
    26f6:	e7fb      	b.n	26f0 <sercom_set_gclk_generator+0x34>
    26f8:	20000204 	.word	0x20000204
    26fc:	00003125 	.word	0x00003125
    2700:	00003189 	.word	0x00003189

00002704 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2704:	4b3a      	ldr	r3, [pc, #232]	; (27f0 <_sercom_get_default_pad+0xec>)
    2706:	4298      	cmp	r0, r3
    2708:	d043      	beq.n	2792 <_sercom_get_default_pad+0x8e>
    270a:	d90a      	bls.n	2722 <_sercom_get_default_pad+0x1e>
    270c:	4b39      	ldr	r3, [pc, #228]	; (27f4 <_sercom_get_default_pad+0xf0>)
    270e:	4298      	cmp	r0, r3
    2710:	d017      	beq.n	2742 <_sercom_get_default_pad+0x3e>
    2712:	4b39      	ldr	r3, [pc, #228]	; (27f8 <_sercom_get_default_pad+0xf4>)
    2714:	4298      	cmp	r0, r3
    2716:	d032      	beq.n	277e <_sercom_get_default_pad+0x7a>
    2718:	4b38      	ldr	r3, [pc, #224]	; (27fc <_sercom_get_default_pad+0xf8>)
    271a:	4298      	cmp	r0, r3
    271c:	d01b      	beq.n	2756 <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    271e:	2000      	movs	r0, #0
}
    2720:	4770      	bx	lr
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2722:	4b37      	ldr	r3, [pc, #220]	; (2800 <_sercom_get_default_pad+0xfc>)
    2724:	4298      	cmp	r0, r3
    2726:	d020      	beq.n	276a <_sercom_get_default_pad+0x66>
    2728:	4b36      	ldr	r3, [pc, #216]	; (2804 <_sercom_get_default_pad+0x100>)
    272a:	4298      	cmp	r0, r3
    272c:	d1f7      	bne.n	271e <_sercom_get_default_pad+0x1a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    272e:	2901      	cmp	r1, #1
    2730:	d043      	beq.n	27ba <_sercom_get_default_pad+0xb6>
    2732:	2900      	cmp	r1, #0
    2734:	d03f      	beq.n	27b6 <_sercom_get_default_pad+0xb2>
    2736:	2902      	cmp	r1, #2
    2738:	d03b      	beq.n	27b2 <_sercom_get_default_pad+0xae>
    273a:	2903      	cmp	r1, #3
    273c:	d1ef      	bne.n	271e <_sercom_get_default_pad+0x1a>
    273e:	4832      	ldr	r0, [pc, #200]	; (2808 <_sercom_get_default_pad+0x104>)
    2740:	e7ee      	b.n	2720 <_sercom_get_default_pad+0x1c>
    2742:	2901      	cmp	r1, #1
    2744:	d031      	beq.n	27aa <_sercom_get_default_pad+0xa6>
    2746:	2900      	cmp	r1, #0
    2748:	d02d      	beq.n	27a6 <_sercom_get_default_pad+0xa2>
    274a:	2902      	cmp	r1, #2
    274c:	d02f      	beq.n	27ae <_sercom_get_default_pad+0xaa>
    274e:	2903      	cmp	r1, #3
    2750:	d1e5      	bne.n	271e <_sercom_get_default_pad+0x1a>
    2752:	482e      	ldr	r0, [pc, #184]	; (280c <_sercom_get_default_pad+0x108>)
    2754:	e7e4      	b.n	2720 <_sercom_get_default_pad+0x1c>
    2756:	2901      	cmp	r1, #1
    2758:	d03f      	beq.n	27da <_sercom_get_default_pad+0xd6>
    275a:	2900      	cmp	r1, #0
    275c:	d03b      	beq.n	27d6 <_sercom_get_default_pad+0xd2>
    275e:	2902      	cmp	r1, #2
    2760:	d037      	beq.n	27d2 <_sercom_get_default_pad+0xce>
    2762:	2903      	cmp	r1, #3
    2764:	d1db      	bne.n	271e <_sercom_get_default_pad+0x1a>
    2766:	482a      	ldr	r0, [pc, #168]	; (2810 <_sercom_get_default_pad+0x10c>)
    2768:	e7da      	b.n	2720 <_sercom_get_default_pad+0x1c>
    276a:	2901      	cmp	r1, #1
    276c:	d03d      	beq.n	27ea <_sercom_get_default_pad+0xe6>
    276e:	2900      	cmp	r1, #0
    2770:	d039      	beq.n	27e6 <_sercom_get_default_pad+0xe2>
    2772:	2902      	cmp	r1, #2
    2774:	d02b      	beq.n	27ce <_sercom_get_default_pad+0xca>
    2776:	2903      	cmp	r1, #3
    2778:	d1d1      	bne.n	271e <_sercom_get_default_pad+0x1a>
    277a:	4826      	ldr	r0, [pc, #152]	; (2814 <_sercom_get_default_pad+0x110>)
    277c:	e7d0      	b.n	2720 <_sercom_get_default_pad+0x1c>
    277e:	2901      	cmp	r1, #1
    2780:	d023      	beq.n	27ca <_sercom_get_default_pad+0xc6>
    2782:	2900      	cmp	r1, #0
    2784:	d01f      	beq.n	27c6 <_sercom_get_default_pad+0xc2>
    2786:	2902      	cmp	r1, #2
    2788:	d01b      	beq.n	27c2 <_sercom_get_default_pad+0xbe>
    278a:	2903      	cmp	r1, #3
    278c:	d1c7      	bne.n	271e <_sercom_get_default_pad+0x1a>
    278e:	4822      	ldr	r0, [pc, #136]	; (2818 <_sercom_get_default_pad+0x114>)
    2790:	e7c6      	b.n	2720 <_sercom_get_default_pad+0x1c>
    2792:	2901      	cmp	r1, #1
    2794:	d025      	beq.n	27e2 <_sercom_get_default_pad+0xde>
    2796:	2900      	cmp	r1, #0
    2798:	d021      	beq.n	27de <_sercom_get_default_pad+0xda>
    279a:	2902      	cmp	r1, #2
    279c:	d00f      	beq.n	27be <_sercom_get_default_pad+0xba>
    279e:	2903      	cmp	r1, #3
    27a0:	d1bd      	bne.n	271e <_sercom_get_default_pad+0x1a>
    27a2:	481e      	ldr	r0, [pc, #120]	; (281c <_sercom_get_default_pad+0x118>)
    27a4:	e7bc      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27a6:	481e      	ldr	r0, [pc, #120]	; (2820 <_sercom_get_default_pad+0x11c>)
    27a8:	e7ba      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27aa:	481e      	ldr	r0, [pc, #120]	; (2824 <_sercom_get_default_pad+0x120>)
    27ac:	e7b8      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ae:	481e      	ldr	r0, [pc, #120]	; (2828 <_sercom_get_default_pad+0x124>)
    27b0:	e7b6      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27b2:	481e      	ldr	r0, [pc, #120]	; (282c <_sercom_get_default_pad+0x128>)
    27b4:	e7b4      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27b6:	2003      	movs	r0, #3
    27b8:	e7b2      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ba:	481d      	ldr	r0, [pc, #116]	; (2830 <_sercom_get_default_pad+0x12c>)
    27bc:	e7b0      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27be:	481d      	ldr	r0, [pc, #116]	; (2834 <_sercom_get_default_pad+0x130>)
    27c0:	e7ae      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27c2:	481d      	ldr	r0, [pc, #116]	; (2838 <_sercom_get_default_pad+0x134>)
    27c4:	e7ac      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27c6:	481d      	ldr	r0, [pc, #116]	; (283c <_sercom_get_default_pad+0x138>)
    27c8:	e7aa      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ca:	481d      	ldr	r0, [pc, #116]	; (2840 <_sercom_get_default_pad+0x13c>)
    27cc:	e7a8      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ce:	481d      	ldr	r0, [pc, #116]	; (2844 <_sercom_get_default_pad+0x140>)
    27d0:	e7a6      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27d2:	481d      	ldr	r0, [pc, #116]	; (2848 <_sercom_get_default_pad+0x144>)
    27d4:	e7a4      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27d6:	481d      	ldr	r0, [pc, #116]	; (284c <_sercom_get_default_pad+0x148>)
    27d8:	e7a2      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27da:	481d      	ldr	r0, [pc, #116]	; (2850 <_sercom_get_default_pad+0x14c>)
    27dc:	e7a0      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27de:	481d      	ldr	r0, [pc, #116]	; (2854 <_sercom_get_default_pad+0x150>)
    27e0:	e79e      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27e2:	481d      	ldr	r0, [pc, #116]	; (2858 <_sercom_get_default_pad+0x154>)
    27e4:	e79c      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27e6:	481d      	ldr	r0, [pc, #116]	; (285c <_sercom_get_default_pad+0x158>)
    27e8:	e79a      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ea:	481d      	ldr	r0, [pc, #116]	; (2860 <_sercom_get_default_pad+0x15c>)
    27ec:	e798      	b.n	2720 <_sercom_get_default_pad+0x1c>
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	42001000 	.word	0x42001000
    27f4:	42001800 	.word	0x42001800
    27f8:	42001c00 	.word	0x42001c00
    27fc:	42001400 	.word	0x42001400
    2800:	42000800 	.word	0x42000800
    2804:	42000c00 	.word	0x42000c00
    2808:	001f0003 	.word	0x001f0003
    280c:	000f0003 	.word	0x000f0003
    2810:	00130003 	.word	0x00130003
    2814:	00070003 	.word	0x00070003
    2818:	00190003 	.word	0x00190003
    281c:	000b0003 	.word	0x000b0003
    2820:	000c0003 	.word	0x000c0003
    2824:	000d0003 	.word	0x000d0003
    2828:	000e0003 	.word	0x000e0003
    282c:	001e0003 	.word	0x001e0003
    2830:	00010003 	.word	0x00010003
    2834:	000a0003 	.word	0x000a0003
    2838:	00180003 	.word	0x00180003
    283c:	00160003 	.word	0x00160003
    2840:	00170003 	.word	0x00170003
    2844:	00060003 	.word	0x00060003
    2848:	00120003 	.word	0x00120003
    284c:	00100003 	.word	0x00100003
    2850:	00110003 	.word	0x00110003
    2854:	00080003 	.word	0x00080003
    2858:	00090003 	.word	0x00090003
    285c:	00040003 	.word	0x00040003
    2860:	00050003 	.word	0x00050003

00002864 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2864:	b570      	push	{r4, r5, r6, lr}
    2866:	b086      	sub	sp, #24
    2868:	1c01      	adds	r1, r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    286a:	4668      	mov	r0, sp
    286c:	4b15      	ldr	r3, [pc, #84]	; (28c4 <_sercom_get_sercom_inst_index+0x60>)
    286e:	cb70      	ldmia	r3!, {r4, r5, r6}
    2870:	c070      	stmia	r0!, {r4, r5, r6}
    2872:	cb70      	ldmia	r3!, {r4, r5, r6}
    2874:	c070      	stmia	r0!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2876:	9b00      	ldr	r3, [sp, #0]
    2878:	428b      	cmp	r3, r1
    287a:	d011      	beq.n	28a0 <_sercom_get_sercom_inst_index+0x3c>
    287c:	9b01      	ldr	r3, [sp, #4]
    287e:	428b      	cmp	r3, r1
    2880:	d011      	beq.n	28a6 <_sercom_get_sercom_inst_index+0x42>
    2882:	9b02      	ldr	r3, [sp, #8]
    2884:	428b      	cmp	r3, r1
    2886:	d011      	beq.n	28ac <_sercom_get_sercom_inst_index+0x48>
    2888:	9b03      	ldr	r3, [sp, #12]
    288a:	428b      	cmp	r3, r1
    288c:	d011      	beq.n	28b2 <_sercom_get_sercom_inst_index+0x4e>
    288e:	9b04      	ldr	r3, [sp, #16]
    2890:	428b      	cmp	r3, r1
    2892:	d011      	beq.n	28b8 <_sercom_get_sercom_inst_index+0x54>
    2894:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2896:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2898:	428b      	cmp	r3, r1
    289a:	d010      	beq.n	28be <_sercom_get_sercom_inst_index+0x5a>
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    289c:	b006      	add	sp, #24
    289e:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28a0:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28a2:	b2c0      	uxtb	r0, r0
    28a4:	e7fa      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28a6:	2001      	movs	r0, #1
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28a8:	b2c0      	uxtb	r0, r0
    28aa:	e7f7      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28ac:	2002      	movs	r0, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28ae:	b2c0      	uxtb	r0, r0
    28b0:	e7f4      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28b2:	2003      	movs	r0, #3
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28b4:	b2c0      	uxtb	r0, r0
    28b6:	e7f1      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28b8:	2004      	movs	r0, #4
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28ba:	b2c0      	uxtb	r0, r0
    28bc:	e7ee      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    28be:	3005      	adds	r0, #5
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    28c0:	b2c0      	uxtb	r0, r0
    28c2:	e7eb      	b.n	289c <_sercom_get_sercom_inst_index+0x38>
    28c4:	00003914 	.word	0x00003914

000028c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    28c8:	4770      	bx	lr
    28ca:	46c0      	nop			; (mov r8, r8)

000028cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    28cc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    28ce:	4d0c      	ldr	r5, [pc, #48]	; (2900 <_sercom_set_handler+0x34>)
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    28d0:	4b0c      	ldr	r3, [pc, #48]	; (2904 <_sercom_set_handler+0x38>)
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    28d2:	782a      	ldrb	r2, [r5, #0]
    28d4:	2a00      	cmp	r2, #0
    28d6:	d10f      	bne.n	28f8 <_sercom_set_handler+0x2c>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    28d8:	4c0b      	ldr	r4, [pc, #44]	; (2908 <_sercom_set_handler+0x3c>)
    28da:	601c      	str	r4, [r3, #0]
    28dc:	605c      	str	r4, [r3, #4]
    28de:	609c      	str	r4, [r3, #8]
    28e0:	60dc      	str	r4, [r3, #12]
    28e2:	611c      	str	r4, [r3, #16]
    28e4:	615c      	str	r4, [r3, #20]
    28e6:	4c09      	ldr	r4, [pc, #36]	; (290c <_sercom_set_handler+0x40>)
    28e8:	6022      	str	r2, [r4, #0]
    28ea:	6062      	str	r2, [r4, #4]
    28ec:	60a2      	str	r2, [r4, #8]
    28ee:	60e2      	str	r2, [r4, #12]
    28f0:	6122      	str	r2, [r4, #16]
    28f2:	6162      	str	r2, [r4, #20]
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    28f4:	2201      	movs	r2, #1
    28f6:	702a      	strb	r2, [r5, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    28f8:	0080      	lsls	r0, r0, #2
    28fa:	5019      	str	r1, [r3, r0]
}
    28fc:	bd30      	pop	{r4, r5, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	20000206 	.word	0x20000206
    2904:	20000208 	.word	0x20000208
    2908:	000028c9 	.word	0x000028c9
    290c:	20000320 	.word	0x20000320

00002910 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2910:	b510      	push	{r4, lr}
    2912:	1c04      	adds	r4, r0, #0
    2914:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2916:	4906      	ldr	r1, [pc, #24]	; (2930 <_sercom_get_interrupt_vector+0x20>)
    2918:	2206      	movs	r2, #6
    291a:	4668      	mov	r0, sp
    291c:	4b05      	ldr	r3, [pc, #20]	; (2934 <_sercom_get_interrupt_vector+0x24>)
    291e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2920:	1c20      	adds	r0, r4, #0
    2922:	4b05      	ldr	r3, [pc, #20]	; (2938 <_sercom_get_interrupt_vector+0x28>)
    2924:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2926:	466b      	mov	r3, sp
    2928:	5618      	ldrsb	r0, [r3, r0]
}
    292a:	b002      	add	sp, #8
    292c:	bd10      	pop	{r4, pc}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	0000392c 	.word	0x0000392c
    2934:	0000384d 	.word	0x0000384d
    2938:	00002865 	.word	0x00002865

0000293c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    293c:	b508      	push	{r3, lr}
    293e:	4b02      	ldr	r3, [pc, #8]	; (2948 <SERCOM0_Handler+0xc>)
    2940:	2000      	movs	r0, #0
    2942:	681b      	ldr	r3, [r3, #0]
    2944:	4798      	blx	r3
    2946:	bd08      	pop	{r3, pc}
    2948:	20000208 	.word	0x20000208

0000294c <SERCOM1_Handler>:
    294c:	b508      	push	{r3, lr}
    294e:	4b02      	ldr	r3, [pc, #8]	; (2958 <SERCOM1_Handler+0xc>)
    2950:	2001      	movs	r0, #1
    2952:	685b      	ldr	r3, [r3, #4]
    2954:	4798      	blx	r3
    2956:	bd08      	pop	{r3, pc}
    2958:	20000208 	.word	0x20000208

0000295c <SERCOM2_Handler>:
    295c:	b508      	push	{r3, lr}
    295e:	4b02      	ldr	r3, [pc, #8]	; (2968 <SERCOM2_Handler+0xc>)
    2960:	2002      	movs	r0, #2
    2962:	689b      	ldr	r3, [r3, #8]
    2964:	4798      	blx	r3
    2966:	bd08      	pop	{r3, pc}
    2968:	20000208 	.word	0x20000208

0000296c <SERCOM3_Handler>:
    296c:	b508      	push	{r3, lr}
    296e:	4b02      	ldr	r3, [pc, #8]	; (2978 <SERCOM3_Handler+0xc>)
    2970:	2003      	movs	r0, #3
    2972:	68db      	ldr	r3, [r3, #12]
    2974:	4798      	blx	r3
    2976:	bd08      	pop	{r3, pc}
    2978:	20000208 	.word	0x20000208

0000297c <SERCOM4_Handler>:
    297c:	b508      	push	{r3, lr}
    297e:	4b02      	ldr	r3, [pc, #8]	; (2988 <SERCOM4_Handler+0xc>)
    2980:	2004      	movs	r0, #4
    2982:	691b      	ldr	r3, [r3, #16]
    2984:	4798      	blx	r3
    2986:	bd08      	pop	{r3, pc}
    2988:	20000208 	.word	0x20000208

0000298c <SERCOM5_Handler>:
    298c:	b508      	push	{r3, lr}
    298e:	4b02      	ldr	r3, [pc, #8]	; (2998 <SERCOM5_Handler+0xc>)
    2990:	2005      	movs	r0, #5
    2992:	695b      	ldr	r3, [r3, #20]
    2994:	4798      	blx	r3
    2996:	bd08      	pop	{r3, pc}
    2998:	20000208 	.word	0x20000208

0000299c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    299c:	b5f0      	push	{r4, r5, r6, r7, lr}
    299e:	464d      	mov	r5, r9
    29a0:	4644      	mov	r4, r8
    29a2:	4656      	mov	r6, sl
    29a4:	465f      	mov	r7, fp
    29a6:	b4f0      	push	{r4, r5, r6, r7}
    29a8:	1c05      	adds	r5, r0, #0
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29aa:	4b85      	ldr	r3, [pc, #532]	; (2bc0 <usart_init+0x224>)
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    29ac:	1c0c      	adds	r4, r1, #0
    29ae:	b08d      	sub	sp, #52	; 0x34
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    29b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29b2:	1c08      	adds	r0, r1, #0
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    29b4:	4691      	mov	r9, r2
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29b6:	4698      	mov	r8, r3
    29b8:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    29ba:	2301      	movs	r3, #1
    29bc:	6822      	ldr	r2, [r4, #0]
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29be:	1c06      	adds	r6, r0, #0
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    29c0:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    29c2:	4213      	tst	r3, r2
    29c4:	d006      	beq.n	29d4 <usart_init+0x38>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    29c6:	b00d      	add	sp, #52	; 0x34
    29c8:	bc3c      	pop	{r2, r3, r4, r5}
    29ca:	4690      	mov	r8, r2
    29cc:	4699      	mov	r9, r3
    29ce:	46a2      	mov	sl, r4
    29d0:	46ab      	mov	fp, r5
    29d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    29d4:	2702      	movs	r7, #2
    29d6:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    29d8:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    29da:	4017      	ands	r7, r2
    29dc:	d1f3      	bne.n	29c6 <usart_init+0x2a>
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    29de:	1cb0      	adds	r0, r6, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    29e0:	4083      	lsls	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    29e2:	4978      	ldr	r1, [pc, #480]	; (2bc4 <usart_init+0x228>)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    29e4:	360d      	adds	r6, #13
    29e6:	6a0a      	ldr	r2, [r1, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    29e8:	b2f6      	uxtb	r6, r6
    29ea:	4313      	orrs	r3, r2
    29ec:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    29ee:	464b      	mov	r3, r9
    29f0:	7f5b      	ldrb	r3, [r3, #29]
    29f2:	a906      	add	r1, sp, #24
    29f4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    29f6:	1c30      	adds	r0, r6, #0
    29f8:	4b73      	ldr	r3, [pc, #460]	; (2bc8 <usart_init+0x22c>)
    29fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    29fc:	1c30      	adds	r0, r6, #0
    29fe:	4b73      	ldr	r3, [pc, #460]	; (2bcc <usart_init+0x230>)
    2a00:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2a02:	464b      	mov	r3, r9
    2a04:	2100      	movs	r1, #0
    2a06:	7f58      	ldrb	r0, [r3, #29]
    2a08:	4b71      	ldr	r3, [pc, #452]	; (2bd0 <usart_init+0x234>)
    2a0a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2a0c:	464b      	mov	r3, r9
    2a0e:	7adb      	ldrb	r3, [r3, #11]
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2a10:	ae08      	add	r6, sp, #32
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Set character size */
	module->character_size = config->character_size;
    2a12:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2a14:	464b      	mov	r3, r9
    2a16:	7d1b      	ldrb	r3, [r3, #20]
    2a18:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2a1a:	464b      	mov	r3, r9
    2a1c:	7d5b      	ldrb	r3, [r3, #21]
    2a1e:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a20:	682b      	ldr	r3, [r5, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a22:	1c18      	adds	r0, r3, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a24:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a26:	47c0      	blx	r8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2a28:	464b      	mov	r3, r9
    2a2a:	681b      	ldr	r3, [r3, #0]
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2a2c:	8037      	strh	r7, [r6, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2a2e:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    2a30:	464b      	mov	r3, r9
    2a32:	68db      	ldr	r3, [r3, #12]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a34:	300d      	adds	r0, #13
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    2a36:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a38:	464b      	mov	r3, r9
    2a3a:	7d9b      	ldrb	r3, [r3, #22]
    2a3c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2a3e:	464b      	mov	r3, r9
    2a40:	685a      	ldr	r2, [r3, #4]
    2a42:	9205      	str	r2, [sp, #20]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2a44:	2a00      	cmp	r2, #0
    2a46:	d100      	bne.n	2a4a <usart_init+0xae>
    2a48:	e08b      	b.n	2b62 <usart_init+0x1c6>
    2a4a:	2380      	movs	r3, #128	; 0x80
    2a4c:	055b      	lsls	r3, r3, #21
    2a4e:	429a      	cmp	r2, r3
    2a50:	d000      	beq.n	2a54 <usart_init+0xb8>
    2a52:	e09b      	b.n	2b8c <usart_init+0x1f0>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2a54:	464b      	mov	r3, r9
    2a56:	7ddb      	ldrb	r3, [r3, #23]
    2a58:	2100      	movs	r1, #0
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d100      	bne.n	2a60 <usart_init+0xc4>
    2a5e:	e0a2      	b.n	2ba6 <usart_init+0x20a>
    2a60:	682a      	ldr	r2, [r5, #0]
    2a62:	9f05      	ldr	r7, [sp, #20]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2a64:	8a13      	ldrh	r3, [r2, #16]
    2a66:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a68:	d1fc      	bne.n	2a64 <usart_init+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2a6a:	4653      	mov	r3, sl
    2a6c:	9a03      	ldr	r2, [sp, #12]
    2a6e:	8159      	strh	r1, [r3, #10]
    2a70:	9b04      	ldr	r3, [sp, #16]
    2a72:	4313      	orrs	r3, r2
    2a74:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a76:	465b      	mov	r3, fp
    2a78:	075b      	lsls	r3, r3, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    2a7a:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    2a7c:	464b      	mov	r3, r9
    2a7e:	7ddb      	ldrb	r3, [r3, #23]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d101      	bne.n	2a88 <usart_init+0xec>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2a84:	3304      	adds	r3, #4
    2a86:	431f      	orrs	r7, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2a88:	464b      	mov	r3, r9
    2a8a:	7d5b      	ldrb	r3, [r3, #21]
    2a8c:	041a      	lsls	r2, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a8e:	464b      	mov	r3, r9
    2a90:	7d1b      	ldrb	r3, [r3, #20]
    2a92:	045b      	lsls	r3, r3, #17
    2a94:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    2a96:	464a      	mov	r2, r9
    2a98:	7ad1      	ldrb	r1, [r2, #11]
    2a9a:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2a9c:	8913      	ldrh	r3, [r2, #8]
    2a9e:	2bff      	cmp	r3, #255	; 0xff
    2aa0:	d003      	beq.n	2aaa <usart_init+0x10e>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2aa2:	2280      	movs	r2, #128	; 0x80
    2aa4:	0452      	lsls	r2, r2, #17
    2aa6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2aa8:	4319      	orrs	r1, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2aaa:	464b      	mov	r3, r9
    2aac:	7f1b      	ldrb	r3, [r3, #28]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d103      	bne.n	2aba <usart_init+0x11e>
    2ab2:	4b48      	ldr	r3, [pc, #288]	; (2bd4 <usart_init+0x238>)
    2ab4:	789b      	ldrb	r3, [r3, #2]
    2ab6:	079b      	lsls	r3, r3, #30
    2ab8:	d501      	bpl.n	2abe <usart_init+0x122>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2aba:	2380      	movs	r3, #128	; 0x80
    2abc:	431f      	orrs	r7, r3
    2abe:	682a      	ldr	r2, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2ac0:	8a13      	ldrh	r3, [r2, #16]
    2ac2:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ac4:	d1fc      	bne.n	2ac0 <usart_init+0x124>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2ac6:	4653      	mov	r3, sl
    2ac8:	6059      	str	r1, [r3, #4]
    2aca:	682a      	ldr	r2, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2acc:	8a13      	ldrh	r3, [r2, #16]
    2ace:	0bdb      	lsrs	r3, r3, #15
    2ad0:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ad2:	b29b      	uxth	r3, r3
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d1f9      	bne.n	2acc <usart_init+0x130>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2ad8:	4652      	mov	r2, sl
    2ada:	a904      	add	r1, sp, #16
    2adc:	6017      	str	r7, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ade:	734b      	strb	r3, [r1, #13]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2ae0:	73cb      	strb	r3, [r1, #15]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ae2:	738b      	strb	r3, [r1, #14]

	uint32_t pad_pinmuxes[] = {
    2ae4:	464b      	mov	r3, r9
    2ae6:	6a1b      	ldr	r3, [r3, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ae8:	2280      	movs	r2, #128	; 0x80
    2aea:	9308      	str	r3, [sp, #32]
    2aec:	464b      	mov	r3, r9
    2aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2af0:	2700      	movs	r7, #0
    2af2:	6073      	str	r3, [r6, #4]
    2af4:	464b      	mov	r3, r9
    2af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2af8:	730a      	strb	r2, [r1, #12]
    2afa:	60b3      	str	r3, [r6, #8]
    2afc:	464b      	mov	r3, r9
    2afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b00:	60f3      	str	r3, [r6, #12]
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2b02:	4b35      	ldr	r3, [pc, #212]	; (2bd8 <usart_init+0x23c>)
    2b04:	469b      	mov	fp, r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2b06:	4b35      	ldr	r3, [pc, #212]	; (2bdc <usart_init+0x240>)
    2b08:	469a      	mov	sl, r3
    2b0a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2b0c:	58f0      	ldr	r0, [r6, r3]
    2b0e:	b2f9      	uxtb	r1, r7

		if (current_pinmux == PINMUX_DEFAULT) {
    2b10:	2800      	cmp	r0, #0
    2b12:	d038      	beq.n	2b86 <usart_init+0x1ea>
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2b14:	1c43      	adds	r3, r0, #1
    2b16:	d005      	beq.n	2b24 <usart_init+0x188>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2b18:	ab04      	add	r3, sp, #16
    2b1a:	7318      	strb	r0, [r3, #12]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2b1c:	0c00      	lsrs	r0, r0, #16
    2b1e:	b2c0      	uxtb	r0, r0
    2b20:	a907      	add	r1, sp, #28
    2b22:	47d0      	blx	sl
    2b24:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2b26:	2f04      	cmp	r7, #4
    2b28:	d1ef      	bne.n	2b0a <usart_init+0x16e>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2b2a:	2300      	movs	r3, #0
	}

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
    2b2c:	2200      	movs	r2, #0
    2b2e:	83eb      	strh	r3, [r5, #30]
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2b30:	60ab      	str	r3, [r5, #8]
    2b32:	60eb      	str	r3, [r5, #12]
    2b34:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
    2b36:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    2b38:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
    2b3a:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    2b3c:	3320      	adds	r3, #32
    2b3e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2b40:	3301      	adds	r3, #1
    2b42:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2b44:	3301      	adds	r3, #1
    2b46:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2b48:	3301      	adds	r3, #1
    2b4a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2b4c:	6828      	ldr	r0, [r5, #0]
    2b4e:	47c0      	blx	r8
    2b50:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2b52:	4b23      	ldr	r3, [pc, #140]	; (2be0 <usart_init+0x244>)
    2b54:	4923      	ldr	r1, [pc, #140]	; (2be4 <usart_init+0x248>)
    2b56:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2b58:	4b23      	ldr	r3, [pc, #140]	; (2be8 <usart_init+0x24c>)
    2b5a:	00a4      	lsls	r4, r4, #2
    2b5c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    2b5e:	2000      	movs	r0, #0
    2b60:	e731      	b.n	29c6 <usart_init+0x2a>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2b62:	464b      	mov	r3, r9
    2b64:	7ddb      	ldrb	r3, [r3, #23]
    2b66:	2b00      	cmp	r3, #0
    2b68:	d012      	beq.n	2b90 <usart_init+0x1f4>
				status_code =
    2b6a:	2310      	movs	r3, #16
    2b6c:	9300      	str	r3, [sp, #0]
    2b6e:	464b      	mov	r3, r9
    2b70:	6918      	ldr	r0, [r3, #16]
    2b72:	6999      	ldr	r1, [r3, #24]
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2b74:	1c32      	adds	r2, r6, #0
    2b76:	2300      	movs	r3, #0
    2b78:	4f1c      	ldr	r7, [pc, #112]	; (2bec <usart_init+0x250>)
    2b7a:	47b8      	blx	r7

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2b7c:	2800      	cmp	r0, #0
    2b7e:	d000      	beq.n	2b82 <usart_init+0x1e6>
    2b80:	e721      	b.n	29c6 <usart_init+0x2a>
    2b82:	8831      	ldrh	r1, [r6, #0]
    2b84:	e76c      	b.n	2a60 <usart_init+0xc4>
	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2b86:	1c20      	adds	r0, r4, #0
    2b88:	47d8      	blx	fp
    2b8a:	e7c3      	b.n	2b14 <usart_init+0x178>
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2b8c:	2100      	movs	r1, #0
    2b8e:	e767      	b.n	2a60 <usart_init+0xc4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2b90:	464b      	mov	r3, r9
    2b92:	691b      	ldr	r3, [r3, #16]
    2b94:	b2c0      	uxtb	r0, r0
    2b96:	1c1f      	adds	r7, r3, #0
    2b98:	4b15      	ldr	r3, [pc, #84]	; (2bf0 <usart_init+0x254>)
    2b9a:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2b9c:	2310      	movs	r3, #16
						_sercom_get_async_baud_val(config->baudrate,
    2b9e:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2ba0:	9300      	str	r3, [sp, #0]
    2ba2:	1c38      	adds	r0, r7, #0
    2ba4:	e7e6      	b.n	2b74 <usart_init+0x1d8>
#endif
	switch (transfer_mode)
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2ba6:	464b      	mov	r3, r9
    2ba8:	691b      	ldr	r3, [r3, #16]
    2baa:	b2c0      	uxtb	r0, r0
    2bac:	1c1f      	adds	r7, r3, #0
    2bae:	4b10      	ldr	r3, [pc, #64]	; (2bf0 <usart_init+0x254>)
    2bb0:	4798      	blx	r3
    2bb2:	1c32      	adds	r2, r6, #0
    2bb4:	1c01      	adds	r1, r0, #0
    2bb6:	4b0f      	ldr	r3, [pc, #60]	; (2bf4 <usart_init+0x258>)
    2bb8:	1c38      	adds	r0, r7, #0
    2bba:	4798      	blx	r3
    2bbc:	e7de      	b.n	2b7c <usart_init+0x1e0>
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	00002865 	.word	0x00002865
    2bc4:	40000400 	.word	0x40000400
    2bc8:	00003125 	.word	0x00003125
    2bcc:	00003189 	.word	0x00003189
    2bd0:	000026bd 	.word	0x000026bd
    2bd4:	41002000 	.word	0x41002000
    2bd8:	00002705 	.word	0x00002705
    2bdc:	0000328d 	.word	0x0000328d
    2be0:	000028cd 	.word	0x000028cd
    2be4:	00002c99 	.word	0x00002c99
    2be8:	20000320 	.word	0x20000320
    2bec:	000024d1 	.word	0x000024d1
    2bf0:	000031e9 	.word	0x000031e9
    2bf4:	000024a9 	.word	0x000024a9

00002bf8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2bf8:	1c93      	adds	r3, r2, #2
    2bfa:	009b      	lsls	r3, r3, #2
    2bfc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2bfe:	2301      	movs	r3, #1
    2c00:	4093      	lsls	r3, r2
    2c02:	2120      	movs	r1, #32
    2c04:	1c1a      	adds	r2, r3, #0
    2c06:	5c43      	ldrb	r3, [r0, r1]
    2c08:	431a      	orrs	r2, r3
    2c0a:	5442      	strb	r2, [r0, r1]
}
    2c0c:	4770      	bx	lr
    2c0e:	46c0      	nop			; (mov r8, r8)

00002c10 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2c10:	b570      	push	{r4, r5, r6, lr}
    2c12:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2c14:	4b0b      	ldr	r3, [pc, #44]	; (2c44 <usart_read_job+0x34>)
    2c16:	1c0e      	adds	r6, r1, #0
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c18:	6805      	ldr	r5, [r0, #0]
    2c1a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2c1c:	8ba3      	ldrh	r3, [r4, #28]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d003      	beq.n	2c2a <usart_read_job+0x1a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2c22:	4b09      	ldr	r3, [pc, #36]	; (2c48 <usart_read_job+0x38>)
    2c24:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c26:	2005      	movs	r0, #5
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
}
    2c28:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_BUSY;
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    2c2a:	2301      	movs	r3, #1
    2c2c:	83a3      	strh	r3, [r4, #28]
    2c2e:	4b06      	ldr	r3, [pc, #24]	; (2c48 <usart_read_job+0x38>)
    2c30:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
	module->rx_status                  = STATUS_BUSY;
    2c32:	2322      	movs	r3, #34	; 0x22
    2c34:	2205      	movs	r2, #5
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    2c36:	6166      	str	r6, [r4, #20]
	module->rx_status                  = STATUS_BUSY;
    2c38:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2c3a:	3b1e      	subs	r3, #30
    2c3c:	736b      	strb	r3, [r5, #13]
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    2c3e:	2000      	movs	r0, #0
    2c40:	e7f2      	b.n	2c28 <usart_read_job+0x18>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	00002419 	.word	0x00002419
    2c48:	00002455 	.word	0x00002455

00002c4c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c4e:	1c05      	adds	r5, r0, #0
    2c50:	1c0e      	adds	r6, r1, #0
    2c52:	1c14      	adds	r4, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2c54:	2017      	movs	r0, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    2c56:	2a00      	cmp	r2, #0
    2c58:	d100      	bne.n	2c5c <usart_write_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    2c5c:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2c5e:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    2c60:	2b00      	cmp	r3, #0
    2c62:	d0fa      	beq.n	2c5a <usart_write_buffer_job+0xe>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2c64:	4b0a      	ldr	r3, [pc, #40]	; (2c90 <usart_write_buffer_job+0x44>)
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c66:	682f      	ldr	r7, [r5, #0]
    2c68:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2c6a:	8beb      	ldrh	r3, [r5, #30]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d003      	beq.n	2c78 <usart_write_buffer_job+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2c70:	4b08      	ldr	r3, [pc, #32]	; (2c94 <usart_write_buffer_job+0x48>)
    2c72:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c74:	2005      	movs	r0, #5
    2c76:	e7f0      	b.n	2c5a <usart_write_buffer_job+0xe>
    2c78:	4b06      	ldr	r3, [pc, #24]	; (2c94 <usart_write_buffer_job+0x48>)
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    2c7a:	83ec      	strh	r4, [r5, #30]
    2c7c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
	module->tx_status                  = STATUS_BUSY;
    2c7e:	2323      	movs	r3, #35	; 0x23
    2c80:	2205      	movs	r2, #5
	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    2c82:	61ae      	str	r6, [r5, #24]
	module->tx_status                  = STATUS_BUSY;
    2c84:	54ea      	strb	r2, [r5, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2c86:	3b22      	subs	r3, #34	; 0x22
    2c88:	737b      	strb	r3, [r7, #13]

	return STATUS_OK;
    2c8a:	2000      	movs	r0, #0
    2c8c:	e7e5      	b.n	2c5a <usart_write_buffer_job+0xe>
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	00002419 	.word	0x00002419
    2c94:	00002455 	.word	0x00002455

00002c98 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2c9a:	4b49      	ldr	r3, [pc, #292]	; (2dc0 <_usart_interrupt_handler+0x128>)
    2c9c:	0080      	lsls	r0, r0, #2
    2c9e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2ca0:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2ca2:	8a23      	ldrh	r3, [r4, #16]
    2ca4:	0bdb      	lsrs	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ca6:	d1fc      	bne.n	2ca2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ca8:	7ba6      	ldrb	r6, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    2caa:	7b63      	ldrb	r3, [r4, #13]
	callback_status = module->callback_reg_mask &
    2cac:	2220      	movs	r2, #32
	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
    2cae:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    2cb0:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2cb2:	5caf      	ldrb	r7, [r5, r2]
    2cb4:	5ceb      	ldrb	r3, [r5, r3]
    2cb6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2cb8:	2301      	movs	r3, #1
    2cba:	4233      	tst	r3, r6
    2cbc:	d018      	beq.n	2cf0 <_usart_interrupt_handler+0x58>
		if (module->remaining_tx_buffer_length) {
    2cbe:	8bea      	ldrh	r2, [r5, #30]
    2cc0:	2a00      	cmp	r2, #0
    2cc2:	d036      	beq.n	2d32 <_usart_interrupt_handler+0x9a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cc4:	69aa      	ldr	r2, [r5, #24]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2cc6:	1c51      	adds	r1, r2, #1
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cc8:	7813      	ldrb	r3, [r2, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2cca:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ccc:	7969      	ldrb	r1, [r5, #5]
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cce:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2cd0:	2901      	cmp	r1, #1
    2cd2:	d050      	beq.n	2d76 <_usart_interrupt_handler+0xde>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cd4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2cd6:	05db      	lsls	r3, r3, #23
    2cd8:	0ddb      	lsrs	r3, r3, #23
    2cda:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    2cdc:	8beb      	ldrh	r3, [r5, #30]
    2cde:	3b01      	subs	r3, #1
    2ce0:	b29b      	uxth	r3, r3
    2ce2:	83eb      	strh	r3, [r5, #30]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d103      	bne.n	2cf0 <_usart_interrupt_handler+0x58>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ce8:	3301      	adds	r3, #1
    2cea:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2cec:	3301      	adds	r3, #1
    2cee:	7363      	strb	r3, [r4, #13]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2cf0:	2302      	movs	r3, #2
    2cf2:	4233      	tst	r3, r6
    2cf4:	d005      	beq.n	2d02 <_usart_interrupt_handler+0x6a>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
    2cf6:	2200      	movs	r2, #0
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2cf8:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    2cfa:	3321      	adds	r3, #33	; 0x21
    2cfc:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2cfe:	07fb      	lsls	r3, r7, #31
    2d00:	d435      	bmi.n	2d6e <_usart_interrupt_handler+0xd6>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2d02:	2304      	movs	r3, #4
    2d04:	4233      	tst	r3, r6
    2d06:	d011      	beq.n	2d2c <_usart_interrupt_handler+0x94>

		if (module->remaining_rx_buffer_length) {
    2d08:	8baa      	ldrh	r2, [r5, #28]
    2d0a:	2a00      	cmp	r2, #0
    2d0c:	d00f      	beq.n	2d2e <_usart_interrupt_handler+0x96>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d0e:	8a22      	ldrh	r2, [r4, #16]
    2d10:	b2d2      	uxtb	r2, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2d12:	0751      	lsls	r1, r2, #29
    2d14:	d00f      	beq.n	2d36 <_usart_interrupt_handler+0x9e>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2d16:	0791      	lsls	r1, r2, #30
    2d18:	d533      	bpl.n	2d82 <_usart_interrupt_handler+0xea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2d1a:	221a      	movs	r2, #26
    2d1c:	331e      	adds	r3, #30
    2d1e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    2d20:	8a22      	ldrh	r2, [r4, #16]
    2d22:	3b20      	subs	r3, #32
    2d24:	4313      	orrs	r3, r2
    2d26:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2d28:	077b      	lsls	r3, r7, #29
    2d2a:	d436      	bmi.n	2d9a <_usart_interrupt_handler+0x102>
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d2e:	7323      	strb	r3, [r4, #12]
    2d30:	e7fc      	b.n	2d2c <_usart_interrupt_handler+0x94>
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d32:	7323      	strb	r3, [r4, #12]
    2d34:	e7dc      	b.n	2cf0 <_usart_interrupt_handler+0x58>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d36:	8b23      	ldrh	r3, [r4, #24]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d38:	6969      	ldr	r1, [r5, #20]

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d3a:	05db      	lsls	r3, r3, #23
    2d3c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d3e:	b2da      	uxtb	r2, r3
    2d40:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2d42:	696a      	ldr	r2, [r5, #20]
    2d44:	1c51      	adds	r1, r2, #1
    2d46:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d48:	7969      	ldrb	r1, [r5, #5]
    2d4a:	2901      	cmp	r1, #1
    2d4c:	d031      	beq.n	2db2 <_usart_interrupt_handler+0x11a>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d4e:	8bab      	ldrh	r3, [r5, #28]
    2d50:	3b01      	subs	r3, #1
    2d52:	b29b      	uxth	r3, r3
    2d54:	83ab      	strh	r3, [r5, #28]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d1e8      	bne.n	2d2c <_usart_interrupt_handler+0x94>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d5a:	2204      	movs	r2, #4
    2d5c:	7322      	strb	r2, [r4, #12]
					module->rx_status = STATUS_OK;
    2d5e:	321e      	adds	r2, #30
    2d60:	54ab      	strb	r3, [r5, r2]

					/* Run callback if registered and enabled */
					if (callback_status
    2d62:	07bb      	lsls	r3, r7, #30
    2d64:	d5e2      	bpl.n	2d2c <_usart_interrupt_handler+0x94>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2d66:	68eb      	ldr	r3, [r5, #12]
    2d68:	1c28      	adds	r0, r5, #0
    2d6a:	4798      	blx	r3
    2d6c:	e7de      	b.n	2d2c <_usart_interrupt_handler+0x94>
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2d6e:	1c28      	adds	r0, r5, #0
    2d70:	68ab      	ldr	r3, [r5, #8]
    2d72:	4798      	blx	r3
    2d74:	e7c5      	b.n	2d02 <_usart_interrupt_handler+0x6a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d76:	7851      	ldrb	r1, [r2, #1]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2d78:	3202      	adds	r2, #2
			uint16_t data_to_send = *(module->tx_buffer_ptr);
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d7a:	0209      	lsls	r1, r1, #8
    2d7c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2d7e:	61aa      	str	r2, [r5, #24]
    2d80:	e7a9      	b.n	2cd6 <_usart_interrupt_handler+0x3e>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2d82:	4213      	tst	r3, r2
    2d84:	d10d      	bne.n	2da2 <_usart_interrupt_handler+0x10a>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2d86:	07d3      	lsls	r3, r2, #31
    2d88:	d5ce      	bpl.n	2d28 <_usart_interrupt_handler+0x90>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2d8a:	2213      	movs	r2, #19
    2d8c:	2322      	movs	r3, #34	; 0x22
    2d8e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    2d90:	8a22      	ldrh	r2, [r4, #16]
    2d92:	3b21      	subs	r3, #33	; 0x21
    2d94:	4313      	orrs	r3, r2
    2d96:	8223      	strh	r3, [r4, #16]
    2d98:	e7c6      	b.n	2d28 <_usart_interrupt_handler+0x90>
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d9a:	692b      	ldr	r3, [r5, #16]
    2d9c:	1c28      	adds	r0, r5, #0
    2d9e:	4798      	blx	r3
    2da0:	e7c4      	b.n	2d2c <_usart_interrupt_handler+0x94>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2da2:	221e      	movs	r2, #30
    2da4:	2322      	movs	r3, #34	; 0x22
    2da6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    2da8:	8a22      	ldrh	r2, [r4, #16]
    2daa:	3b1e      	subs	r3, #30
    2dac:	4313      	orrs	r3, r2
    2dae:	8223      	strh	r3, [r4, #16]
    2db0:	e7ba      	b.n	2d28 <_usart_interrupt_handler+0x90>
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2db2:	0a1b      	lsrs	r3, r3, #8
    2db4:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2db6:	696b      	ldr	r3, [r5, #20]
    2db8:	3301      	adds	r3, #1
    2dba:	616b      	str	r3, [r5, #20]
    2dbc:	e7c7      	b.n	2d4e <_usart_interrupt_handler+0xb6>
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	20000320 	.word	0x20000320

00002dc4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2dc4:	b510      	push	{r4, lr}
	switch (clock_source) {
    2dc6:	2807      	cmp	r0, #7
    2dc8:	d823      	bhi.n	2e12 <system_clock_source_get_hz+0x4e>
    2dca:	4b17      	ldr	r3, [pc, #92]	; (2e28 <system_clock_source_get_hz+0x64>)
    2dcc:	0080      	lsls	r0, r0, #2
    2dce:	581b      	ldr	r3, [r3, r0]
    2dd0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2dd2:	2080      	movs	r0, #128	; 0x80
    2dd4:	0200      	lsls	r0, r0, #8
		return 48000000UL;

	default:
		return 0;
	}
}
    2dd6:	bd10      	pop	{r4, pc}

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2dd8:	4b14      	ldr	r3, [pc, #80]	; (2e2c <system_clock_source_get_hz+0x68>)
    2dda:	6918      	ldr	r0, [r3, #16]
    2ddc:	e7fb      	b.n	2dd6 <system_clock_source_get_hz+0x12>
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2dde:	4b14      	ldr	r3, [pc, #80]	; (2e30 <system_clock_source_get_hz+0x6c>)
    2de0:	6a18      	ldr	r0, [r3, #32]
    2de2:	4b14      	ldr	r3, [pc, #80]	; (2e34 <system_clock_source_get_hz+0x70>)
    2de4:	0580      	lsls	r0, r0, #22
    2de6:	0f80      	lsrs	r0, r0, #30
    2de8:	40c3      	lsrs	r3, r0
    2dea:	1c18      	adds	r0, r3, #0
    2dec:	e7f3      	b.n	2dd6 <system_clock_source_get_hz+0x12>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2dee:	4b0f      	ldr	r3, [pc, #60]	; (2e2c <system_clock_source_get_hz+0x68>)
    2df0:	68d8      	ldr	r0, [r3, #12]
    2df2:	e7f0      	b.n	2dd6 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2df4:	2002      	movs	r0, #2
    2df6:	4c0d      	ldr	r4, [pc, #52]	; (2e2c <system_clock_source_get_hz+0x68>)
    2df8:	6823      	ldr	r3, [r4, #0]
    2dfa:	4018      	ands	r0, r3
    2dfc:	d0eb      	beq.n	2dd6 <system_clock_source_get_hz+0x12>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2dfe:	2210      	movs	r2, #16
    2e00:	490b      	ldr	r1, [pc, #44]	; (2e30 <system_clock_source_get_hz+0x6c>)
    2e02:	68cb      	ldr	r3, [r1, #12]
    2e04:	421a      	tst	r2, r3
    2e06:	d0fc      	beq.n	2e02 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2e08:	6823      	ldr	r3, [r4, #0]
    2e0a:	075b      	lsls	r3, r3, #29
    2e0c:	d403      	bmi.n	2e16 <system_clock_source_get_hz+0x52>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2e0e:	480a      	ldr	r0, [pc, #40]	; (2e38 <system_clock_source_get_hz+0x74>)
    2e10:	e7e1      	b.n	2dd6 <system_clock_source_get_hz+0x12>

	default:
		return 0;
    2e12:	2000      	movs	r0, #0
    2e14:	e7df      	b.n	2dd6 <system_clock_source_get_hz+0x12>
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e16:	4b09      	ldr	r3, [pc, #36]	; (2e3c <system_clock_source_get_hz+0x78>)
    2e18:	2000      	movs	r0, #0
    2e1a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2e1c:	68a3      	ldr	r3, [r4, #8]
    2e1e:	041b      	lsls	r3, r3, #16
    2e20:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e22:	4358      	muls	r0, r3
    2e24:	e7d7      	b.n	2dd6 <system_clock_source_get_hz+0x12>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	00003934 	.word	0x00003934
    2e2c:	20000220 	.word	0x20000220
    2e30:	40000800 	.word	0x40000800
    2e34:	007a1200 	.word	0x007a1200
    2e38:	02dc6c00 	.word	0x02dc6c00
    2e3c:	000031e9 	.word	0x000031e9

00002e40 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2e40:	22c2      	movs	r2, #194	; 0xc2
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e42:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e44:	4656      	mov	r6, sl
    2e46:	464d      	mov	r5, r9
    2e48:	4644      	mov	r4, r8
    2e4a:	465f      	mov	r7, fp
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2e4c:	4b61      	ldr	r3, [pc, #388]	; (2fd4 <system_clock_init+0x194>)
    2e4e:	00d2      	lsls	r2, r2, #3
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e50:	b4f0      	push	{r4, r5, r6, r7}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2e52:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e54:	221e      	movs	r2, #30
    2e56:	4960      	ldr	r1, [pc, #384]	; (2fd8 <system_clock_init+0x198>)
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2e58:	2600      	movs	r6, #0
    2e5a:	684b      	ldr	r3, [r1, #4]
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e5c:	b085      	sub	sp, #20
    2e5e:	4393      	bics	r3, r2
    2e60:	3a1a      	subs	r2, #26
    2e62:	4313      	orrs	r3, r2
    2e64:	604b      	str	r3, [r1, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    2e66:	2303      	movs	r3, #3
    2e68:	ac01      	add	r4, sp, #4
    2e6a:	4d5c      	ldr	r5, [pc, #368]	; (2fdc <system_clock_init+0x19c>)
    2e6c:	7023      	strb	r3, [r4, #0]
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2e6e:	b2f0      	uxtb	r0, r6
    2e70:	1c21      	adds	r1, r4, #0
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2e72:	3601      	adds	r6, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2e74:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2e76:	2e1c      	cmp	r6, #28
    2e78:	d1f9      	bne.n	2e6e <system_clock_init+0x2e>
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
	return DSU->DID.reg;
    2e7a:	4b59      	ldr	r3, [pc, #356]	; (2fe0 <system_clock_init+0x1a0>)
    2e7c:	699a      	ldr	r2, [r3, #24]
    2e7e:	2307      	movs	r3, #7
	   Not applicable for silicon rev C and previous*/

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
    2e80:	0512      	lsls	r2, r2, #20
	rev = rev >> DSU_DID_REVISION_Pos;
    2e82:	0f12      	lsrs	r2, r2, #28

	if (rev >= _SYSTEM_MCU_REVISION_D) {
    2e84:	2a02      	cmp	r2, #2
    2e86:	d905      	bls.n	2e94 <system_clock_init+0x54>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2e88:	4b56      	ldr	r3, [pc, #344]	; (2fe4 <system_clock_init+0x1a4>)
    2e8a:	681b      	ldr	r3, [r3, #0]
    2e8c:	0e9b      	lsrs	r3, r3, #26
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
    2e8e:	2b3f      	cmp	r3, #63	; 0x3f
    2e90:	d100      	bne.n	2e94 <system_clock_init+0x54>
    2e92:	e09c      	b.n	2fce <system_clock_init+0x18e>
    2e94:	4a52      	ldr	r2, [pc, #328]	; (2fe0 <system_clock_init+0x1a0>)
    2e96:	6992      	ldr	r2, [r2, #24]
{

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
    2e98:	0512      	lsls	r2, r2, #20
	rev = rev >> DSU_DID_REVISION_Pos;
    2e9a:	0f12      	lsrs	r2, r2, #28

	if (rev < _SYSTEM_MCU_REVISION_D) {
    2e9c:	2a02      	cmp	r2, #2
    2e9e:	d900      	bls.n	2ea2 <system_clock_init+0x62>
    2ea0:	e08b      	b.n	2fba <system_clock_init+0x17a>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    2ea2:	22f8      	movs	r2, #248	; 0xf8
    2ea4:	021b      	lsls	r3, r3, #8
    2ea6:	0152      	lsls	r2, r2, #5
    2ea8:	4013      	ands	r3, r2
    2eaa:	223f      	movs	r2, #63	; 0x3f

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
    2eac:	4f4e      	ldr	r7, [pc, #312]	; (2fe8 <system_clock_init+0x1a8>)
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
    2eae:	4313      	orrs	r3, r2

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
    2eb0:	607b      	str	r3, [r7, #4]
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
    2eb2:	2300      	movs	r3, #0
    2eb4:	603b      	str	r3, [r7, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
    2eb6:	4b4d      	ldr	r3, [pc, #308]	; (2fec <system_clock_init+0x1ac>)
    2eb8:	60bb      	str	r3, [r7, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2eba:	2304      	movs	r3, #4
    2ebc:	683a      	ldr	r2, [r7, #0]
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ebe:	4e45      	ldr	r6, [pc, #276]	; (2fd4 <system_clock_init+0x194>)
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2ec0:	4313      	orrs	r3, r2
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ec2:	2240      	movs	r2, #64	; 0x40
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2ec4:	603b      	str	r3, [r7, #0]
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ec6:	6a33      	ldr	r3, [r6, #32]
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ec8:	4393      	bics	r3, r2
    2eca:	3240      	adds	r2, #64	; 0x40
    2ecc:	4313      	orrs	r3, r2
    2ece:	4a48      	ldr	r2, [pc, #288]	; (2ff0 <system_clock_init+0x1b0>)
    2ed0:	4013      	ands	r3, r2
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2ed2:	2202      	movs	r2, #2
	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ed4:	6233      	str	r3, [r6, #32]
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2ed6:	6a33      	ldr	r3, [r6, #32]
    2ed8:	4313      	orrs	r3, r2
    2eda:	6233      	str	r3, [r6, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2edc:	4b45      	ldr	r3, [pc, #276]	; (2ff4 <system_clock_init+0x1b4>)
    2ede:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2ee0:	2300      	movs	r3, #0
    2ee2:	4698      	mov	r8, r3
    2ee4:	7063      	strb	r3, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2ee6:	2306      	movs	r3, #6
    2ee8:	469b      	mov	fp, r3
    2eea:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2eec:	4643      	mov	r3, r8
    2eee:	7223      	strb	r3, [r4, #8]
	config->output_enable      = false;
    2ef0:	7263      	strb	r3, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2ef2:	2380      	movs	r3, #128	; 0x80
    2ef4:	005b      	lsls	r3, r3, #1
    2ef6:	6063      	str	r3, [r4, #4]
    2ef8:	4b3f      	ldr	r3, [pc, #252]	; (2ff8 <system_clock_init+0x1b8>)
    2efa:	1c21      	adds	r1, r4, #0
    2efc:	2001      	movs	r0, #1
    2efe:	469a      	mov	sl, r3
    2f00:	4798      	blx	r3
    2f02:	4b3e      	ldr	r3, [pc, #248]	; (2ffc <system_clock_init+0x1bc>)
    2f04:	2001      	movs	r0, #1
    2f06:	4699      	mov	r9, r3
    2f08:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f0a:	2301      	movs	r3, #1
    2f0c:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    2f0e:	4643      	mov	r3, r8
    2f10:	7063      	strb	r3, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2f12:	465b      	mov	r3, fp
    2f14:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2f16:	4643      	mov	r3, r8
    2f18:	1c21      	adds	r1, r4, #0
    2f1a:	2002      	movs	r0, #2
    2f1c:	7223      	strb	r3, [r4, #8]
	config->output_enable      = false;
    2f1e:	7263      	strb	r3, [r4, #9]
    2f20:	47d0      	blx	sl
    2f22:	2002      	movs	r0, #2
    2f24:	47c8      	blx	r9
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f26:	2301      	movs	r3, #1
    2f28:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    2f2a:	4643      	mov	r3, r8
    2f2c:	7063      	strb	r3, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2f2e:	465b      	mov	r3, fp
    2f30:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2f32:	4643      	mov	r3, r8
    2f34:	1c21      	adds	r1, r4, #0
    2f36:	2004      	movs	r0, #4
    2f38:	7223      	strb	r3, [r4, #8]
	config->output_enable      = false;
    2f3a:	7263      	strb	r3, [r4, #9]
    2f3c:	47d0      	blx	sl
    2f3e:	2004      	movs	r0, #4
    2f40:	47c8      	blx	r9
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2f42:	2301      	movs	r3, #1
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2f44:	1c21      	adds	r1, r4, #0
    2f46:	2000      	movs	r0, #0
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2f48:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2f4a:	47a8      	blx	r5
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2f4c:	4b2c      	ldr	r3, [pc, #176]	; (3000 <system_clock_init+0x1c0>)
    2f4e:	2000      	movs	r0, #0
    2f50:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f52:	2202      	movs	r2, #2
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f54:	2110      	movs	r1, #16
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f56:	683b      	ldr	r3, [r7, #0]
    2f58:	4313      	orrs	r3, r2
    2f5a:	603b      	str	r3, [r7, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2f5c:	683b      	ldr	r3, [r7, #0]
    2f5e:	327e      	adds	r2, #126	; 0x7e
    2f60:	4393      	bics	r3, r2
    2f62:	b29b      	uxth	r3, r3
    2f64:	84b3      	strh	r3, [r6, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f66:	68f2      	ldr	r2, [r6, #12]
    2f68:	4b1a      	ldr	r3, [pc, #104]	; (2fd4 <system_clock_init+0x194>)
    2f6a:	4211      	tst	r1, r2
    2f6c:	d0fb      	beq.n	2f66 <system_clock_init+0x126>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f6e:	68ba      	ldr	r2, [r7, #8]

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2f70:	21d0      	movs	r1, #208	; 0xd0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f72:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f78:	683a      	ldr	r2, [r7, #0]
    2f7a:	b292      	uxth	r2, r2
    2f7c:	849a      	strh	r2, [r3, #36]	; 0x24

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2f7e:	1c1a      	adds	r2, r3, #0
    2f80:	68d3      	ldr	r3, [r2, #12]
    2f82:	400b      	ands	r3, r1


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2f84:	2bd0      	cmp	r3, #208	; 0xd0
    2f86:	d1fb      	bne.n	2f80 <system_clock_init+0x140>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2f88:	2300      	movs	r3, #0
    2f8a:	4a1e      	ldr	r2, [pc, #120]	; (3004 <system_clock_init+0x1c4>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2f8c:	1c21      	adds	r1, r4, #0
    2f8e:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2f90:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2f92:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2f94:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f96:	2201      	movs	r2, #1
	config->high_when_disabled = false;
    2f98:	7063      	strb	r3, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2f9a:	7223      	strb	r3, [r4, #8]
	config->output_enable      = false;
    2f9c:	7263      	strb	r3, [r4, #9]
    2f9e:	2000      	movs	r0, #0
    2fa0:	3307      	adds	r3, #7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2fa2:	6062      	str	r2, [r4, #4]
    2fa4:	7023      	strb	r3, [r4, #0]
    2fa6:	47d0      	blx	sl
    2fa8:	2000      	movs	r0, #0
    2faa:	47c8      	blx	r9
#endif
}
    2fac:	b005      	add	sp, #20
    2fae:	bc3c      	pop	{r2, r3, r4, r5}
    2fb0:	4690      	mov	r8, r2
    2fb2:	4699      	mov	r9, r3
    2fb4:	46a2      	mov	sl, r4
    2fb6:	46ab      	mov	fp, r5
    2fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    2fba:	223f      	movs	r2, #63	; 0x3f
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
    2fbc:	4f0a      	ldr	r7, [pc, #40]	; (2fe8 <system_clock_init+0x1a8>)
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
    2fbe:	029b      	lsls	r3, r3, #10
    2fc0:	4313      	orrs	r3, r2
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
    2fc2:	607b      	str	r3, [r7, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
    2fc4:	2300      	movs	r3, #0
    2fc6:	603b      	str	r3, [r7, #0]
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
    2fc8:	4b0f      	ldr	r3, [pc, #60]	; (3008 <system_clock_init+0x1c8>)
    2fca:	60bb      	str	r3, [r7, #8]
    2fcc:	e775      	b.n	2eba <system_clock_init+0x7a>
    2fce:	3b20      	subs	r3, #32
    2fd0:	e760      	b.n	2e94 <system_clock_init+0x54>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	40000800 	.word	0x40000800
    2fd8:	41004000 	.word	0x41004000
    2fdc:	00003125 	.word	0x00003125
    2fe0:	41002000 	.word	0x41002000
    2fe4:	00806024 	.word	0x00806024
    2fe8:	20000220 	.word	0x20000220
    2fec:	073f05b8 	.word	0x073f05b8
    2ff0:	fffffcff 	.word	0xfffffcff
    2ff4:	0000300d 	.word	0x0000300d
    2ff8:	00003031 	.word	0x00003031
    2ffc:	000030e1 	.word	0x000030e1
    3000:	00003189 	.word	0x00003189
    3004:	40000400 	.word	0x40000400
    3008:	1c3f05b8 	.word	0x1c3f05b8

0000300c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    300c:	2308      	movs	r3, #8
    300e:	4a06      	ldr	r2, [pc, #24]	; (3028 <system_gclk_init+0x1c>)
    3010:	6991      	ldr	r1, [r2, #24]
    3012:	430b      	orrs	r3, r1
    3014:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3016:	2301      	movs	r3, #1
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3018:	2101      	movs	r1, #1
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    301a:	4a04      	ldr	r2, [pc, #16]	; (302c <system_gclk_init+0x20>)
    301c:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    301e:	7813      	ldrb	r3, [r2, #0]
    3020:	4219      	tst	r1, r3
    3022:	d1fc      	bne.n	301e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	40000400 	.word	0x40000400
    302c:	40000c00 	.word	0x40000c00

00003030 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3030:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3032:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3034:	784b      	ldrb	r3, [r1, #1]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3036:	022d      	lsls	r5, r5, #8
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3038:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    303a:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    303c:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    303e:	2b00      	cmp	r3, #0
    3040:	d002      	beq.n	3048 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3042:	2380      	movs	r3, #128	; 0x80
    3044:	02db      	lsls	r3, r3, #11
    3046:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3048:	7a4b      	ldrb	r3, [r1, #9]
    304a:	2b00      	cmp	r3, #0
    304c:	d002      	beq.n	3054 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    304e:	2380      	movs	r3, #128	; 0x80
    3050:	031b      	lsls	r3, r3, #12
    3052:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3054:	6848      	ldr	r0, [r1, #4]
    3056:	2801      	cmp	r0, #1
    3058:	d90f      	bls.n	307a <system_gclk_gen_set_config+0x4a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    305a:	1e43      	subs	r3, r0, #1
    305c:	4003      	ands	r3, r0
    305e:	d131      	bne.n	30c4 <system_gclk_gen_set_config+0x94>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3060:	2802      	cmp	r0, #2
    3062:	d005      	beq.n	3070 <system_gclk_gen_set_config+0x40>
    3064:	2202      	movs	r2, #2
						mask <<= 1) {
				div2_count++;
    3066:	3301      	adds	r3, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3068:	0052      	lsls	r2, r2, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    306a:	4290      	cmp	r0, r2
    306c:	d8fb      	bhi.n	3066 <system_gclk_gen_set_config+0x36>
    306e:	021b      	lsls	r3, r3, #8
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3070:	4333      	orrs	r3, r6
    3072:	1c1c      	adds	r4, r3, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3074:	2380      	movs	r3, #128	; 0x80
    3076:	035b      	lsls	r3, r3, #13
    3078:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    307a:	7a0b      	ldrb	r3, [r1, #8]
    307c:	2b00      	cmp	r3, #0
    307e:	d002      	beq.n	3086 <system_gclk_gen_set_config+0x56>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3080:	2380      	movs	r3, #128	; 0x80
    3082:	039b      	lsls	r3, r3, #14
    3084:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3086:	4a12      	ldr	r2, [pc, #72]	; (30d0 <system_gclk_gen_set_config+0xa0>)
    3088:	7853      	ldrb	r3, [r2, #1]
    308a:	b25b      	sxtb	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	dbfb      	blt.n	3088 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3090:	4b10      	ldr	r3, [pc, #64]	; (30d4 <system_gclk_gen_set_config+0xa4>)
    3092:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3094:	4b10      	ldr	r3, [pc, #64]	; (30d8 <system_gclk_gen_set_config+0xa8>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3096:	490e      	ldr	r1, [pc, #56]	; (30d0 <system_gclk_gen_set_config+0xa0>)
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3098:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    309a:	784a      	ldrb	r2, [r1, #1]
    309c:	4b0c      	ldr	r3, [pc, #48]	; (30d0 <system_gclk_gen_set_config+0xa0>)
    309e:	b252      	sxtb	r2, r2
    30a0:	2a00      	cmp	r2, #0
    30a2:	dbfa      	blt.n	309a <system_gclk_gen_set_config+0x6a>
    30a4:	1c1a      	adds	r2, r3, #0

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    30a6:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30a8:	7853      	ldrb	r3, [r2, #1]
    30aa:	4909      	ldr	r1, [pc, #36]	; (30d0 <system_gclk_gen_set_config+0xa0>)
    30ac:	b25b      	sxtb	r3, r3
    30ae:	2b00      	cmp	r3, #0
    30b0:	dbfa      	blt.n	30a8 <system_gclk_gen_set_config+0x78>
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    30b2:	2380      	movs	r3, #128	; 0x80
    30b4:	684a      	ldr	r2, [r1, #4]
    30b6:	025b      	lsls	r3, r3, #9
    30b8:	4013      	ands	r3, r2
    30ba:	431d      	orrs	r5, r3
    30bc:	604d      	str	r5, [r1, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    30be:	4b07      	ldr	r3, [pc, #28]	; (30dc <system_gclk_gen_set_config+0xac>)
    30c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30c2:	bd70      	pop	{r4, r5, r6, pc}

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    30c4:	2380      	movs	r3, #128	; 0x80
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    30c6:	0204      	lsls	r4, r0, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    30c8:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    30ca:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    30cc:	431d      	orrs	r5, r3
    30ce:	e7d4      	b.n	307a <system_gclk_gen_set_config+0x4a>
    30d0:	40000c00 	.word	0x40000c00
    30d4:	00002419 	.word	0x00002419
    30d8:	40000c08 	.word	0x40000c08
    30dc:	00002455 	.word	0x00002455

000030e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    30e0:	b510      	push	{r4, lr}
    30e2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30e4:	4a0b      	ldr	r2, [pc, #44]	; (3114 <system_gclk_gen_enable+0x34>)
    30e6:	7853      	ldrb	r3, [r2, #1]
    30e8:	b25b      	sxtb	r3, r3
    30ea:	2b00      	cmp	r3, #0
    30ec:	dbfb      	blt.n	30e6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    30ee:	4b0a      	ldr	r3, [pc, #40]	; (3118 <system_gclk_gen_enable+0x38>)
    30f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    30f2:	4b0a      	ldr	r3, [pc, #40]	; (311c <system_gclk_gen_enable+0x3c>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30f4:	4907      	ldr	r1, [pc, #28]	; (3114 <system_gclk_gen_enable+0x34>)
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    30f6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30f8:	784b      	ldrb	r3, [r1, #1]
    30fa:	4a06      	ldr	r2, [pc, #24]	; (3114 <system_gclk_gen_enable+0x34>)
    30fc:	b25b      	sxtb	r3, r3
    30fe:	2b00      	cmp	r3, #0
    3100:	dbfa      	blt.n	30f8 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3102:	2180      	movs	r1, #128	; 0x80
    3104:	6853      	ldr	r3, [r2, #4]
    3106:	0249      	lsls	r1, r1, #9
    3108:	430b      	orrs	r3, r1
    310a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    310c:	4b04      	ldr	r3, [pc, #16]	; (3120 <system_gclk_gen_enable+0x40>)
    310e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	40000c00 	.word	0x40000c00
    3118:	00002419 	.word	0x00002419
    311c:	40000c04 	.word	0x40000c04
    3120:	00002455 	.word	0x00002455

00003124 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3124:	b538      	push	{r3, r4, r5, lr}
    3126:	1c04      	adds	r4, r0, #0

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3128:	780d      	ldrb	r5, [r1, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    312a:	4b11      	ldr	r3, [pc, #68]	; (3170 <system_gclk_chan_set_config+0x4c>)
    312c:	022d      	lsls	r5, r5, #8
    312e:	4305      	orrs	r5, r0
    3130:	4798      	blx	r3
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3132:	4b10      	ldr	r3, [pc, #64]	; (3174 <system_gclk_chan_set_config+0x50>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3134:	4a10      	ldr	r2, [pc, #64]	; (3178 <system_gclk_chan_set_config+0x54>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3136:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3138:	8850      	ldrh	r0, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    313a:	4b10      	ldr	r3, [pc, #64]	; (317c <system_gclk_chan_set_config+0x58>)
    313c:	8851      	ldrh	r1, [r2, #2]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    313e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    3140:	400b      	ands	r3, r1
    3142:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3144:	8851      	ldrh	r1, [r2, #2]
    3146:	4b0e      	ldr	r3, [pc, #56]	; (3180 <system_gclk_chan_set_config+0x5c>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3148:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    314a:	400b      	ands	r3, r1
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    314c:	2180      	movs	r1, #128	; 0x80
	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    314e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3150:	01c9      	lsls	r1, r1, #7
    3152:	8853      	ldrh	r3, [r2, #2]
    3154:	4c08      	ldr	r4, [pc, #32]	; (3178 <system_gclk_chan_set_config+0x54>)
    3156:	420b      	tst	r3, r1
    3158:	d1fb      	bne.n	3152 <system_gclk_chan_set_config+0x2e>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    315a:	8861      	ldrh	r1, [r4, #2]
    315c:	4b07      	ldr	r3, [pc, #28]	; (317c <system_gclk_chan_set_config+0x58>)
    315e:	0202      	lsls	r2, r0, #8
    3160:	400b      	ands	r3, r1
    3162:	4313      	orrs	r3, r2
    3164:	8063      	strh	r3, [r4, #2]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3166:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3168:	4b06      	ldr	r3, [pc, #24]	; (3184 <system_gclk_chan_set_config+0x60>)
    316a:	4798      	blx	r3
    316c:	8065      	strh	r5, [r4, #2]
}
    316e:	bd38      	pop	{r3, r4, r5, pc}
    3170:	00002419 	.word	0x00002419
    3174:	40000c02 	.word	0x40000c02
    3178:	40000c00 	.word	0x40000c00
    317c:	fffff0ff 	.word	0xfffff0ff
    3180:	ffffbfff 	.word	0xffffbfff
    3184:	00002455 	.word	0x00002455

00003188 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3188:	b510      	push	{r4, lr}
    318a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    318c:	4b06      	ldr	r3, [pc, #24]	; (31a8 <system_gclk_chan_enable+0x20>)
    318e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3190:	2180      	movs	r1, #128	; 0x80
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3192:	4b06      	ldr	r3, [pc, #24]	; (31ac <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3194:	4a06      	ldr	r2, [pc, #24]	; (31b0 <system_gclk_chan_enable+0x28>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3196:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3198:	8853      	ldrh	r3, [r2, #2]
    319a:	01c9      	lsls	r1, r1, #7
    319c:	430b      	orrs	r3, r1
    319e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    31a0:	4b04      	ldr	r3, [pc, #16]	; (31b4 <system_gclk_chan_enable+0x2c>)
    31a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31a4:	bd10      	pop	{r4, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	00002419 	.word	0x00002419
    31ac:	40000c02 	.word	0x40000c02
    31b0:	40000c00 	.word	0x40000c00
    31b4:	00002455 	.word	0x00002455

000031b8 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    31b8:	b510      	push	{r4, lr}
    31ba:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    31bc:	4b06      	ldr	r3, [pc, #24]	; (31d8 <system_gclk_chan_lock+0x20>)
    31be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31c0:	4b06      	ldr	r3, [pc, #24]	; (31dc <system_gclk_chan_lock+0x24>)

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK;
    31c2:	4a07      	ldr	r2, [pc, #28]	; (31e0 <system_gclk_chan_lock+0x28>)
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31c4:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK;
    31c6:	2380      	movs	r3, #128	; 0x80
    31c8:	8851      	ldrh	r1, [r2, #2]
    31ca:	021b      	lsls	r3, r3, #8
    31cc:	430b      	orrs	r3, r1
    31ce:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    31d0:	4b04      	ldr	r3, [pc, #16]	; (31e4 <system_gclk_chan_lock+0x2c>)
    31d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31d4:	bd10      	pop	{r4, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00002419 	.word	0x00002419
    31dc:	40000c02 	.word	0x40000c02
    31e0:	40000c00 	.word	0x40000c00
    31e4:	00002455 	.word	0x00002455

000031e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ea:	4647      	mov	r7, r8
    31ec:	1c04      	adds	r4, r0, #0
    31ee:	b480      	push	{r7}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    31f0:	4e1e      	ldr	r6, [pc, #120]	; (326c <system_gclk_chan_get_hz+0x84>)
    31f2:	47b0      	blx	r6
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31f4:	4b1e      	ldr	r3, [pc, #120]	; (3270 <system_gclk_chan_get_hz+0x88>)
    31f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    31f8:	4c1e      	ldr	r4, [pc, #120]	; (3274 <system_gclk_chan_get_hz+0x8c>)
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    31fa:	4b1f      	ldr	r3, [pc, #124]	; (3278 <system_gclk_chan_get_hz+0x90>)
    31fc:	8865      	ldrh	r5, [r4, #2]
    31fe:	4698      	mov	r8, r3
    3200:	052d      	lsls	r5, r5, #20
    3202:	0f2d      	lsrs	r5, r5, #28
    3204:	4798      	blx	r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3206:	7863      	ldrb	r3, [r4, #1]
    3208:	b25b      	sxtb	r3, r3
    320a:	2b00      	cmp	r3, #0
    320c:	dbfb      	blt.n	3206 <system_gclk_chan_get_hz+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    320e:	47b0      	blx	r6
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3210:	4b1a      	ldr	r3, [pc, #104]	; (327c <system_gclk_chan_get_hz+0x94>)
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3212:	4a18      	ldr	r2, [pc, #96]	; (3274 <system_gclk_chan_get_hz+0x8c>)
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3214:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3216:	7853      	ldrb	r3, [r2, #1]
    3218:	4c16      	ldr	r4, [pc, #88]	; (3274 <system_gclk_chan_get_hz+0x8c>)
    321a:	b25b      	sxtb	r3, r3
    321c:	2b00      	cmp	r3, #0
    321e:	dbfa      	blt.n	3216 <system_gclk_chan_get_hz+0x2e>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3220:	6860      	ldr	r0, [r4, #4]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3222:	4b17      	ldr	r3, [pc, #92]	; (3280 <system_gclk_chan_get_hz+0x98>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3224:	04c0      	lsls	r0, r0, #19
    3226:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3228:	4798      	blx	r3
    322a:	1c07      	adds	r7, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    322c:	4b13      	ldr	r3, [pc, #76]	; (327c <system_gclk_chan_get_hz+0x94>)
    322e:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3230:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3232:	4b14      	ldr	r3, [pc, #80]	; (3284 <system_gclk_chan_get_hz+0x9c>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3234:	02f6      	lsls	r6, r6, #11
    3236:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3238:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    323a:	7863      	ldrb	r3, [r4, #1]
    323c:	b25b      	sxtb	r3, r3
    323e:	2b00      	cmp	r3, #0
    3240:	dbfb      	blt.n	323a <system_gclk_chan_get_hz+0x52>
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3242:	4b0c      	ldr	r3, [pc, #48]	; (3274 <system_gclk_chan_get_hz+0x8c>)
    3244:	6899      	ldr	r1, [r3, #8]
    3246:	0a09      	lsrs	r1, r1, #8
    3248:	b28c      	uxth	r4, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    324a:	47c0      	blx	r8

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    324c:	2e00      	cmp	r6, #0
    324e:	d005      	beq.n	325c <system_gclk_chan_get_hz+0x74>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3250:	1c61      	adds	r1, r4, #1
    3252:	40cf      	lsrs	r7, r1

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
    3254:	1c38      	adds	r0, r7, #0
    3256:	bc04      	pop	{r2}
    3258:	4690      	mov	r8, r2
    325a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t divider = GCLK->GENDIV.bit.DIV;

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    325c:	2c01      	cmp	r4, #1
    325e:	d9f9      	bls.n	3254 <system_gclk_chan_get_hz+0x6c>
		gen_input_hz /= divider;
    3260:	1c38      	adds	r0, r7, #0
    3262:	1c21      	adds	r1, r4, #0
    3264:	4b08      	ldr	r3, [pc, #32]	; (3288 <system_gclk_chan_get_hz+0xa0>)
    3266:	4798      	blx	r3
    3268:	1c07      	adds	r7, r0, #0
    326a:	e7f3      	b.n	3254 <system_gclk_chan_get_hz+0x6c>
    326c:	00002419 	.word	0x00002419
    3270:	40000c02 	.word	0x40000c02
    3274:	40000c00 	.word	0x40000c00
    3278:	00002455 	.word	0x00002455
    327c:	40000c04 	.word	0x40000c04
    3280:	00002dc5 	.word	0x00002dc5
    3284:	40000c08 	.word	0x40000c08
    3288:	000034a9 	.word	0x000034a9

0000328c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    328c:	b570      	push	{r4, r5, r6, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    328e:	09c2      	lsrs	r2, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3290:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3292:	2a00      	cmp	r2, #0
    3294:	d104      	bne.n	32a0 <system_pinmux_pin_set_config+0x14>
		return &(ports[port_index]->Group[group_index]);
    3296:	4a2f      	ldr	r2, [pc, #188]	; (3354 <system_pinmux_pin_set_config+0xc8>)
    3298:	0943      	lsrs	r3, r0, #5
    329a:	4694      	mov	ip, r2
    329c:	01db      	lsls	r3, r3, #7
    329e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    32a0:	221f      	movs	r2, #31
    32a2:	4010      	ands	r0, r2
    32a4:	3a1e      	subs	r2, #30
    32a6:	4082      	lsls	r2, r0
    32a8:	1c10      	adds	r0, r2, #0

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32aa:	78ca      	ldrb	r2, [r1, #3]
    32ac:	2a00      	cmp	r2, #0
    32ae:	d131      	bne.n	3314 <system_pinmux_pin_set_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32b0:	780c      	ldrb	r4, [r1, #0]
    32b2:	2c80      	cmp	r4, #128	; 0x80
    32b4:	d047      	beq.n	3346 <system_pinmux_pin_set_config+0xba>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32b6:	2280      	movs	r2, #128	; 0x80
    32b8:	0624      	lsls	r4, r4, #24
    32ba:	0252      	lsls	r2, r2, #9
    32bc:	4314      	orrs	r4, r2
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    32be:	784a      	ldrb	r2, [r1, #1]
    32c0:	2502      	movs	r5, #2
    32c2:	1c16      	adds	r6, r2, #0
    32c4:	43ae      	bics	r6, r5
    32c6:	d107      	bne.n	32d8 <system_pinmux_pin_set_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    32c8:	788a      	ldrb	r2, [r1, #2]
    32ca:	2a00      	cmp	r2, #0
    32cc:	d137      	bne.n	333e <system_pinmux_pin_set_config+0xb2>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    32ce:	2280      	movs	r2, #128	; 0x80
    32d0:	0292      	lsls	r2, r2, #10
    32d2:	4314      	orrs	r4, r2
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    32d4:	6058      	str	r0, [r3, #4]
    32d6:	784a      	ldrb	r2, [r1, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32d8:	3a01      	subs	r2, #1
    32da:	2a01      	cmp	r2, #1
    32dc:	d935      	bls.n	334a <system_pinmux_pin_set_config+0xbe>
    32de:	25a0      	movs	r5, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    32e0:	0402      	lsls	r2, r0, #16
    32e2:	05ed      	lsls	r5, r5, #23
    32e4:	0c12      	lsrs	r2, r2, #16
    32e6:	432a      	orrs	r2, r5
    32e8:	25d0      	movs	r5, #208	; 0xd0

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    32ea:	4322      	orrs	r2, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32ec:	629a      	str	r2, [r3, #40]	; 0x28
    32ee:	062d      	lsls	r5, r5, #24
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    32f0:	0c02      	lsrs	r2, r0, #16
    32f2:	432a      	orrs	r2, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    32f4:	4322      	orrs	r2, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32f6:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    32f8:	78ca      	ldrb	r2, [r1, #3]
    32fa:	2a00      	cmp	r2, #0
    32fc:	d109      	bne.n	3312 <system_pinmux_pin_set_config+0x86>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    32fe:	0362      	lsls	r2, r4, #13
    3300:	d503      	bpl.n	330a <system_pinmux_pin_set_config+0x7e>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3302:	788a      	ldrb	r2, [r1, #2]
    3304:	2a01      	cmp	r2, #1
    3306:	d023      	beq.n	3350 <system_pinmux_pin_set_config+0xc4>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3308:	6158      	str	r0, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    330a:	784a      	ldrb	r2, [r1, #1]
    330c:	3a01      	subs	r2, #1
    330e:	2a01      	cmp	r2, #1
    3310:	d913      	bls.n	333a <system_pinmux_pin_set_config+0xae>
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
}
    3312:	bd70      	pop	{r4, r5, r6, pc}

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3314:	24a0      	movs	r4, #160	; 0xa0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3316:	0402      	lsls	r2, r0, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3318:	05e4      	lsls	r4, r4, #23
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    331a:	0c12      	lsrs	r2, r2, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    331c:	4322      	orrs	r2, r4

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    331e:	24d0      	movs	r4, #208	; 0xd0
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3320:	6058      	str	r0, [r3, #4]

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3322:	0624      	lsls	r4, r4, #24
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3324:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3326:	0c02      	lsrs	r2, r0, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3328:	4322      	orrs	r2, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    332a:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    332c:	78ca      	ldrb	r2, [r1, #3]
    332e:	2a00      	cmp	r2, #0
    3330:	d1ef      	bne.n	3312 <system_pinmux_pin_set_config+0x86>
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3332:	784a      	ldrb	r2, [r1, #1]
    3334:	3a01      	subs	r2, #1
    3336:	2a01      	cmp	r2, #1
    3338:	d8eb      	bhi.n	3312 <system_pinmux_pin_set_config+0x86>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    333a:	6098      	str	r0, [r3, #8]
    333c:	e7e9      	b.n	3312 <system_pinmux_pin_set_config+0x86>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    333e:	22c0      	movs	r2, #192	; 0xc0
    3340:	02d2      	lsls	r2, r2, #11
    3342:	4314      	orrs	r4, r2
    3344:	e7c6      	b.n	32d4 <system_pinmux_pin_set_config+0x48>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3346:	2400      	movs	r4, #0
    3348:	e7b9      	b.n	32be <system_pinmux_pin_set_config+0x32>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    334a:	4a03      	ldr	r2, [pc, #12]	; (3358 <system_pinmux_pin_set_config+0xcc>)
    334c:	4014      	ands	r4, r2
    334e:	e7c6      	b.n	32de <system_pinmux_pin_set_config+0x52>
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
				port->OUTSET.reg = pin_mask;
    3350:	6198      	str	r0, [r3, #24]
    3352:	e7da      	b.n	330a <system_pinmux_pin_set_config+0x7e>
    3354:	41004400 	.word	0x41004400
    3358:	fffbffff 	.word	0xfffbffff

0000335c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    335c:	4770      	bx	lr
    335e:	46c0      	nop			; (mov r8, r8)

00003360 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3360:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3362:	4b05      	ldr	r3, [pc, #20]	; (3378 <system_init+0x18>)
    3364:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3366:	4b05      	ldr	r3, [pc, #20]	; (337c <system_init+0x1c>)
    3368:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    336a:	4b05      	ldr	r3, [pc, #20]	; (3380 <system_init+0x20>)
    336c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    336e:	4b05      	ldr	r3, [pc, #20]	; (3384 <system_init+0x24>)
    3370:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3372:	4b05      	ldr	r3, [pc, #20]	; (3388 <system_init+0x28>)
    3374:	4798      	blx	r3
}
    3376:	bd08      	pop	{r3, pc}
    3378:	00002e41 	.word	0x00002e41
    337c:	00002415 	.word	0x00002415
    3380:	0000335d 	.word	0x0000335d
    3384:	000023a1 	.word	0x000023a1
    3388:	0000335d 	.word	0x0000335d

0000338c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    338c:	e7fe      	b.n	338c <Dummy_Handler>
    338e:	46c0      	nop			; (mov r8, r8)

00003390 <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3390:	4914      	ldr	r1, [pc, #80]	; (33e4 <Reset_Handler+0x54>)
    3392:	4815      	ldr	r0, [pc, #84]	; (33e8 <Reset_Handler+0x58>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3394:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3396:	4281      	cmp	r1, r0
    3398:	d009      	beq.n	33ae <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    339a:	4b14      	ldr	r3, [pc, #80]	; (33ec <Reset_Handler+0x5c>)
    339c:	4298      	cmp	r0, r3
    339e:	d206      	bcs.n	33ae <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    33a0:	43c2      	mvns	r2, r0
    33a2:	18d2      	adds	r2, r2, r3
    33a4:	0892      	lsrs	r2, r2, #2
    33a6:	3201      	adds	r2, #1
    33a8:	0092      	lsls	r2, r2, #2
    33aa:	4b11      	ldr	r3, [pc, #68]	; (33f0 <Reset_Handler+0x60>)
    33ac:	4798      	blx	r3
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    33ae:	4811      	ldr	r0, [pc, #68]	; (33f4 <Reset_Handler+0x64>)
    33b0:	4b11      	ldr	r3, [pc, #68]	; (33f8 <Reset_Handler+0x68>)
    33b2:	4298      	cmp	r0, r3
    33b4:	d207      	bcs.n	33c6 <Reset_Handler+0x36>
                *pDest++ = 0;
    33b6:	43c2      	mvns	r2, r0
    33b8:	18d2      	adds	r2, r2, r3
    33ba:	0892      	lsrs	r2, r2, #2
    33bc:	3201      	adds	r2, #1
    33be:	0092      	lsls	r2, r2, #2
    33c0:	2100      	movs	r1, #0
    33c2:	4b0e      	ldr	r3, [pc, #56]	; (33fc <Reset_Handler+0x6c>)
    33c4:	4798      	blx	r3
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    33c6:	21ff      	movs	r1, #255	; 0xff
    33c8:	4b0d      	ldr	r3, [pc, #52]	; (3400 <Reset_Handler+0x70>)
    33ca:	4a0e      	ldr	r2, [pc, #56]	; (3404 <Reset_Handler+0x74>)
    33cc:	438b      	bics	r3, r1
    33ce:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    33d0:	2380      	movs	r3, #128	; 0x80
    33d2:	4a0d      	ldr	r2, [pc, #52]	; (3408 <Reset_Handler+0x78>)
    33d4:	6851      	ldr	r1, [r2, #4]
    33d6:	430b      	orrs	r3, r1
    33d8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    33da:	4b0c      	ldr	r3, [pc, #48]	; (340c <Reset_Handler+0x7c>)
    33dc:	4798      	blx	r3

        /* Branch to main function */
        main();
    33de:	4b0c      	ldr	r3, [pc, #48]	; (3410 <Reset_Handler+0x80>)
    33e0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    33e2:	e7fe      	b.n	33e2 <Reset_Handler+0x52>
    33e4:	00003988 	.word	0x00003988
    33e8:	20000000 	.word	0x20000000
    33ec:	20000018 	.word	0x20000018
    33f0:	0000384d 	.word	0x0000384d
    33f4:	20000018 	.word	0x20000018
    33f8:	20000338 	.word	0x20000338
    33fc:	0000385f 	.word	0x0000385f
    3400:	00000000 	.word	0x00000000
    3404:	e000ed00 	.word	0xe000ed00
    3408:	41004000 	.word	0x41004000
    340c:	00003801 	.word	0x00003801
    3410:	00003415 	.word	0x00003415

00003414 <main>:
volatile enum USART_FSM_STATUS usart_status = Init;
enum FORM_FACTOR module_form_factor = p2p;


int main (void)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	4657      	mov	r7, sl
    3418:	464e      	mov	r6, r9
    341a:	4645      	mov	r5, r8
	system_init();
    341c:	4b15      	ldr	r3, [pc, #84]	; (3474 <main+0x60>)
volatile enum USART_FSM_STATUS usart_status = Init;
enum FORM_FACTOR module_form_factor = p2p;


int main (void)
{
    341e:	b4e0      	push	{r5, r6, r7}
	system_init();
    3420:	4798      	blx	r3
	gpio_init();
    3422:	4b15      	ldr	r3, [pc, #84]	; (3478 <main+0x64>)
    3424:	4798      	blx	r3
	timer_init();
    3426:	4b15      	ldr	r3, [pc, #84]	; (347c <main+0x68>)
    3428:	4798      	blx	r3
	usart_link_init();
    342a:	4b15      	ldr	r3, [pc, #84]	; (3480 <main+0x6c>)
    342c:	4798      	blx	r3
	i2c_link_init();
    342e:	4b15      	ldr	r3, [pc, #84]	; (3484 <main+0x70>)
    3430:	4798      	blx	r3
	fw_update_init();
    3432:	4b15      	ldr	r3, [pc, #84]	; (3488 <main+0x74>)
    3434:	4798      	blx	r3
    3436:	4b15      	ldr	r3, [pc, #84]	; (348c <main+0x78>)
    3438:	4c15      	ldr	r4, [pc, #84]	; (3490 <main+0x7c>)
    343a:	469a      	mov	sl, r3
    343c:	4b15      	ldr	r3, [pc, #84]	; (3494 <main+0x80>)
    343e:	4d16      	ldr	r5, [pc, #88]	; (3498 <main+0x84>)
    3440:	4699      	mov	r9, r3
    3442:	4b16      	ldr	r3, [pc, #88]	; (349c <main+0x88>)
    3444:	4f16      	ldr	r7, [pc, #88]	; (34a0 <main+0x8c>)
    3446:	4698      	mov	r8, r3
    3448:	4e16      	ldr	r6, [pc, #88]	; (34a4 <main+0x90>)
	
	while(1)
	{
		switch(usart_status)
    344a:	7823      	ldrb	r3, [r4, #0]
    344c:	b2db      	uxtb	r3, r3
    344e:	2b04      	cmp	r3, #4
    3450:	d8fb      	bhi.n	344a <main+0x36>
    3452:	009b      	lsls	r3, r3, #2
    3454:	58eb      	ldr	r3, [r5, r3]
    3456:	469f      	mov	pc, r3
				break;
			case Feedback:
				usart_status = usart_feedback();
				break;
			case Reset:
				usart_status = usart_sys_reset();
    3458:	47b8      	blx	r7
    345a:	7020      	strb	r0, [r4, #0]
				break;
    345c:	e7f5      	b.n	344a <main+0x36>
				break;
			case Analysis:
				usart_status = usart_protocol_analysis();
				break;
			case Feedback:
				usart_status = usart_feedback();
    345e:	47c0      	blx	r8
    3460:	7020      	strb	r0, [r4, #0]
				break;
    3462:	e7f2      	b.n	344a <main+0x36>
		{
			case Init:
				usart_waiting();
				break;
			case Analysis:
				usart_status = usart_protocol_analysis();
    3464:	47c8      	blx	r9
    3466:	7020      	strb	r0, [r4, #0]
				break;
    3468:	e7ef      	b.n	344a <main+0x36>
	while(1)
	{
		switch(usart_status)
		{
			case Init:
				usart_waiting();
    346a:	47d0      	blx	sl
				break;
    346c:	e7ed      	b.n	344a <main+0x36>
				break;
			case Reset:
				usart_status = usart_sys_reset();
				break;
			case I2C:
				usart_status = usart_2_i2c_mode();
    346e:	47b0      	blx	r6
    3470:	7020      	strb	r0, [r4, #0]
				break;
    3472:	e7ea      	b.n	344a <main+0x36>
    3474:	00003361 	.word	0x00003361
    3478:	00001fad 	.word	0x00001fad
    347c:	0000229d 	.word	0x0000229d
    3480:	00001761 	.word	0x00001761
    3484:	00000c15 	.word	0x00000c15
    3488:	00000981 	.word	0x00000981
    348c:	00001489 	.word	0x00001489
    3490:	20000235 	.word	0x20000235
    3494:	00000d51 	.word	0x00000d51
    3498:	00003954 	.word	0x00003954
    349c:	00000cf5 	.word	0x00000cf5
    34a0:	00000d29 	.word	0x00000d29
    34a4:	0000143d 	.word	0x0000143d

000034a8 <__aeabi_uidiv>:
    34a8:	2200      	movs	r2, #0
    34aa:	0843      	lsrs	r3, r0, #1
    34ac:	428b      	cmp	r3, r1
    34ae:	d374      	bcc.n	359a <__aeabi_uidiv+0xf2>
    34b0:	0903      	lsrs	r3, r0, #4
    34b2:	428b      	cmp	r3, r1
    34b4:	d35f      	bcc.n	3576 <__aeabi_uidiv+0xce>
    34b6:	0a03      	lsrs	r3, r0, #8
    34b8:	428b      	cmp	r3, r1
    34ba:	d344      	bcc.n	3546 <__aeabi_uidiv+0x9e>
    34bc:	0b03      	lsrs	r3, r0, #12
    34be:	428b      	cmp	r3, r1
    34c0:	d328      	bcc.n	3514 <__aeabi_uidiv+0x6c>
    34c2:	0c03      	lsrs	r3, r0, #16
    34c4:	428b      	cmp	r3, r1
    34c6:	d30d      	bcc.n	34e4 <__aeabi_uidiv+0x3c>
    34c8:	22ff      	movs	r2, #255	; 0xff
    34ca:	0209      	lsls	r1, r1, #8
    34cc:	ba12      	rev	r2, r2
    34ce:	0c03      	lsrs	r3, r0, #16
    34d0:	428b      	cmp	r3, r1
    34d2:	d302      	bcc.n	34da <__aeabi_uidiv+0x32>
    34d4:	1212      	asrs	r2, r2, #8
    34d6:	0209      	lsls	r1, r1, #8
    34d8:	d065      	beq.n	35a6 <__aeabi_uidiv+0xfe>
    34da:	0b03      	lsrs	r3, r0, #12
    34dc:	428b      	cmp	r3, r1
    34de:	d319      	bcc.n	3514 <__aeabi_uidiv+0x6c>
    34e0:	e000      	b.n	34e4 <__aeabi_uidiv+0x3c>
    34e2:	0a09      	lsrs	r1, r1, #8
    34e4:	0bc3      	lsrs	r3, r0, #15
    34e6:	428b      	cmp	r3, r1
    34e8:	d301      	bcc.n	34ee <__aeabi_uidiv+0x46>
    34ea:	03cb      	lsls	r3, r1, #15
    34ec:	1ac0      	subs	r0, r0, r3
    34ee:	4152      	adcs	r2, r2
    34f0:	0b83      	lsrs	r3, r0, #14
    34f2:	428b      	cmp	r3, r1
    34f4:	d301      	bcc.n	34fa <__aeabi_uidiv+0x52>
    34f6:	038b      	lsls	r3, r1, #14
    34f8:	1ac0      	subs	r0, r0, r3
    34fa:	4152      	adcs	r2, r2
    34fc:	0b43      	lsrs	r3, r0, #13
    34fe:	428b      	cmp	r3, r1
    3500:	d301      	bcc.n	3506 <__aeabi_uidiv+0x5e>
    3502:	034b      	lsls	r3, r1, #13
    3504:	1ac0      	subs	r0, r0, r3
    3506:	4152      	adcs	r2, r2
    3508:	0b03      	lsrs	r3, r0, #12
    350a:	428b      	cmp	r3, r1
    350c:	d301      	bcc.n	3512 <__aeabi_uidiv+0x6a>
    350e:	030b      	lsls	r3, r1, #12
    3510:	1ac0      	subs	r0, r0, r3
    3512:	4152      	adcs	r2, r2
    3514:	0ac3      	lsrs	r3, r0, #11
    3516:	428b      	cmp	r3, r1
    3518:	d301      	bcc.n	351e <__aeabi_uidiv+0x76>
    351a:	02cb      	lsls	r3, r1, #11
    351c:	1ac0      	subs	r0, r0, r3
    351e:	4152      	adcs	r2, r2
    3520:	0a83      	lsrs	r3, r0, #10
    3522:	428b      	cmp	r3, r1
    3524:	d301      	bcc.n	352a <__aeabi_uidiv+0x82>
    3526:	028b      	lsls	r3, r1, #10
    3528:	1ac0      	subs	r0, r0, r3
    352a:	4152      	adcs	r2, r2
    352c:	0a43      	lsrs	r3, r0, #9
    352e:	428b      	cmp	r3, r1
    3530:	d301      	bcc.n	3536 <__aeabi_uidiv+0x8e>
    3532:	024b      	lsls	r3, r1, #9
    3534:	1ac0      	subs	r0, r0, r3
    3536:	4152      	adcs	r2, r2
    3538:	0a03      	lsrs	r3, r0, #8
    353a:	428b      	cmp	r3, r1
    353c:	d301      	bcc.n	3542 <__aeabi_uidiv+0x9a>
    353e:	020b      	lsls	r3, r1, #8
    3540:	1ac0      	subs	r0, r0, r3
    3542:	4152      	adcs	r2, r2
    3544:	d2cd      	bcs.n	34e2 <__aeabi_uidiv+0x3a>
    3546:	09c3      	lsrs	r3, r0, #7
    3548:	428b      	cmp	r3, r1
    354a:	d301      	bcc.n	3550 <__aeabi_uidiv+0xa8>
    354c:	01cb      	lsls	r3, r1, #7
    354e:	1ac0      	subs	r0, r0, r3
    3550:	4152      	adcs	r2, r2
    3552:	0983      	lsrs	r3, r0, #6
    3554:	428b      	cmp	r3, r1
    3556:	d301      	bcc.n	355c <__aeabi_uidiv+0xb4>
    3558:	018b      	lsls	r3, r1, #6
    355a:	1ac0      	subs	r0, r0, r3
    355c:	4152      	adcs	r2, r2
    355e:	0943      	lsrs	r3, r0, #5
    3560:	428b      	cmp	r3, r1
    3562:	d301      	bcc.n	3568 <__aeabi_uidiv+0xc0>
    3564:	014b      	lsls	r3, r1, #5
    3566:	1ac0      	subs	r0, r0, r3
    3568:	4152      	adcs	r2, r2
    356a:	0903      	lsrs	r3, r0, #4
    356c:	428b      	cmp	r3, r1
    356e:	d301      	bcc.n	3574 <__aeabi_uidiv+0xcc>
    3570:	010b      	lsls	r3, r1, #4
    3572:	1ac0      	subs	r0, r0, r3
    3574:	4152      	adcs	r2, r2
    3576:	08c3      	lsrs	r3, r0, #3
    3578:	428b      	cmp	r3, r1
    357a:	d301      	bcc.n	3580 <__aeabi_uidiv+0xd8>
    357c:	00cb      	lsls	r3, r1, #3
    357e:	1ac0      	subs	r0, r0, r3
    3580:	4152      	adcs	r2, r2
    3582:	0883      	lsrs	r3, r0, #2
    3584:	428b      	cmp	r3, r1
    3586:	d301      	bcc.n	358c <__aeabi_uidiv+0xe4>
    3588:	008b      	lsls	r3, r1, #2
    358a:	1ac0      	subs	r0, r0, r3
    358c:	4152      	adcs	r2, r2
    358e:	0843      	lsrs	r3, r0, #1
    3590:	428b      	cmp	r3, r1
    3592:	d301      	bcc.n	3598 <__aeabi_uidiv+0xf0>
    3594:	004b      	lsls	r3, r1, #1
    3596:	1ac0      	subs	r0, r0, r3
    3598:	4152      	adcs	r2, r2
    359a:	1a41      	subs	r1, r0, r1
    359c:	d200      	bcs.n	35a0 <__aeabi_uidiv+0xf8>
    359e:	4601      	mov	r1, r0
    35a0:	4152      	adcs	r2, r2
    35a2:	4610      	mov	r0, r2
    35a4:	4770      	bx	lr
    35a6:	e7ff      	b.n	35a8 <__aeabi_uidiv+0x100>
    35a8:	b501      	push	{r0, lr}
    35aa:	2000      	movs	r0, #0
    35ac:	f000 f8fc 	bl	37a8 <__aeabi_idiv0>
    35b0:	bd02      	pop	{r1, pc}
    35b2:	46c0      	nop			; (mov r8, r8)

000035b4 <__aeabi_uidivmod>:
    35b4:	2900      	cmp	r1, #0
    35b6:	d0f7      	beq.n	35a8 <__aeabi_uidiv+0x100>
    35b8:	b503      	push	{r0, r1, lr}
    35ba:	f7ff ff75 	bl	34a8 <__aeabi_uidiv>
    35be:	bc0e      	pop	{r1, r2, r3}
    35c0:	4342      	muls	r2, r0
    35c2:	1a89      	subs	r1, r1, r2
    35c4:	4718      	bx	r3
    35c6:	46c0      	nop			; (mov r8, r8)

000035c8 <__aeabi_idiv>:
    35c8:	4603      	mov	r3, r0
    35ca:	430b      	orrs	r3, r1
    35cc:	d47f      	bmi.n	36ce <__aeabi_idiv+0x106>
    35ce:	2200      	movs	r2, #0
    35d0:	0843      	lsrs	r3, r0, #1
    35d2:	428b      	cmp	r3, r1
    35d4:	d374      	bcc.n	36c0 <__aeabi_idiv+0xf8>
    35d6:	0903      	lsrs	r3, r0, #4
    35d8:	428b      	cmp	r3, r1
    35da:	d35f      	bcc.n	369c <__aeabi_idiv+0xd4>
    35dc:	0a03      	lsrs	r3, r0, #8
    35de:	428b      	cmp	r3, r1
    35e0:	d344      	bcc.n	366c <__aeabi_idiv+0xa4>
    35e2:	0b03      	lsrs	r3, r0, #12
    35e4:	428b      	cmp	r3, r1
    35e6:	d328      	bcc.n	363a <__aeabi_idiv+0x72>
    35e8:	0c03      	lsrs	r3, r0, #16
    35ea:	428b      	cmp	r3, r1
    35ec:	d30d      	bcc.n	360a <__aeabi_idiv+0x42>
    35ee:	22ff      	movs	r2, #255	; 0xff
    35f0:	0209      	lsls	r1, r1, #8
    35f2:	ba12      	rev	r2, r2
    35f4:	0c03      	lsrs	r3, r0, #16
    35f6:	428b      	cmp	r3, r1
    35f8:	d302      	bcc.n	3600 <__aeabi_idiv+0x38>
    35fa:	1212      	asrs	r2, r2, #8
    35fc:	0209      	lsls	r1, r1, #8
    35fe:	d065      	beq.n	36cc <__aeabi_idiv+0x104>
    3600:	0b03      	lsrs	r3, r0, #12
    3602:	428b      	cmp	r3, r1
    3604:	d319      	bcc.n	363a <__aeabi_idiv+0x72>
    3606:	e000      	b.n	360a <__aeabi_idiv+0x42>
    3608:	0a09      	lsrs	r1, r1, #8
    360a:	0bc3      	lsrs	r3, r0, #15
    360c:	428b      	cmp	r3, r1
    360e:	d301      	bcc.n	3614 <__aeabi_idiv+0x4c>
    3610:	03cb      	lsls	r3, r1, #15
    3612:	1ac0      	subs	r0, r0, r3
    3614:	4152      	adcs	r2, r2
    3616:	0b83      	lsrs	r3, r0, #14
    3618:	428b      	cmp	r3, r1
    361a:	d301      	bcc.n	3620 <__aeabi_idiv+0x58>
    361c:	038b      	lsls	r3, r1, #14
    361e:	1ac0      	subs	r0, r0, r3
    3620:	4152      	adcs	r2, r2
    3622:	0b43      	lsrs	r3, r0, #13
    3624:	428b      	cmp	r3, r1
    3626:	d301      	bcc.n	362c <__aeabi_idiv+0x64>
    3628:	034b      	lsls	r3, r1, #13
    362a:	1ac0      	subs	r0, r0, r3
    362c:	4152      	adcs	r2, r2
    362e:	0b03      	lsrs	r3, r0, #12
    3630:	428b      	cmp	r3, r1
    3632:	d301      	bcc.n	3638 <__aeabi_idiv+0x70>
    3634:	030b      	lsls	r3, r1, #12
    3636:	1ac0      	subs	r0, r0, r3
    3638:	4152      	adcs	r2, r2
    363a:	0ac3      	lsrs	r3, r0, #11
    363c:	428b      	cmp	r3, r1
    363e:	d301      	bcc.n	3644 <__aeabi_idiv+0x7c>
    3640:	02cb      	lsls	r3, r1, #11
    3642:	1ac0      	subs	r0, r0, r3
    3644:	4152      	adcs	r2, r2
    3646:	0a83      	lsrs	r3, r0, #10
    3648:	428b      	cmp	r3, r1
    364a:	d301      	bcc.n	3650 <__aeabi_idiv+0x88>
    364c:	028b      	lsls	r3, r1, #10
    364e:	1ac0      	subs	r0, r0, r3
    3650:	4152      	adcs	r2, r2
    3652:	0a43      	lsrs	r3, r0, #9
    3654:	428b      	cmp	r3, r1
    3656:	d301      	bcc.n	365c <__aeabi_idiv+0x94>
    3658:	024b      	lsls	r3, r1, #9
    365a:	1ac0      	subs	r0, r0, r3
    365c:	4152      	adcs	r2, r2
    365e:	0a03      	lsrs	r3, r0, #8
    3660:	428b      	cmp	r3, r1
    3662:	d301      	bcc.n	3668 <__aeabi_idiv+0xa0>
    3664:	020b      	lsls	r3, r1, #8
    3666:	1ac0      	subs	r0, r0, r3
    3668:	4152      	adcs	r2, r2
    366a:	d2cd      	bcs.n	3608 <__aeabi_idiv+0x40>
    366c:	09c3      	lsrs	r3, r0, #7
    366e:	428b      	cmp	r3, r1
    3670:	d301      	bcc.n	3676 <__aeabi_idiv+0xae>
    3672:	01cb      	lsls	r3, r1, #7
    3674:	1ac0      	subs	r0, r0, r3
    3676:	4152      	adcs	r2, r2
    3678:	0983      	lsrs	r3, r0, #6
    367a:	428b      	cmp	r3, r1
    367c:	d301      	bcc.n	3682 <__aeabi_idiv+0xba>
    367e:	018b      	lsls	r3, r1, #6
    3680:	1ac0      	subs	r0, r0, r3
    3682:	4152      	adcs	r2, r2
    3684:	0943      	lsrs	r3, r0, #5
    3686:	428b      	cmp	r3, r1
    3688:	d301      	bcc.n	368e <__aeabi_idiv+0xc6>
    368a:	014b      	lsls	r3, r1, #5
    368c:	1ac0      	subs	r0, r0, r3
    368e:	4152      	adcs	r2, r2
    3690:	0903      	lsrs	r3, r0, #4
    3692:	428b      	cmp	r3, r1
    3694:	d301      	bcc.n	369a <__aeabi_idiv+0xd2>
    3696:	010b      	lsls	r3, r1, #4
    3698:	1ac0      	subs	r0, r0, r3
    369a:	4152      	adcs	r2, r2
    369c:	08c3      	lsrs	r3, r0, #3
    369e:	428b      	cmp	r3, r1
    36a0:	d301      	bcc.n	36a6 <__aeabi_idiv+0xde>
    36a2:	00cb      	lsls	r3, r1, #3
    36a4:	1ac0      	subs	r0, r0, r3
    36a6:	4152      	adcs	r2, r2
    36a8:	0883      	lsrs	r3, r0, #2
    36aa:	428b      	cmp	r3, r1
    36ac:	d301      	bcc.n	36b2 <__aeabi_idiv+0xea>
    36ae:	008b      	lsls	r3, r1, #2
    36b0:	1ac0      	subs	r0, r0, r3
    36b2:	4152      	adcs	r2, r2
    36b4:	0843      	lsrs	r3, r0, #1
    36b6:	428b      	cmp	r3, r1
    36b8:	d301      	bcc.n	36be <__aeabi_idiv+0xf6>
    36ba:	004b      	lsls	r3, r1, #1
    36bc:	1ac0      	subs	r0, r0, r3
    36be:	4152      	adcs	r2, r2
    36c0:	1a41      	subs	r1, r0, r1
    36c2:	d200      	bcs.n	36c6 <__aeabi_idiv+0xfe>
    36c4:	4601      	mov	r1, r0
    36c6:	4152      	adcs	r2, r2
    36c8:	4610      	mov	r0, r2
    36ca:	4770      	bx	lr
    36cc:	e05d      	b.n	378a <__aeabi_idiv+0x1c2>
    36ce:	0fca      	lsrs	r2, r1, #31
    36d0:	d000      	beq.n	36d4 <__aeabi_idiv+0x10c>
    36d2:	4249      	negs	r1, r1
    36d4:	1003      	asrs	r3, r0, #32
    36d6:	d300      	bcc.n	36da <__aeabi_idiv+0x112>
    36d8:	4240      	negs	r0, r0
    36da:	4053      	eors	r3, r2
    36dc:	2200      	movs	r2, #0
    36de:	469c      	mov	ip, r3
    36e0:	0903      	lsrs	r3, r0, #4
    36e2:	428b      	cmp	r3, r1
    36e4:	d32d      	bcc.n	3742 <__aeabi_idiv+0x17a>
    36e6:	0a03      	lsrs	r3, r0, #8
    36e8:	428b      	cmp	r3, r1
    36ea:	d312      	bcc.n	3712 <__aeabi_idiv+0x14a>
    36ec:	22fc      	movs	r2, #252	; 0xfc
    36ee:	0189      	lsls	r1, r1, #6
    36f0:	ba12      	rev	r2, r2
    36f2:	0a03      	lsrs	r3, r0, #8
    36f4:	428b      	cmp	r3, r1
    36f6:	d30c      	bcc.n	3712 <__aeabi_idiv+0x14a>
    36f8:	0189      	lsls	r1, r1, #6
    36fa:	1192      	asrs	r2, r2, #6
    36fc:	428b      	cmp	r3, r1
    36fe:	d308      	bcc.n	3712 <__aeabi_idiv+0x14a>
    3700:	0189      	lsls	r1, r1, #6
    3702:	1192      	asrs	r2, r2, #6
    3704:	428b      	cmp	r3, r1
    3706:	d304      	bcc.n	3712 <__aeabi_idiv+0x14a>
    3708:	0189      	lsls	r1, r1, #6
    370a:	d03a      	beq.n	3782 <__aeabi_idiv+0x1ba>
    370c:	1192      	asrs	r2, r2, #6
    370e:	e000      	b.n	3712 <__aeabi_idiv+0x14a>
    3710:	0989      	lsrs	r1, r1, #6
    3712:	09c3      	lsrs	r3, r0, #7
    3714:	428b      	cmp	r3, r1
    3716:	d301      	bcc.n	371c <__aeabi_idiv+0x154>
    3718:	01cb      	lsls	r3, r1, #7
    371a:	1ac0      	subs	r0, r0, r3
    371c:	4152      	adcs	r2, r2
    371e:	0983      	lsrs	r3, r0, #6
    3720:	428b      	cmp	r3, r1
    3722:	d301      	bcc.n	3728 <__aeabi_idiv+0x160>
    3724:	018b      	lsls	r3, r1, #6
    3726:	1ac0      	subs	r0, r0, r3
    3728:	4152      	adcs	r2, r2
    372a:	0943      	lsrs	r3, r0, #5
    372c:	428b      	cmp	r3, r1
    372e:	d301      	bcc.n	3734 <__aeabi_idiv+0x16c>
    3730:	014b      	lsls	r3, r1, #5
    3732:	1ac0      	subs	r0, r0, r3
    3734:	4152      	adcs	r2, r2
    3736:	0903      	lsrs	r3, r0, #4
    3738:	428b      	cmp	r3, r1
    373a:	d301      	bcc.n	3740 <__aeabi_idiv+0x178>
    373c:	010b      	lsls	r3, r1, #4
    373e:	1ac0      	subs	r0, r0, r3
    3740:	4152      	adcs	r2, r2
    3742:	08c3      	lsrs	r3, r0, #3
    3744:	428b      	cmp	r3, r1
    3746:	d301      	bcc.n	374c <__aeabi_idiv+0x184>
    3748:	00cb      	lsls	r3, r1, #3
    374a:	1ac0      	subs	r0, r0, r3
    374c:	4152      	adcs	r2, r2
    374e:	0883      	lsrs	r3, r0, #2
    3750:	428b      	cmp	r3, r1
    3752:	d301      	bcc.n	3758 <__aeabi_idiv+0x190>
    3754:	008b      	lsls	r3, r1, #2
    3756:	1ac0      	subs	r0, r0, r3
    3758:	4152      	adcs	r2, r2
    375a:	d2d9      	bcs.n	3710 <__aeabi_idiv+0x148>
    375c:	0843      	lsrs	r3, r0, #1
    375e:	428b      	cmp	r3, r1
    3760:	d301      	bcc.n	3766 <__aeabi_idiv+0x19e>
    3762:	004b      	lsls	r3, r1, #1
    3764:	1ac0      	subs	r0, r0, r3
    3766:	4152      	adcs	r2, r2
    3768:	1a41      	subs	r1, r0, r1
    376a:	d200      	bcs.n	376e <__aeabi_idiv+0x1a6>
    376c:	4601      	mov	r1, r0
    376e:	4663      	mov	r3, ip
    3770:	4152      	adcs	r2, r2
    3772:	105b      	asrs	r3, r3, #1
    3774:	4610      	mov	r0, r2
    3776:	d301      	bcc.n	377c <__aeabi_idiv+0x1b4>
    3778:	4240      	negs	r0, r0
    377a:	2b00      	cmp	r3, #0
    377c:	d500      	bpl.n	3780 <__aeabi_idiv+0x1b8>
    377e:	4249      	negs	r1, r1
    3780:	4770      	bx	lr
    3782:	4663      	mov	r3, ip
    3784:	105b      	asrs	r3, r3, #1
    3786:	d300      	bcc.n	378a <__aeabi_idiv+0x1c2>
    3788:	4240      	negs	r0, r0
    378a:	b501      	push	{r0, lr}
    378c:	2000      	movs	r0, #0
    378e:	f000 f80b 	bl	37a8 <__aeabi_idiv0>
    3792:	bd02      	pop	{r1, pc}

00003794 <__aeabi_idivmod>:
    3794:	2900      	cmp	r1, #0
    3796:	d0f8      	beq.n	378a <__aeabi_idiv+0x1c2>
    3798:	b503      	push	{r0, r1, lr}
    379a:	f7ff ff15 	bl	35c8 <__aeabi_idiv>
    379e:	bc0e      	pop	{r1, r2, r3}
    37a0:	4342      	muls	r2, r0
    37a2:	1a89      	subs	r1, r1, r2
    37a4:	4718      	bx	r3
    37a6:	46c0      	nop			; (mov r8, r8)

000037a8 <__aeabi_idiv0>:
    37a8:	4770      	bx	lr
    37aa:	46c0      	nop			; (mov r8, r8)

000037ac <__aeabi_lmul>:
    37ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ae:	464f      	mov	r7, r9
    37b0:	4646      	mov	r6, r8
    37b2:	0405      	lsls	r5, r0, #16
    37b4:	0c2d      	lsrs	r5, r5, #16
    37b6:	1c2c      	adds	r4, r5, #0
    37b8:	b4c0      	push	{r6, r7}
    37ba:	0417      	lsls	r7, r2, #16
    37bc:	0c16      	lsrs	r6, r2, #16
    37be:	0c3f      	lsrs	r7, r7, #16
    37c0:	4699      	mov	r9, r3
    37c2:	0c03      	lsrs	r3, r0, #16
    37c4:	437c      	muls	r4, r7
    37c6:	4375      	muls	r5, r6
    37c8:	435f      	muls	r7, r3
    37ca:	4373      	muls	r3, r6
    37cc:	197d      	adds	r5, r7, r5
    37ce:	0c26      	lsrs	r6, r4, #16
    37d0:	19ad      	adds	r5, r5, r6
    37d2:	469c      	mov	ip, r3
    37d4:	42af      	cmp	r7, r5
    37d6:	d903      	bls.n	37e0 <__aeabi_lmul+0x34>
    37d8:	2380      	movs	r3, #128	; 0x80
    37da:	025b      	lsls	r3, r3, #9
    37dc:	4698      	mov	r8, r3
    37de:	44c4      	add	ip, r8
    37e0:	464b      	mov	r3, r9
    37e2:	4351      	muls	r1, r2
    37e4:	4343      	muls	r3, r0
    37e6:	0424      	lsls	r4, r4, #16
    37e8:	0c2e      	lsrs	r6, r5, #16
    37ea:	0c24      	lsrs	r4, r4, #16
    37ec:	042d      	lsls	r5, r5, #16
    37ee:	4466      	add	r6, ip
    37f0:	192c      	adds	r4, r5, r4
    37f2:	1859      	adds	r1, r3, r1
    37f4:	1989      	adds	r1, r1, r6
    37f6:	1c20      	adds	r0, r4, #0
    37f8:	bc0c      	pop	{r2, r3}
    37fa:	4690      	mov	r8, r2
    37fc:	4699      	mov	r9, r3
    37fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003800 <__libc_init_array>:
    3800:	4b0e      	ldr	r3, [pc, #56]	; (383c <__libc_init_array+0x3c>)
    3802:	b570      	push	{r4, r5, r6, lr}
    3804:	2500      	movs	r5, #0
    3806:	1c1e      	adds	r6, r3, #0
    3808:	4c0d      	ldr	r4, [pc, #52]	; (3840 <__libc_init_array+0x40>)
    380a:	1ae4      	subs	r4, r4, r3
    380c:	10a4      	asrs	r4, r4, #2
    380e:	42a5      	cmp	r5, r4
    3810:	d004      	beq.n	381c <__libc_init_array+0x1c>
    3812:	00ab      	lsls	r3, r5, #2
    3814:	58f3      	ldr	r3, [r6, r3]
    3816:	4798      	blx	r3
    3818:	3501      	adds	r5, #1
    381a:	e7f8      	b.n	380e <__libc_init_array+0xe>
    381c:	f000 f8a4 	bl	3968 <_init>
    3820:	4b08      	ldr	r3, [pc, #32]	; (3844 <__libc_init_array+0x44>)
    3822:	2500      	movs	r5, #0
    3824:	1c1e      	adds	r6, r3, #0
    3826:	4c08      	ldr	r4, [pc, #32]	; (3848 <__libc_init_array+0x48>)
    3828:	1ae4      	subs	r4, r4, r3
    382a:	10a4      	asrs	r4, r4, #2
    382c:	42a5      	cmp	r5, r4
    382e:	d004      	beq.n	383a <__libc_init_array+0x3a>
    3830:	00ab      	lsls	r3, r5, #2
    3832:	58f3      	ldr	r3, [r6, r3]
    3834:	4798      	blx	r3
    3836:	3501      	adds	r5, #1
    3838:	e7f8      	b.n	382c <__libc_init_array+0x2c>
    383a:	bd70      	pop	{r4, r5, r6, pc}
    383c:	00003974 	.word	0x00003974
    3840:	00003974 	.word	0x00003974
    3844:	00003974 	.word	0x00003974
    3848:	00003978 	.word	0x00003978

0000384c <memcpy>:
    384c:	2300      	movs	r3, #0
    384e:	b510      	push	{r4, lr}
    3850:	4293      	cmp	r3, r2
    3852:	d003      	beq.n	385c <memcpy+0x10>
    3854:	5ccc      	ldrb	r4, [r1, r3]
    3856:	54c4      	strb	r4, [r0, r3]
    3858:	3301      	adds	r3, #1
    385a:	e7f9      	b.n	3850 <memcpy+0x4>
    385c:	bd10      	pop	{r4, pc}

0000385e <memset>:
    385e:	1c03      	adds	r3, r0, #0
    3860:	1882      	adds	r2, r0, r2
    3862:	4293      	cmp	r3, r2
    3864:	d002      	beq.n	386c <memset+0xe>
    3866:	7019      	strb	r1, [r3, #0]
    3868:	3301      	adds	r3, #1
    386a:	e7fa      	b.n	3862 <memset+0x4>
    386c:	4770      	bx	lr
    386e:	0000      	movs	r0, r0
    3870:	00000e10 	.word	0x00000e10
    3874:	00000e2e 	.word	0x00000e2e
    3878:	00000e1e 	.word	0x00000e1e
    387c:	00000e7c 	.word	0x00000e7c
    3880:	00000e7c 	.word	0x00000e7c
    3884:	00000e3e 	.word	0x00000e3e
    3888:	00000e14 	.word	0x00000e14
    388c:	00001706 	.word	0x00001706
    3890:	000016ca 	.word	0x000016ca
    3894:	000016ca 	.word	0x000016ca
    3898:	000016ca 	.word	0x000016ca
    389c:	000016ca 	.word	0x000016ca
    38a0:	000016ca 	.word	0x000016ca
    38a4:	000016ca 	.word	0x000016ca
    38a8:	000016e0 	.word	0x000016e0
    38ac:	0000172a 	.word	0x0000172a
    38b0:	0000172a 	.word	0x0000172a
    38b4:	0000172a 	.word	0x0000172a
    38b8:	000016f0 	.word	0x000016f0
    38bc:	000016f0 	.word	0x000016f0
    38c0:	000016f0 	.word	0x000016f0
    38c4:	000016f0 	.word	0x000016f0
    38c8:	000016f0 	.word	0x000016f0
    38cc:	000016f0 	.word	0x000016f0
    38d0:	000016e0 	.word	0x000016e0
    38d4:	42002000 	.word	0x42002000
    38d8:	42002400 	.word	0x42002400
    38dc:	42002800 	.word	0x42002800
    38e0:	42002c00 	.word	0x42002c00
    38e4:	42003000 	.word	0x42003000
    38e8:	42003400 	.word	0x42003400
    38ec:	42003800 	.word	0x42003800
    38f0:	42003c00 	.word	0x42003c00
    38f4:	14141313 	.word	0x14141313
    38f8:	16161515 	.word	0x16161515
    38fc:	02000100 	.word	0x02000100
    3900:	08000400 	.word	0x08000400
    3904:	20001000 	.word	0x20001000
    3908:	80004000 	.word	0x80004000

0000390c <tc_interrupt_vectors.10896>:
    390c:	100f0e0d 14131211 42000800 42000c00     ...........B...B
    391c:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    392c:	0a090807 00000c0b 00002dee 00002e12     .........-......
    393c:	00002e12 00002dd2 00002dd2 00002dd8     .....-...-...-..
    394c:	00002dde 00002df4 0000346a 00003464     .-...-..j4..d4..
    395c:	0000345e 00003458 0000346e              ^4..X4..n4..

00003968 <_init>:
    3968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    396a:	46c0      	nop			; (mov r8, r8)
    396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    396e:	bc08      	pop	{r3}
    3970:	469e      	mov	lr, r3
    3972:	4770      	bx	lr

00003974 <__init_array_start>:
    3974:	000000cd 	.word	0x000000cd

00003978 <_fini>:
    3978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    397e:	bc08      	pop	{r3}
    3980:	469e      	mov	lr, r3
    3982:	4770      	bx	lr

00003984 <__fini_array_start>:
    3984:	000000a5 	.word	0x000000a5
